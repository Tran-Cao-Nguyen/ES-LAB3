
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004884  08004884  00005884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004894  08004894  00006028  2**0
                  CONTENTS
  4 .ARM          00000008  08004894  08004894  00005894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800489c  0800489c  00006028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800489c  0800489c  0000589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048a0  080048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080048a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006028  2**0
                  CONTENTS
 10 .bss          0000018c  20000028  20000028  00006028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001b4  200001b4  00006028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f720  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e19  00000000  00000000  00015778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00018598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bce  00000000  00000000  00019538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023411  00000000  00000000  0001a106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ee2  00000000  00000000  0003d517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf75  00000000  00000000  000523f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012036e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e54  00000000  00000000  001203b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00124208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800486c 	.word	0x0800486c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	0800486c 	.word	0x0800486c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <button_init+0x14>)
 80004c2:	f002 f9a7 	bl	8002814 <HAL_GPIO_WritePin>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40020c00 	.word	0x40020c00

080004d0 <isButtonPressed>:
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */

int isButtonPressed(int idx){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if(button_count[idx] == 1)
 80004d8:	4a07      	ldr	r2, [pc, #28]	@ (80004f8 <isButtonPressed+0x28>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d101      	bne.n	80004e8 <isButtonPressed+0x18>
	{
//		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
		return 1;
 80004e4:	2301      	movs	r3, #1
 80004e6:	e000      	b.n	80004ea <isButtonPressed+0x1a>
	}
	return 0;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20000044 	.word	0x20000044

080004fc <button_Scan>:
void button_Scan(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2108      	movs	r1, #8
 8000506:	482f      	ldr	r0, [pc, #188]	@ (80005c4 <button_Scan+0xc8>)
 8000508:	f002 f984 	bl	8002814 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	2108      	movs	r1, #8
 8000510:	482c      	ldr	r0, [pc, #176]	@ (80005c4 <button_Scan+0xc8>)
 8000512:	f002 f97f 	bl	8002814 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000516:	230a      	movs	r3, #10
 8000518:	2202      	movs	r2, #2
 800051a:	492b      	ldr	r1, [pc, #172]	@ (80005c8 <button_Scan+0xcc>)
 800051c:	482b      	ldr	r0, [pc, #172]	@ (80005cc <button_Scan+0xd0>)
 800051e:	f002 ffde 	bl	80034de <HAL_SPI_Receive>
	  int button_index = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800052a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	e03f      	b.n	80005b2 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db06      	blt.n	8000546 <button_Scan+0x4a>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b03      	cmp	r3, #3
 800053c:	dc03      	bgt.n	8000546 <button_Scan+0x4a>
			  button_index = i + 4;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3304      	adds	r3, #4
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	e018      	b.n	8000578 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b03      	cmp	r3, #3
 800054a:	dd07      	ble.n	800055c <button_Scan+0x60>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b07      	cmp	r3, #7
 8000550:	dc04      	bgt.n	800055c <button_Scan+0x60>
			  button_index = 7 - i;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f1c3 0307 	rsb	r3, r3, #7
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e00d      	b.n	8000578 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b07      	cmp	r3, #7
 8000560:	dd06      	ble.n	8000570 <button_Scan+0x74>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0b      	cmp	r3, #11
 8000566:	dc03      	bgt.n	8000570 <button_Scan+0x74>
			  button_index = i + 4;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3304      	adds	r3, #4
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	e003      	b.n	8000578 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f1c3 0317 	rsb	r3, r3, #23
 8000576:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000578:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <button_Scan+0xcc>)
 800057a:	881a      	ldrh	r2, [r3, #0]
 800057c:	897b      	ldrh	r3, [r7, #10]
 800057e:	4013      	ands	r3, r2
 8000580:	b29b      	uxth	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d005      	beq.n	8000592 <button_Scan+0x96>
 8000586:	4a12      	ldr	r2, [pc, #72]	@ (80005d0 <button_Scan+0xd4>)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2100      	movs	r1, #0
 800058c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000590:	e009      	b.n	80005a6 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000592:	4a0f      	ldr	r2, [pc, #60]	@ (80005d0 <button_Scan+0xd4>)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800059a:	3301      	adds	r3, #1
 800059c:	b299      	uxth	r1, r3
 800059e:	4a0c      	ldr	r2, [pc, #48]	@ (80005d0 <button_Scan+0xd4>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 80005a6:	897b      	ldrh	r3, [r7, #10]
 80005a8:	085b      	lsrs	r3, r3, #1
 80005aa:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3301      	adds	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	ddbc      	ble.n	8000532 <button_Scan+0x36>
	  }
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020c00 	.word	0x40020c00
 80005c8:	20000064 	.word	0x20000064
 80005cc:	20000110 	.word	0x20000110
 80005d0:	20000044 	.word	0x20000044

080005d4 <fsm_init>:

#include "fsm_auto.h"
#include "graphic.h"

void fsm_init()
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	redCounter = redDuration /1000;
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <fsm_init+0x50>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <fsm_init+0x54>)
 80005de:	fb82 1203 	smull	r1, r2, r2, r3
 80005e2:	1192      	asrs	r2, r2, #6
 80005e4:	17db      	asrs	r3, r3, #31
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	4a10      	ldr	r2, [pc, #64]	@ (800062c <fsm_init+0x58>)
 80005ea:	6013      	str	r3, [r2, #0]
	greenCounter = greenDuration /1000;
 80005ec:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <fsm_init+0x5c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <fsm_init+0x54>)
 80005f2:	fb82 1203 	smull	r1, r2, r2, r3
 80005f6:	1192      	asrs	r2, r2, #6
 80005f8:	17db      	asrs	r3, r3, #31
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000634 <fsm_init+0x60>)
 80005fe:	6013      	str	r3, [r2, #0]
	amberCounter = amberDuration /1000;
 8000600:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <fsm_init+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <fsm_init+0x54>)
 8000606:	fb82 1203 	smull	r1, r2, r2, r3
 800060a:	1192      	asrs	r2, r2, #6
 800060c:	17db      	asrs	r3, r3, #31
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <fsm_init+0x68>)
 8000612:	6013      	str	r3, [r2, #0]
	mode = 1;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <fsm_init+0x6c>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000000 	.word	0x20000000
 8000628:	10624dd3 	.word	0x10624dd3
 800062c:	200000c0 	.word	0x200000c0
 8000630:	20000004 	.word	0x20000004
 8000634:	200000c4 	.word	0x200000c4
 8000638:	20000008 	.word	0x20000008
 800063c:	200000c8 	.word	0x200000c8
 8000640:	200000d4 	.word	0x200000d4

08000644 <fsm_automatic_run>:

void fsm_automatic_run(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

	if (isButtonPressed(0) && mode == 1)
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ff41 	bl	80004d0 <isButtonPressed>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d01a      	beq.n	800068a <fsm_automatic_run+0x46>
 8000654:	4b94      	ldr	r3, [pc, #592]	@ (80008a8 <fsm_automatic_run+0x264>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d116      	bne.n	800068a <fsm_automatic_run+0x46>
	{
		clearAllLed();
 800065c:	f001 f8cc 	bl	80017f8 <clearAllLed>

		mode = 2;
 8000660:	4b91      	ldr	r3, [pc, #580]	@ (80008a8 <fsm_automatic_run+0x264>)
 8000662:	2202      	movs	r2, #2
 8000664:	601a      	str	r2, [r3, #0]
		tempRed = redDuration;
 8000666:	4b91      	ldr	r3, [pc, #580]	@ (80008ac <fsm_automatic_run+0x268>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a91      	ldr	r2, [pc, #580]	@ (80008b0 <fsm_automatic_run+0x26c>)
 800066c:	6013      	str	r3, [r2, #0]
		tempGreen = greenDuration;
 800066e:	4b91      	ldr	r3, [pc, #580]	@ (80008b4 <fsm_automatic_run+0x270>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a91      	ldr	r2, [pc, #580]	@ (80008b8 <fsm_automatic_run+0x274>)
 8000674:	6013      	str	r3, [r2, #0]
		tempAmber = amberDuration;
 8000676:	4b91      	ldr	r3, [pc, #580]	@ (80008bc <fsm_automatic_run+0x278>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a91      	ldr	r2, [pc, #580]	@ (80008c0 <fsm_automatic_run+0x27c>)
 800067c:	6013      	str	r3, [r2, #0]
		isButtonPressed(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff ff26 	bl	80004d0 <isButtonPressed>
		isButtonPressed(2);
 8000684:	2002      	movs	r0, #2
 8000686:	f7ff ff23 	bl	80004d0 <isButtonPressed>
	}
	if(counter % 4 == 0)
 800068a:	4b8e      	ldr	r3, [pc, #568]	@ (80008c4 <fsm_automatic_run+0x280>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f003 0303 	and.w	r3, r3, #3
 8000692:	2b00      	cmp	r3, #0
 8000694:	f040 8105 	bne.w	80008a2 <fsm_automatic_run+0x25e>
	{
		counter = 0;
 8000698:	4b8a      	ldr	r3, [pc, #552]	@ (80008c4 <fsm_automatic_run+0x280>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
		switch (status)
 800069e:	4b8a      	ldr	r3, [pc, #552]	@ (80008c8 <fsm_automatic_run+0x284>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	f200 80f4 	bhi.w	8000890 <fsm_automatic_run+0x24c>
 80006a8:	a201      	add	r2, pc, #4	@ (adr r2, 80006b0 <fsm_automatic_run+0x6c>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c5 	.word	0x080006c5
 80006b4:	080006d5 	.word	0x080006d5
 80006b8:	0800073b 	.word	0x0800073b
 80006bc:	080007b5 	.word	0x080007b5
 80006c0:	08000819 	.word	0x08000819
			{
				case INIT:
					clearAllLed();
 80006c4:	f001 f898 	bl	80017f8 <clearAllLed>
					fsm_init();
 80006c8:	f7ff ff84 	bl	80005d4 <fsm_init>
					status = RED_GREEN;
 80006cc:	4b7e      	ldr	r3, [pc, #504]	@ (80008c8 <fsm_automatic_run+0x284>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]

					break;
 80006d2:	e0e6      	b.n	80008a2 <fsm_automatic_run+0x25e>
				case RED_GREEN:
					lcd_Clear(WHITE);
 80006d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80006d8:	f000 fcc8 	bl	800106c <lcd_Clear>
					lcdRedGreen();
 80006dc:	f000 fb4a 	bl	8000d74 <lcdRedGreen>
					road1 = redCounter;
 80006e0:	4b7a      	ldr	r3, [pc, #488]	@ (80008cc <fsm_automatic_run+0x288>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a7a      	ldr	r2, [pc, #488]	@ (80008d0 <fsm_automatic_run+0x28c>)
 80006e6:	6013      	str	r3, [r2, #0]
					road2 = greenCounter;
 80006e8:	4b7a      	ldr	r3, [pc, #488]	@ (80008d4 <fsm_automatic_run+0x290>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a7a      	ldr	r2, [pc, #488]	@ (80008d8 <fsm_automatic_run+0x294>)
 80006ee:	6013      	str	r3, [r2, #0]

					redCounter--;
 80006f0:	4b76      	ldr	r3, [pc, #472]	@ (80008cc <fsm_automatic_run+0x288>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	4a75      	ldr	r2, [pc, #468]	@ (80008cc <fsm_automatic_run+0x288>)
 80006f8:	6013      	str	r3, [r2, #0]
					greenCounter--;
 80006fa:	4b76      	ldr	r3, [pc, #472]	@ (80008d4 <fsm_automatic_run+0x290>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a74      	ldr	r2, [pc, #464]	@ (80008d4 <fsm_automatic_run+0x290>)
 8000702:	6013      	str	r3, [r2, #0]
					updateLedBuffer(road1, road2);
 8000704:	4b72      	ldr	r3, [pc, #456]	@ (80008d0 <fsm_automatic_run+0x28c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a73      	ldr	r2, [pc, #460]	@ (80008d8 <fsm_automatic_run+0x294>)
 800070a:	6812      	ldr	r2, [r2, #0]
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fb90 	bl	8000e34 <updateLedBuffer>

					if (greenCounter <= 0)
 8000714:	4b6f      	ldr	r3, [pc, #444]	@ (80008d4 <fsm_automatic_run+0x290>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	f300 80bb 	bgt.w	8000894 <fsm_automatic_run+0x250>
					{
						status = RED_AMBER;
 800071e:	4b6a      	ldr	r3, [pc, #424]	@ (80008c8 <fsm_automatic_run+0x284>)
 8000720:	2202      	movs	r2, #2
 8000722:	601a      	str	r2, [r3, #0]
						amberCounter = amberDuration / 1000;
 8000724:	4b65      	ldr	r3, [pc, #404]	@ (80008bc <fsm_automatic_run+0x278>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a6c      	ldr	r2, [pc, #432]	@ (80008dc <fsm_automatic_run+0x298>)
 800072a:	fb82 1203 	smull	r1, r2, r2, r3
 800072e:	1192      	asrs	r2, r2, #6
 8000730:	17db      	asrs	r3, r3, #31
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4a6a      	ldr	r2, [pc, #424]	@ (80008e0 <fsm_automatic_run+0x29c>)
 8000736:	6013      	str	r3, [r2, #0]
					}
					break;
 8000738:	e0ac      	b.n	8000894 <fsm_automatic_run+0x250>
				case RED_AMBER:
					lcd_Clear(WHITE);
 800073a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800073e:	f000 fc95 	bl	800106c <lcd_Clear>
					lcdRedAmber();
 8000742:	f000 fb2f 	bl	8000da4 <lcdRedAmber>

					road1 = redCounter;
 8000746:	4b61      	ldr	r3, [pc, #388]	@ (80008cc <fsm_automatic_run+0x288>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a61      	ldr	r2, [pc, #388]	@ (80008d0 <fsm_automatic_run+0x28c>)
 800074c:	6013      	str	r3, [r2, #0]
					road2 = amberCounter;
 800074e:	4b64      	ldr	r3, [pc, #400]	@ (80008e0 <fsm_automatic_run+0x29c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a61      	ldr	r2, [pc, #388]	@ (80008d8 <fsm_automatic_run+0x294>)
 8000754:	6013      	str	r3, [r2, #0]
					updateLedBuffer(road1, road2);
 8000756:	4b5e      	ldr	r3, [pc, #376]	@ (80008d0 <fsm_automatic_run+0x28c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a5f      	ldr	r2, [pc, #380]	@ (80008d8 <fsm_automatic_run+0x294>)
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fb67 	bl	8000e34 <updateLedBuffer>
					redCounter--;
 8000766:	4b59      	ldr	r3, [pc, #356]	@ (80008cc <fsm_automatic_run+0x288>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3b01      	subs	r3, #1
 800076c:	4a57      	ldr	r2, [pc, #348]	@ (80008cc <fsm_automatic_run+0x288>)
 800076e:	6013      	str	r3, [r2, #0]
					amberCounter--;
 8000770:	4b5b      	ldr	r3, [pc, #364]	@ (80008e0 <fsm_automatic_run+0x29c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3b01      	subs	r3, #1
 8000776:	4a5a      	ldr	r2, [pc, #360]	@ (80008e0 <fsm_automatic_run+0x29c>)
 8000778:	6013      	str	r3, [r2, #0]

					if (redCounter <= 0)
 800077a:	4b54      	ldr	r3, [pc, #336]	@ (80008cc <fsm_automatic_run+0x288>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	f300 808a 	bgt.w	8000898 <fsm_automatic_run+0x254>
					{
						status = GREEN_RED;
 8000784:	4b50      	ldr	r3, [pc, #320]	@ (80008c8 <fsm_automatic_run+0x284>)
 8000786:	2203      	movs	r2, #3
 8000788:	601a      	str	r2, [r3, #0]

						redCounter = redDuration/1000;
 800078a:	4b48      	ldr	r3, [pc, #288]	@ (80008ac <fsm_automatic_run+0x268>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a53      	ldr	r2, [pc, #332]	@ (80008dc <fsm_automatic_run+0x298>)
 8000790:	fb82 1203 	smull	r1, r2, r2, r3
 8000794:	1192      	asrs	r2, r2, #6
 8000796:	17db      	asrs	r3, r3, #31
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	4a4c      	ldr	r2, [pc, #304]	@ (80008cc <fsm_automatic_run+0x288>)
 800079c:	6013      	str	r3, [r2, #0]
						greenCounter = greenDuration/1000;
 800079e:	4b45      	ldr	r3, [pc, #276]	@ (80008b4 <fsm_automatic_run+0x270>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a4e      	ldr	r2, [pc, #312]	@ (80008dc <fsm_automatic_run+0x298>)
 80007a4:	fb82 1203 	smull	r1, r2, r2, r3
 80007a8:	1192      	asrs	r2, r2, #6
 80007aa:	17db      	asrs	r3, r3, #31
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	4a49      	ldr	r2, [pc, #292]	@ (80008d4 <fsm_automatic_run+0x290>)
 80007b0:	6013      	str	r3, [r2, #0]

					}
					break;
 80007b2:	e071      	b.n	8000898 <fsm_automatic_run+0x254>
				case GREEN_RED:
					lcd_Clear(WHITE);
 80007b4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80007b8:	f000 fc58 	bl	800106c <lcd_Clear>
					lcdGreenRed();
 80007bc:	f000 fb0a 	bl	8000dd4 <lcdGreenRed>

					road1 = greenCounter;
 80007c0:	4b44      	ldr	r3, [pc, #272]	@ (80008d4 <fsm_automatic_run+0x290>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a42      	ldr	r2, [pc, #264]	@ (80008d0 <fsm_automatic_run+0x28c>)
 80007c6:	6013      	str	r3, [r2, #0]
					road2 = redCounter;
 80007c8:	4b40      	ldr	r3, [pc, #256]	@ (80008cc <fsm_automatic_run+0x288>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a42      	ldr	r2, [pc, #264]	@ (80008d8 <fsm_automatic_run+0x294>)
 80007ce:	6013      	str	r3, [r2, #0]
					updateLedBuffer(road1, road2);
 80007d0:	4b3f      	ldr	r3, [pc, #252]	@ (80008d0 <fsm_automatic_run+0x28c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a40      	ldr	r2, [pc, #256]	@ (80008d8 <fsm_automatic_run+0x294>)
 80007d6:	6812      	ldr	r2, [r2, #0]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fb2a 	bl	8000e34 <updateLedBuffer>
					redCounter--;
 80007e0:	4b3a      	ldr	r3, [pc, #232]	@ (80008cc <fsm_automatic_run+0x288>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	4a39      	ldr	r2, [pc, #228]	@ (80008cc <fsm_automatic_run+0x288>)
 80007e8:	6013      	str	r3, [r2, #0]
					greenCounter--;
 80007ea:	4b3a      	ldr	r3, [pc, #232]	@ (80008d4 <fsm_automatic_run+0x290>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	4a38      	ldr	r2, [pc, #224]	@ (80008d4 <fsm_automatic_run+0x290>)
 80007f2:	6013      	str	r3, [r2, #0]

					if (greenCounter <= 0)
 80007f4:	4b37      	ldr	r3, [pc, #220]	@ (80008d4 <fsm_automatic_run+0x290>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dc4f      	bgt.n	800089c <fsm_automatic_run+0x258>
					{
						status = AMBER_RED;
 80007fc:	4b32      	ldr	r3, [pc, #200]	@ (80008c8 <fsm_automatic_run+0x284>)
 80007fe:	2204      	movs	r2, #4
 8000800:	601a      	str	r2, [r3, #0]
						amberCounter = amberDuration/1000;
 8000802:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <fsm_automatic_run+0x278>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a35      	ldr	r2, [pc, #212]	@ (80008dc <fsm_automatic_run+0x298>)
 8000808:	fb82 1203 	smull	r1, r2, r2, r3
 800080c:	1192      	asrs	r2, r2, #6
 800080e:	17db      	asrs	r3, r3, #31
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	4a33      	ldr	r2, [pc, #204]	@ (80008e0 <fsm_automatic_run+0x29c>)
 8000814:	6013      	str	r3, [r2, #0]

					}
					break;
 8000816:	e041      	b.n	800089c <fsm_automatic_run+0x258>
				case AMBER_RED:
					lcd_Clear(WHITE);
 8000818:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800081c:	f000 fc26 	bl	800106c <lcd_Clear>
					lcdAmberRed();
 8000820:	f000 faf0 	bl	8000e04 <lcdAmberRed>


					road1 = amberCounter;
 8000824:	4b2e      	ldr	r3, [pc, #184]	@ (80008e0 <fsm_automatic_run+0x29c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a29      	ldr	r2, [pc, #164]	@ (80008d0 <fsm_automatic_run+0x28c>)
 800082a:	6013      	str	r3, [r2, #0]
					road2 = redCounter;
 800082c:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <fsm_automatic_run+0x288>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a29      	ldr	r2, [pc, #164]	@ (80008d8 <fsm_automatic_run+0x294>)
 8000832:	6013      	str	r3, [r2, #0]
					updateLedBuffer(road1, road2);
 8000834:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <fsm_automatic_run+0x28c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a27      	ldr	r2, [pc, #156]	@ (80008d8 <fsm_automatic_run+0x294>)
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f000 faf8 	bl	8000e34 <updateLedBuffer>
					redCounter--;
 8000844:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <fsm_automatic_run+0x288>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3b01      	subs	r3, #1
 800084a:	4a20      	ldr	r2, [pc, #128]	@ (80008cc <fsm_automatic_run+0x288>)
 800084c:	6013      	str	r3, [r2, #0]
					amberCounter--;
 800084e:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <fsm_automatic_run+0x29c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3b01      	subs	r3, #1
 8000854:	4a22      	ldr	r2, [pc, #136]	@ (80008e0 <fsm_automatic_run+0x29c>)
 8000856:	6013      	str	r3, [r2, #0]

					if (redCounter <= 0)
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <fsm_automatic_run+0x288>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	dc1f      	bgt.n	80008a0 <fsm_automatic_run+0x25c>
					{
						status = RED_GREEN;
 8000860:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <fsm_automatic_run+0x284>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]

						redCounter = redDuration/1000;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <fsm_automatic_run+0x268>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a1c      	ldr	r2, [pc, #112]	@ (80008dc <fsm_automatic_run+0x298>)
 800086c:	fb82 1203 	smull	r1, r2, r2, r3
 8000870:	1192      	asrs	r2, r2, #6
 8000872:	17db      	asrs	r3, r3, #31
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a15      	ldr	r2, [pc, #84]	@ (80008cc <fsm_automatic_run+0x288>)
 8000878:	6013      	str	r3, [r2, #0]
						greenCounter = greenDuration/1000;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <fsm_automatic_run+0x270>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a17      	ldr	r2, [pc, #92]	@ (80008dc <fsm_automatic_run+0x298>)
 8000880:	fb82 1203 	smull	r1, r2, r2, r3
 8000884:	1192      	asrs	r2, r2, #6
 8000886:	17db      	asrs	r3, r3, #31
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <fsm_automatic_run+0x290>)
 800088c:	6013      	str	r3, [r2, #0]

					}
					break;
 800088e:	e007      	b.n	80008a0 <fsm_automatic_run+0x25c>
				default:
					break;
 8000890:	bf00      	nop
 8000892:	e006      	b.n	80008a2 <fsm_automatic_run+0x25e>
					break;
 8000894:	bf00      	nop
 8000896:	e004      	b.n	80008a2 <fsm_automatic_run+0x25e>
					break;
 8000898:	bf00      	nop
 800089a:	e002      	b.n	80008a2 <fsm_automatic_run+0x25e>
					break;
 800089c:	bf00      	nop
 800089e:	e000      	b.n	80008a2 <fsm_automatic_run+0x25e>
					break;
 80008a0:	bf00      	nop
//			}
	}



}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000d4 	.word	0x200000d4
 80008ac:	20000000 	.word	0x20000000
 80008b0:	200000d8 	.word	0x200000d8
 80008b4:	20000004 	.word	0x20000004
 80008b8:	200000dc 	.word	0x200000dc
 80008bc:	20000008 	.word	0x20000008
 80008c0:	200000e0 	.word	0x200000e0
 80008c4:	200000f0 	.word	0x200000f0
 80008c8:	200000bc 	.word	0x200000bc
 80008cc:	200000c0 	.word	0x200000c0
 80008d0:	200000cc 	.word	0x200000cc
 80008d4:	200000c4 	.word	0x200000c4
 80008d8:	200000d0 	.word	0x200000d0
 80008dc:	10624dd3 	.word	0x10624dd3
 80008e0:	200000c8 	.word	0x200000c8

080008e4 <fsm_manual_run>:


#include "fsm_man.h"

void fsm_manual_run()
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	switch (status)
 80008e8:	4b3b      	ldr	r3, [pc, #236]	@ (80009d8 <fsm_manual_run+0xf4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3b0b      	subs	r3, #11
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d86e      	bhi.n	80009d0 <fsm_manual_run+0xec>
 80008f2:	a201      	add	r2, pc, #4	@ (adr r2, 80008f8 <fsm_manual_run+0x14>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	08000909 	.word	0x08000909
 80008fc:	0800094d 	.word	0x0800094d
 8000900:	0800092b 	.word	0x0800092b
 8000904:	0800096f 	.word	0x0800096f
	{
		case MAN_RED:
			blinkingLed(RED_LED);
 8000908:	2000      	movs	r0, #0
 800090a:	f000 fad7 	bl	8000ebc <blinkingLed>
			updateLedBuffer(mode, tempRed / 1000);
 800090e:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <fsm_manual_run+0xf8>)
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	4b33      	ldr	r3, [pc, #204]	@ (80009e0 <fsm_manual_run+0xfc>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a33      	ldr	r2, [pc, #204]	@ (80009e4 <fsm_manual_run+0x100>)
 8000918:	fb82 1203 	smull	r1, r2, r2, r3
 800091c:	1192      	asrs	r2, r2, #6
 800091e:	17db      	asrs	r3, r3, #31
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4619      	mov	r1, r3
 8000924:	f000 fa86 	bl	8000e34 <updateLedBuffer>
			break;
 8000928:	e053      	b.n	80009d2 <fsm_manual_run+0xee>
		case MAN_AMBER:
			blinkingLed(AMBER_LED);
 800092a:	2002      	movs	r0, #2
 800092c:	f000 fac6 	bl	8000ebc <blinkingLed>
			updateLedBuffer(mode, tempAmber / 1000);
 8000930:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <fsm_manual_run+0xf8>)
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	4b2c      	ldr	r3, [pc, #176]	@ (80009e8 <fsm_manual_run+0x104>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a2a      	ldr	r2, [pc, #168]	@ (80009e4 <fsm_manual_run+0x100>)
 800093a:	fb82 1203 	smull	r1, r2, r2, r3
 800093e:	1192      	asrs	r2, r2, #6
 8000940:	17db      	asrs	r3, r3, #31
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	4619      	mov	r1, r3
 8000946:	f000 fa75 	bl	8000e34 <updateLedBuffer>
			break;
 800094a:	e042      	b.n	80009d2 <fsm_manual_run+0xee>
		case MAN_GREEN:
			blinkingLed(GREEN_LED);
 800094c:	2001      	movs	r0, #1
 800094e:	f000 fab5 	bl	8000ebc <blinkingLed>
			updateLedBuffer(mode, tempGreen / 1000);
 8000952:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <fsm_manual_run+0xf8>)
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	4b25      	ldr	r3, [pc, #148]	@ (80009ec <fsm_manual_run+0x108>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a22      	ldr	r2, [pc, #136]	@ (80009e4 <fsm_manual_run+0x100>)
 800095c:	fb82 1203 	smull	r1, r2, r2, r3
 8000960:	1192      	asrs	r2, r2, #6
 8000962:	17db      	asrs	r3, r3, #31
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	4619      	mov	r1, r3
 8000968:	f000 fa64 	bl	8000e34 <updateLedBuffer>
			break;
 800096c:	e031      	b.n	80009d2 <fsm_manual_run+0xee>
		case ERROR:
			status = RED_GREEN;
 800096e:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <fsm_manual_run+0xf4>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
			redDuration = oldRed;
 8000974:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <fsm_manual_run+0x10c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1e      	ldr	r2, [pc, #120]	@ (80009f4 <fsm_manual_run+0x110>)
 800097a:	6013      	str	r3, [r2, #0]
			amberDuration = oldAmber;
 800097c:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <fsm_manual_run+0x114>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1e      	ldr	r2, [pc, #120]	@ (80009fc <fsm_manual_run+0x118>)
 8000982:	6013      	str	r3, [r2, #0]
			greenDuration = oldGreen;
 8000984:	4b1e      	ldr	r3, [pc, #120]	@ (8000a00 <fsm_manual_run+0x11c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1e      	ldr	r2, [pc, #120]	@ (8000a04 <fsm_manual_run+0x120>)
 800098a:	6013      	str	r3, [r2, #0]
			redCounter = redDuration /1000;
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <fsm_manual_run+0x110>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a14      	ldr	r2, [pc, #80]	@ (80009e4 <fsm_manual_run+0x100>)
 8000992:	fb82 1203 	smull	r1, r2, r2, r3
 8000996:	1192      	asrs	r2, r2, #6
 8000998:	17db      	asrs	r3, r3, #31
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a08 <fsm_manual_run+0x124>)
 800099e:	6013      	str	r3, [r2, #0]
			greenCounter = greenDuration /1000;
 80009a0:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <fsm_manual_run+0x120>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <fsm_manual_run+0x100>)
 80009a6:	fb82 1203 	smull	r1, r2, r2, r3
 80009aa:	1192      	asrs	r2, r2, #6
 80009ac:	17db      	asrs	r3, r3, #31
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <fsm_manual_run+0x128>)
 80009b2:	6013      	str	r3, [r2, #0]
			amberCounter = amberDuration /1000;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <fsm_manual_run+0x118>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <fsm_manual_run+0x100>)
 80009ba:	fb82 1203 	smull	r1, r2, r2, r3
 80009be:	1192      	asrs	r2, r2, #6
 80009c0:	17db      	asrs	r3, r3, #31
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <fsm_manual_run+0x12c>)
 80009c6:	6013      	str	r3, [r2, #0]
			mode = 1;
 80009c8:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <fsm_manual_run+0xf8>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
			break;
 80009ce:	e000      	b.n	80009d2 <fsm_manual_run+0xee>
		default:
			break;
 80009d0:	bf00      	nop
	}
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000bc 	.word	0x200000bc
 80009dc:	200000d4 	.word	0x200000d4
 80009e0:	200000d8 	.word	0x200000d8
 80009e4:	10624dd3 	.word	0x10624dd3
 80009e8:	200000e0 	.word	0x200000e0
 80009ec:	200000dc 	.word	0x200000dc
 80009f0:	200000e4 	.word	0x200000e4
 80009f4:	20000000 	.word	0x20000000
 80009f8:	200000e8 	.word	0x200000e8
 80009fc:	20000008 	.word	0x20000008
 8000a00:	200000ec 	.word	0x200000ec
 8000a04:	20000004 	.word	0x20000004
 8000a08:	200000c0 	.word	0x200000c0
 8000a0c:	200000c4 	.word	0x200000c4
 8000a10:	200000c8 	.word	0x200000c8

08000a14 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	@ 0x38
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	615a      	str	r2, [r3, #20]
 8000a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a40:	4b2f      	ldr	r3, [pc, #188]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a42:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000a46:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000a48:	4b2d      	ldr	r3, [pc, #180]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a4a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b04 <MX_FSMC_Init+0xf0>)
 8000a4c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000a5a:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a62:	2210      	movs	r2, #16
 8000a64:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000a72:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000a78:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000a7e:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a80:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a84:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000aaa:	230f      	movs	r3, #15
 8000aac:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000aae:	233c      	movs	r3, #60	@ 0x3c
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000ab6:	2310      	movs	r3, #16
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000aba:	2311      	movs	r3, #17
 8000abc:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000aca:	2309      	movs	r3, #9
 8000acc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000ad6:	2311      	movs	r3, #17
 8000ad8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000ade:	463a      	mov	r2, r7
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_FSMC_Init+0xec>)
 8000ae8:	f003 f8fe 	bl	8003ce8 <HAL_SRAM_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000af2:	f001 f8f9 	bl	8001ce8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000af6:	bf00      	nop
 8000af8:	3738      	adds	r7, #56	@ 0x38
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000068 	.word	0x20000068
 8000b04:	a0000104 	.word	0xa0000104

08000b08 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <HAL_FSMC_MspInit+0x88>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d131      	bne.n	8000b88 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <HAL_FSMC_MspInit+0x88>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <HAL_FSMC_MspInit+0x8c>)
 8000b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b32:	4a18      	ldr	r2, [pc, #96]	@ (8000b94 <HAL_FSMC_MspInit+0x8c>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <HAL_FSMC_MspInit+0x8c>)
 8000b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000b46:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000b4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000b58:	230c      	movs	r3, #12
 8000b5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <HAL_FSMC_MspInit+0x90>)
 8000b62:	f001 fcbb 	bl	80024dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000b66:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000b6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000b78:	230c      	movs	r3, #12
 8000b7a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <HAL_FSMC_MspInit+0x94>)
 8000b82:	f001 fcab 	bl	80024dc <HAL_GPIO_Init>
 8000b86:	e000      	b.n	8000b8a <HAL_FSMC_MspInit+0x82>
    return;
 8000b88:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000b8 	.word	0x200000b8
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40020c00 	.word	0x40020c00

08000ba0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000ba8:	f7ff ffae 	bl	8000b08 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	@ 0x30
 8000bb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	4b63      	ldr	r3, [pc, #396]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a62      	ldr	r2, [pc, #392]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b60      	ldr	r3, [pc, #384]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	4b5c      	ldr	r3, [pc, #368]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a5b      	ldr	r2, [pc, #364]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b59      	ldr	r3, [pc, #356]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b55      	ldr	r3, [pc, #340]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b52      	ldr	r3, [pc, #328]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b4e      	ldr	r3, [pc, #312]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a4d      	ldr	r2, [pc, #308]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b47      	ldr	r3, [pc, #284]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a46      	ldr	r2, [pc, #280]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b44      	ldr	r3, [pc, #272]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b40      	ldr	r3, [pc, #256]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b3d      	ldr	r3, [pc, #244]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b39      	ldr	r3, [pc, #228]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a38      	ldr	r2, [pc, #224]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b36      	ldr	r3, [pc, #216]	@ (8000d5c <MX_GPIO_Init+0x1a8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2170      	movs	r1, #112	@ 0x70
 8000c92:	4833      	ldr	r0, [pc, #204]	@ (8000d60 <MX_GPIO_Init+0x1ac>)
 8000c94:	f001 fdbe 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9e:	4831      	ldr	r0, [pc, #196]	@ (8000d64 <MX_GPIO_Init+0x1b0>)
 8000ca0:	f001 fdb8 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2140      	movs	r1, #64	@ 0x40
 8000ca8:	482f      	ldr	r0, [pc, #188]	@ (8000d68 <MX_GPIO_Init+0x1b4>)
 8000caa:	f001 fdb3 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb4:	482d      	ldr	r0, [pc, #180]	@ (8000d6c <MX_GPIO_Init+0x1b8>)
 8000cb6:	f001 fdad 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	482c      	ldr	r0, [pc, #176]	@ (8000d70 <MX_GPIO_Init+0x1bc>)
 8000cc0:	f001 fda8 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000cc4:	2370      	movs	r3, #112	@ 0x70
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4821      	ldr	r0, [pc, #132]	@ (8000d60 <MX_GPIO_Init+0x1ac>)
 8000cdc:	f001 fbfe 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481a      	ldr	r0, [pc, #104]	@ (8000d64 <MX_GPIO_Init+0x1b0>)
 8000cfa:	f001 fbef 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000cfe:	2340      	movs	r3, #64	@ 0x40
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4814      	ldr	r0, [pc, #80]	@ (8000d68 <MX_GPIO_Init+0x1b4>)
 8000d16:	f001 fbe1 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000d1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	480e      	ldr	r0, [pc, #56]	@ (8000d6c <MX_GPIO_Init+0x1b8>)
 8000d34:	f001 fbd2 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <MX_GPIO_Init+0x1bc>)
 8000d50:	f001 fbc4 	bl	80024dc <HAL_GPIO_Init>

}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	@ 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020c00 	.word	0x40020c00

08000d74 <lcdRedGreen>:
#include "graphic.h"
#include "led_7seg.h"



void lcdRedGreen(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 180, RED, 20, 1);
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2314      	movs	r3, #20
 8000d80:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000d84:	21b4      	movs	r1, #180	@ 0xb4
 8000d86:	2028      	movs	r0, #40	@ 0x28
 8000d88:	f000 fbc9 	bl	800151e <lcd_DrawCircle>
	lcd_DrawCircle(160, 50, GREEN, 20, 1);
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2314      	movs	r3, #20
 8000d92:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000d96:	2132      	movs	r1, #50	@ 0x32
 8000d98:	20a0      	movs	r0, #160	@ 0xa0
 8000d9a:	f000 fbc0 	bl	800151e <lcd_DrawCircle>
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <lcdRedAmber>:
void lcdRedAmber(){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 180, RED, 20, 1);
 8000daa:	2301      	movs	r3, #1
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2314      	movs	r3, #20
 8000db0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000db4:	21b4      	movs	r1, #180	@ 0xb4
 8000db6:	2028      	movs	r0, #40	@ 0x28
 8000db8:	f000 fbb1 	bl	800151e <lcd_DrawCircle>
	lcd_DrawCircle(120, 50, YELLOW, 20, 1);
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2314      	movs	r3, #20
 8000dc2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000dc6:	2132      	movs	r1, #50	@ 0x32
 8000dc8:	2078      	movs	r0, #120	@ 0x78
 8000dca:	f000 fba8 	bl	800151e <lcd_DrawCircle>
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <lcdGreenRed>:
void lcdGreenRed(){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 100, GREEN, 20, 1);
 8000dda:	2301      	movs	r3, #1
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2314      	movs	r3, #20
 8000de0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000de4:	2164      	movs	r1, #100	@ 0x64
 8000de6:	2028      	movs	r0, #40	@ 0x28
 8000de8:	f000 fb99 	bl	800151e <lcd_DrawCircle>
	lcd_DrawCircle(80, 50, RED, 20, 1);
 8000dec:	2301      	movs	r3, #1
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2314      	movs	r3, #20
 8000df2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000df6:	2132      	movs	r1, #50	@ 0x32
 8000df8:	2050      	movs	r0, #80	@ 0x50
 8000dfa:	f000 fb90 	bl	800151e <lcd_DrawCircle>
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <lcdAmberRed>:
void lcdAmberRed(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 140, YELLOW, 20, 1);
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2314      	movs	r3, #20
 8000e10:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000e14:	218c      	movs	r1, #140	@ 0x8c
 8000e16:	2028      	movs	r0, #40	@ 0x28
 8000e18:	f000 fb81 	bl	800151e <lcd_DrawCircle>
	lcd_DrawCircle(80, 50, RED, 20, 1);
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2314      	movs	r3, #20
 8000e22:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000e26:	2132      	movs	r1, #50	@ 0x32
 8000e28:	2050      	movs	r0, #80	@ 0x50
 8000e2a:	f000 fb78 	bl	800151e <lcd_DrawCircle>
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <updateLedBuffer>:

void updateLedBuffer(int value1, int value2)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
	led7_SetDigit(value1/10, 0, 0);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb8 <updateLedBuffer+0x84>)
 8000e42:	fb82 1203 	smull	r1, r2, r2, r3
 8000e46:	1092      	asrs	r2, r2, #2
 8000e48:	17db      	asrs	r3, r3, #31
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fc69 	bl	8001728 <led7_SetDigit>
	led7_SetDigit(value1%10, 1, 0);
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <updateLedBuffer+0x84>)
 8000e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e5e:	1099      	asrs	r1, r3, #2
 8000e60:	17d3      	asrs	r3, r2, #31
 8000e62:	1ac8      	subs	r0, r1, r3
 8000e64:	4603      	mov	r3, r0
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4403      	add	r3, r0
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	1ad0      	subs	r0, r2, r3
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2101      	movs	r1, #1
 8000e72:	f000 fc59 	bl	8001728 <led7_SetDigit>
	led7_SetDigit(value2/10, 2, 0);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb8 <updateLedBuffer+0x84>)
 8000e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7e:	1092      	asrs	r2, r2, #2
 8000e80:	17db      	asrs	r3, r3, #31
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2200      	movs	r2, #0
 8000e86:	2102      	movs	r1, #2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fc4d 	bl	8001728 <led7_SetDigit>
	led7_SetDigit(value2%10, 3, 0);
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <updateLedBuffer+0x84>)
 8000e92:	fb83 1302 	smull	r1, r3, r3, r2
 8000e96:	1099      	asrs	r1, r3, #2
 8000e98:	17d3      	asrs	r3, r2, #31
 8000e9a:	1ac8      	subs	r0, r1, r3
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4403      	add	r3, r0
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	1ad0      	subs	r0, r2, r3
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	f000 fc3d 	bl	8001728 <led7_SetDigit>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	66666667 	.word	0x66666667

08000ebc <blinkingLed>:

void blinkingLed(enum LED led){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	switch(led){
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d034      	beq.n	8000f36 <blinkingLed+0x7a>
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	dc49      	bgt.n	8000f64 <blinkingLed+0xa8>
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <blinkingLed+0x1e>
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d017      	beq.n	8000f08 <blinkingLed+0x4c>
		lcd_Clear(WHITE);
		lcd_DrawCircle(120, 50, YELLOW, 20, 1);
		lcd_DrawCircle(40, 140, YELLOW, 20, 1);
		break;
	default:
		break;
 8000ed8:	e044      	b.n	8000f64 <blinkingLed+0xa8>
		lcd_Clear(WHITE);
 8000eda:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ede:	f000 f8c5 	bl	800106c <lcd_Clear>
		lcd_DrawCircle(40, 180, RED, 20, 1);
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2314      	movs	r3, #20
 8000ee8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000eec:	21b4      	movs	r1, #180	@ 0xb4
 8000eee:	2028      	movs	r0, #40	@ 0x28
 8000ef0:	f000 fb15 	bl	800151e <lcd_DrawCircle>
		lcd_DrawCircle(80, 50, RED, 20, 1);
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2314      	movs	r3, #20
 8000efa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000efe:	2132      	movs	r1, #50	@ 0x32
 8000f00:	2050      	movs	r0, #80	@ 0x50
 8000f02:	f000 fb0c 	bl	800151e <lcd_DrawCircle>
		break;
 8000f06:	e02e      	b.n	8000f66 <blinkingLed+0xaa>
		lcd_Clear(WHITE);
 8000f08:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f0c:	f000 f8ae 	bl	800106c <lcd_Clear>
		lcd_DrawCircle(40, 100, GREEN, 20, 1);
 8000f10:	2301      	movs	r3, #1
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2314      	movs	r3, #20
 8000f16:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000f1a:	2164      	movs	r1, #100	@ 0x64
 8000f1c:	2028      	movs	r0, #40	@ 0x28
 8000f1e:	f000 fafe 	bl	800151e <lcd_DrawCircle>
		lcd_DrawCircle(160, 50, GREEN, 20, 1);
 8000f22:	2301      	movs	r3, #1
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2314      	movs	r3, #20
 8000f28:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000f2c:	2132      	movs	r1, #50	@ 0x32
 8000f2e:	20a0      	movs	r0, #160	@ 0xa0
 8000f30:	f000 faf5 	bl	800151e <lcd_DrawCircle>
		break;
 8000f34:	e017      	b.n	8000f66 <blinkingLed+0xaa>
		lcd_Clear(WHITE);
 8000f36:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f3a:	f000 f897 	bl	800106c <lcd_Clear>
		lcd_DrawCircle(120, 50, YELLOW, 20, 1);
 8000f3e:	2301      	movs	r3, #1
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2314      	movs	r3, #20
 8000f44:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000f48:	2132      	movs	r1, #50	@ 0x32
 8000f4a:	2078      	movs	r0, #120	@ 0x78
 8000f4c:	f000 fae7 	bl	800151e <lcd_DrawCircle>
		lcd_DrawCircle(40, 140, YELLOW, 20, 1);
 8000f50:	2301      	movs	r3, #1
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2314      	movs	r3, #20
 8000f56:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000f5a:	218c      	movs	r1, #140	@ 0x8c
 8000f5c:	2028      	movs	r0, #40	@ 0x28
 8000f5e:	f000 fade 	bl	800151e <lcd_DrawCircle>
		break;
 8000f62:	e000      	b.n	8000f66 <blinkingLed+0xaa>
		break;
 8000f64:	bf00      	nop
	}
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <LCD_WR_REG+0x1c>)
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	8013      	strh	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	600ffffe 	.word	0x600ffffe

08000f90 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <LCD_WR_DATA+0x1c>)
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	8053      	strh	r3, [r2, #2]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	600ffffe 	.word	0x600ffffe

08000fb0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <LCD_RD_DATA+0x20>)
 8000fb8:	885b      	ldrh	r3, [r3, #2]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	b29b      	uxth	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	600ffffe 	.word	0x600ffffe

08000fd4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	4608      	mov	r0, r1
 8000fde:	4611      	mov	r1, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	80fb      	strh	r3, [r7, #6]
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80bb      	strh	r3, [r7, #4]
 8000fea:	460b      	mov	r3, r1
 8000fec:	807b      	strh	r3, [r7, #2]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000ff2:	202a      	movs	r0, #42	@ 0x2a
 8000ff4:	f7ff ffbc 	bl	8000f70 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffc6 	bl	8000f90 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	b29b      	uxth	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ffc0 	bl	8000f90 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	b29b      	uxth	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffba 	bl	8000f90 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	b29b      	uxth	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ffb4 	bl	8000f90 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001028:	202b      	movs	r0, #43	@ 0x2b
 800102a:	f7ff ffa1 	bl	8000f70 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800102e:	88bb      	ldrh	r3, [r7, #4]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	b29b      	uxth	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ffab 	bl	8000f90 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800103a:	88bb      	ldrh	r3, [r7, #4]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	b29b      	uxth	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffa5 	bl	8000f90 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001046:	883b      	ldrh	r3, [r7, #0]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	b29b      	uxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff9f 	bl	8000f90 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001052:	883b      	ldrh	r3, [r7, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	b29b      	uxth	r3, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff99 	bl	8000f90 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800105e:	202c      	movs	r0, #44	@ 0x2c
 8001060:	f7ff ff86 	bl	8000f70 <LCD_WR_REG>
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}

0800106c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <lcd_Clear+0x60>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	3b01      	subs	r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <lcd_Clear+0x60>)
 8001080:	885b      	ldrh	r3, [r3, #2]
 8001082:	3b01      	subs	r3, #1
 8001084:	b29b      	uxth	r3, r3
 8001086:	2100      	movs	r1, #0
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff ffa3 	bl	8000fd4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800108e:	2300      	movs	r3, #0
 8001090:	81fb      	strh	r3, [r7, #14]
 8001092:	e011      	b.n	80010b8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001094:	2300      	movs	r3, #0
 8001096:	81bb      	strh	r3, [r7, #12]
 8001098:	e006      	b.n	80010a8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff77 	bl	8000f90 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80010a2:	89bb      	ldrh	r3, [r7, #12]
 80010a4:	3301      	adds	r3, #1
 80010a6:	81bb      	strh	r3, [r7, #12]
 80010a8:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <lcd_Clear+0x60>)
 80010aa:	885b      	ldrh	r3, [r3, #2]
 80010ac:	89ba      	ldrh	r2, [r7, #12]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3f3      	bcc.n	800109a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	3301      	adds	r3, #1
 80010b6:	81fb      	strh	r3, [r7, #14]
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <lcd_Clear+0x60>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	89fa      	ldrh	r2, [r7, #14]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3e8      	bcc.n	8001094 <lcd_Clear+0x28>
		}
	}
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000f4 	.word	0x200000f4

080010d0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	460b      	mov	r3, r1
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	88fa      	ldrh	r2, [r7, #6]
 80010e6:	88b9      	ldrh	r1, [r7, #4]
 80010e8:	88f8      	ldrh	r0, [r7, #6]
 80010ea:	f7ff ff73 	bl	8000fd4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff4d 	bl	8000f90 <LCD_WR_DATA>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <lcd_SetDir+0x44>)
 800111c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001120:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <lcd_SetDir+0x44>)
 8001124:	22f0      	movs	r2, #240	@ 0xf0
 8001126:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001128:	e006      	b.n	8001138 <lcd_SetDir+0x38>
		lcddev.width=240;
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <lcd_SetDir+0x44>)
 800112c:	22f0      	movs	r2, #240	@ 0xf0
 800112e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <lcd_SetDir+0x44>)
 8001132:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001136:	805a      	strh	r2, [r3, #2]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	200000f4 	.word	0x200000f4

08001148 <lcd_init>:


void lcd_init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001152:	48aa      	ldr	r0, [pc, #680]	@ (80013fc <lcd_init+0x2b4>)
 8001154:	f001 fb5e 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001158:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800115c:	f001 f888 	bl	8002270 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001166:	48a5      	ldr	r0, [pc, #660]	@ (80013fc <lcd_init+0x2b4>)
 8001168:	f001 fb54 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800116c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001170:	f001 f87e 	bl	8002270 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff ffc3 	bl	8001100 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800117a:	20d3      	movs	r0, #211	@ 0xd3
 800117c:	f7ff fef8 	bl	8000f70 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001180:	f7ff ff16 	bl	8000fb0 <LCD_RD_DATA>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b9d      	ldr	r3, [pc, #628]	@ (8001400 <lcd_init+0x2b8>)
 800118a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800118c:	f7ff ff10 	bl	8000fb0 <LCD_RD_DATA>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b9a      	ldr	r3, [pc, #616]	@ (8001400 <lcd_init+0x2b8>)
 8001196:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001198:	f7ff ff0a 	bl	8000fb0 <LCD_RD_DATA>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b97      	ldr	r3, [pc, #604]	@ (8001400 <lcd_init+0x2b8>)
 80011a2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80011a4:	4b96      	ldr	r3, [pc, #600]	@ (8001400 <lcd_init+0x2b8>)
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b94      	ldr	r3, [pc, #592]	@ (8001400 <lcd_init+0x2b8>)
 80011ae:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80011b0:	f7ff fefe 	bl	8000fb0 <LCD_RD_DATA>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b91      	ldr	r3, [pc, #580]	@ (8001400 <lcd_init+0x2b8>)
 80011ba:	889b      	ldrh	r3, [r3, #4]
 80011bc:	4313      	orrs	r3, r2
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001400 <lcd_init+0x2b8>)
 80011c2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80011c4:	20cf      	movs	r0, #207	@ 0xcf
 80011c6:	f7ff fed3 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fee0 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80011d0:	20c1      	movs	r0, #193	@ 0xc1
 80011d2:	f7ff fedd 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80011d6:	2030      	movs	r0, #48	@ 0x30
 80011d8:	f7ff feda 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80011dc:	20ed      	movs	r0, #237	@ 0xed
 80011de:	f7ff fec7 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80011e2:	2064      	movs	r0, #100	@ 0x64
 80011e4:	f7ff fed4 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f7ff fed1 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80011ee:	2012      	movs	r0, #18
 80011f0:	f7ff fece 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80011f4:	2081      	movs	r0, #129	@ 0x81
 80011f6:	f7ff fecb 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011fa:	20e8      	movs	r0, #232	@ 0xe8
 80011fc:	f7ff feb8 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001200:	2085      	movs	r0, #133	@ 0x85
 8001202:	f7ff fec5 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001206:	2010      	movs	r0, #16
 8001208:	f7ff fec2 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800120c:	207a      	movs	r0, #122	@ 0x7a
 800120e:	f7ff febf 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001212:	20cb      	movs	r0, #203	@ 0xcb
 8001214:	f7ff feac 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001218:	2039      	movs	r0, #57	@ 0x39
 800121a:	f7ff feb9 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800121e:	202c      	movs	r0, #44	@ 0x2c
 8001220:	f7ff feb6 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff feb3 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800122a:	2034      	movs	r0, #52	@ 0x34
 800122c:	f7ff feb0 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001230:	2002      	movs	r0, #2
 8001232:	f7ff fead 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001236:	20f7      	movs	r0, #247	@ 0xf7
 8001238:	f7ff fe9a 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800123c:	2020      	movs	r0, #32
 800123e:	f7ff fea7 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001242:	20ea      	movs	r0, #234	@ 0xea
 8001244:	f7ff fe94 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fea1 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff fe9e 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001254:	20c0      	movs	r0, #192	@ 0xc0
 8001256:	f7ff fe8b 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800125a:	201b      	movs	r0, #27
 800125c:	f7ff fe98 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001260:	20c1      	movs	r0, #193	@ 0xc1
 8001262:	f7ff fe85 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff fe92 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800126c:	20c5      	movs	r0, #197	@ 0xc5
 800126e:	f7ff fe7f 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001272:	2030      	movs	r0, #48	@ 0x30
 8001274:	f7ff fe8c 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001278:	2030      	movs	r0, #48	@ 0x30
 800127a:	f7ff fe89 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800127e:	20c7      	movs	r0, #199	@ 0xc7
 8001280:	f7ff fe76 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001284:	20b7      	movs	r0, #183	@ 0xb7
 8001286:	f7ff fe83 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800128a:	2036      	movs	r0, #54	@ 0x36
 800128c:	f7ff fe70 	bl	8000f70 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001290:	2008      	movs	r0, #8
 8001292:	f7ff fe7d 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001296:	203a      	movs	r0, #58	@ 0x3a
 8001298:	f7ff fe6a 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800129c:	2055      	movs	r0, #85	@ 0x55
 800129e:	f7ff fe77 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80012a2:	20b1      	movs	r0, #177	@ 0xb1
 80012a4:	f7ff fe64 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fe71 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80012ae:	201a      	movs	r0, #26
 80012b0:	f7ff fe6e 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80012b4:	20b6      	movs	r0, #182	@ 0xb6
 80012b6:	f7ff fe5b 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f7ff fe68 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80012c0:	20a2      	movs	r0, #162	@ 0xa2
 80012c2:	f7ff fe65 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80012c6:	20f2      	movs	r0, #242	@ 0xf2
 80012c8:	f7ff fe52 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff fe5f 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80012d2:	2026      	movs	r0, #38	@ 0x26
 80012d4:	f7ff fe4c 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff fe59 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80012de:	20e0      	movs	r0, #224	@ 0xe0
 80012e0:	f7ff fe46 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80012e4:	200f      	movs	r0, #15
 80012e6:	f7ff fe53 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80012ea:	202a      	movs	r0, #42	@ 0x2a
 80012ec:	f7ff fe50 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80012f0:	2028      	movs	r0, #40	@ 0x28
 80012f2:	f7ff fe4d 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012f6:	2008      	movs	r0, #8
 80012f8:	f7ff fe4a 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012fc:	200e      	movs	r0, #14
 80012fe:	f7ff fe47 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001302:	2008      	movs	r0, #8
 8001304:	f7ff fe44 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001308:	2054      	movs	r0, #84	@ 0x54
 800130a:	f7ff fe41 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800130e:	20a9      	movs	r0, #169	@ 0xa9
 8001310:	f7ff fe3e 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001314:	2043      	movs	r0, #67	@ 0x43
 8001316:	f7ff fe3b 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800131a:	200a      	movs	r0, #10
 800131c:	f7ff fe38 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001320:	200f      	movs	r0, #15
 8001322:	f7ff fe35 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fe32 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fe2f 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fe2c 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fe29 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800133e:	20e1      	movs	r0, #225	@ 0xe1
 8001340:	f7ff fe16 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fe23 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800134a:	2015      	movs	r0, #21
 800134c:	f7ff fe20 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001350:	2017      	movs	r0, #23
 8001352:	f7ff fe1d 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001356:	2007      	movs	r0, #7
 8001358:	f7ff fe1a 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800135c:	2011      	movs	r0, #17
 800135e:	f7ff fe17 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001362:	2006      	movs	r0, #6
 8001364:	f7ff fe14 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001368:	202b      	movs	r0, #43	@ 0x2b
 800136a:	f7ff fe11 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800136e:	2056      	movs	r0, #86	@ 0x56
 8001370:	f7ff fe0e 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001374:	203c      	movs	r0, #60	@ 0x3c
 8001376:	f7ff fe0b 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800137a:	2005      	movs	r0, #5
 800137c:	f7ff fe08 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001380:	2010      	movs	r0, #16
 8001382:	f7ff fe05 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001386:	200f      	movs	r0, #15
 8001388:	f7ff fe02 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800138c:	203f      	movs	r0, #63	@ 0x3f
 800138e:	f7ff fdff 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001392:	203f      	movs	r0, #63	@ 0x3f
 8001394:	f7ff fdfc 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff fdf9 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800139e:	202b      	movs	r0, #43	@ 0x2b
 80013a0:	f7ff fde6 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fdf3 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fdf0 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff fded 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80013b6:	203f      	movs	r0, #63	@ 0x3f
 80013b8:	f7ff fdea 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80013bc:	202a      	movs	r0, #42	@ 0x2a
 80013be:	f7ff fdd7 	bl	8000f70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fde4 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fde1 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fdde 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80013d4:	20ef      	movs	r0, #239	@ 0xef
 80013d6:	f7ff fddb 	bl	8000f90 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80013da:	2011      	movs	r0, #17
 80013dc:	f7ff fdc8 	bl	8000f70 <LCD_WR_REG>
	HAL_Delay(120);
 80013e0:	2078      	movs	r0, #120	@ 0x78
 80013e2:	f000 ff45 	bl	8002270 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80013e6:	2029      	movs	r0, #41	@ 0x29
 80013e8:	f7ff fdc2 	bl	8000f70 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80013ec:	2201      	movs	r2, #1
 80013ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f2:	4804      	ldr	r0, [pc, #16]	@ (8001404 <lcd_init+0x2bc>)
 80013f4:	f001 fa0e 	bl	8002814 <HAL_GPIO_WritePin>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40020800 	.word	0x40020800
 8001400:	200000f4 	.word	0x200000f4
 8001404:	40020000 	.word	0x40020000

08001408 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4413      	add	r3, r2
 8001420:	b298      	uxth	r0, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	b29a      	uxth	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b29b      	uxth	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b29b      	uxth	r3, r3
 800142e:	8b3a      	ldrh	r2, [r7, #24]
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fe4d 	bl	80010d0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	b29b      	uxth	r3, r3
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	b298      	uxth	r0, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	b29a      	uxth	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4413      	add	r3, r2
 800144c:	b29b      	uxth	r3, r3
 800144e:	8b3a      	ldrh	r2, [r7, #24]
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fe3d 	bl	80010d0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	b29a      	uxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4413      	add	r3, r2
 8001460:	b298      	uxth	r0, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	b29a      	uxth	r2, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b29b      	uxth	r3, r3
 800146e:	8b3a      	ldrh	r2, [r7, #24]
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fe2d 	bl	80010d0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	b29a      	uxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	b29b      	uxth	r3, r3
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	b298      	uxth	r0, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	b29a      	uxth	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b29b      	uxth	r3, r3
 800148e:	8b3a      	ldrh	r2, [r7, #24]
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fe1d 	bl	80010d0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	b29a      	uxth	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	b298      	uxth	r0, r3
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	8b3a      	ldrh	r2, [r7, #24]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fe0d 	bl	80010d0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	b298      	uxth	r0, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	8b3a      	ldrh	r2, [r7, #24]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fdfd 	bl	80010d0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4413      	add	r3, r2
 80014e0:	b298      	uxth	r0, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	8b3a      	ldrh	r2, [r7, #24]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fded 	bl	80010d0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	b298      	uxth	r0, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	b29a      	uxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	b29b      	uxth	r3, r3
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	b29b      	uxth	r3, r3
 800150e:	8b3a      	ldrh	r2, [r7, #24]
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fddd 	bl	80010d0 <lcd_DrawPoint>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b08a      	sub	sp, #40	@ 0x28
 8001522:	af02      	add	r7, sp, #8
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	f1c3 0303 	rsb	r3, r3, #3
 800153e:	613b      	str	r3, [r7, #16]


	if (fill)
 8001540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001542:	2b00      	cmp	r3, #0
 8001544:	d04f      	beq.n	80015e6 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001546:	e029      	b.n	800159c <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e00a      	b.n	8001564 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff ff55 	bl	8001408 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	429a      	cmp	r2, r3
 800156a:	ddf0      	ble.n	800154e <lcd_DrawCircle+0x30>

			if (d < 0) {
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	da06      	bge.n	8001580 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	009a      	lsls	r2, r3, #2
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4413      	add	r3, r2
 800157a:	3306      	adds	r3, #6
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	e00a      	b.n	8001596 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	009a      	lsls	r2, r3, #2
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4413      	add	r3, r2
 800158c:	330a      	adds	r3, #10
 800158e:	613b      	str	r3, [r7, #16]
				y--;
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	3b01      	subs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	ddd1      	ble.n	8001548 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80015a4:	e023      	b.n	80015ee <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7ff ff29 	bl	8001408 <_draw_circle_8>
			if (d < 0) {
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da06      	bge.n	80015ca <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	009a      	lsls	r2, r3, #2
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4413      	add	r3, r2
 80015c4:	3306      	adds	r3, #6
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	e00a      	b.n	80015e0 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	009a      	lsls	r2, r3, #2
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4413      	add	r3, r2
 80015d6:	330a      	adds	r3, #10
 80015d8:	613b      	str	r3, [r7, #16]
				y--;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	3b01      	subs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
			x++;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dddb      	ble.n	80015a6 <lcd_DrawCircle+0x88>
}
 80015ee:	bf00      	nop
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2140      	movs	r1, #64	@ 0x40
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <led7_init+0x14>)
 8001602:	f001 f907 	bl	8002814 <HAL_GPIO_WritePin>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021800 	.word	0x40021800

08001610 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001614:	4b3f      	ldr	r3, [pc, #252]	@ (8001714 <led7_Scan+0x104>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b3d      	ldr	r3, [pc, #244]	@ (8001714 <led7_Scan+0x104>)
 800161e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001620:	4b3d      	ldr	r3, [pc, #244]	@ (8001718 <led7_Scan+0x108>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b3d      	ldr	r3, [pc, #244]	@ (800171c <led7_Scan+0x10c>)
 8001628:	5c9b      	ldrb	r3, [r3, r2]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21a      	sxth	r2, r3
 800162e:	4b39      	ldr	r3, [pc, #228]	@ (8001714 <led7_Scan+0x104>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21b      	sxth	r3, r3
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b36      	ldr	r3, [pc, #216]	@ (8001714 <led7_Scan+0x104>)
 800163c:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800163e:	4b36      	ldr	r3, [pc, #216]	@ (8001718 <led7_Scan+0x108>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d846      	bhi.n	80016d4 <led7_Scan+0xc4>
 8001646:	a201      	add	r2, pc, #4	@ (adr r2, 800164c <led7_Scan+0x3c>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	0800165d 	.word	0x0800165d
 8001650:	0800167b 	.word	0x0800167b
 8001654:	08001699 	.word	0x08001699
 8001658:	080016b7 	.word	0x080016b7
	case 0:
		spi_buffer |= 0x00b0;
 800165c:	4b2d      	ldr	r3, [pc, #180]	@ (8001714 <led7_Scan+0x104>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b2b      	ldr	r3, [pc, #172]	@ (8001714 <led7_Scan+0x104>)
 8001668:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800166a:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <led7_Scan+0x104>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <led7_Scan+0x104>)
 8001676:	801a      	strh	r2, [r3, #0]
		break;
 8001678:	e02d      	b.n	80016d6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800167a:	4b26      	ldr	r3, [pc, #152]	@ (8001714 <led7_Scan+0x104>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b23      	ldr	r3, [pc, #140]	@ (8001714 <led7_Scan+0x104>)
 8001686:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <led7_Scan+0x104>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	f023 0320 	bic.w	r3, r3, #32
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <led7_Scan+0x104>)
 8001694:	801a      	strh	r2, [r3, #0]
		break;
 8001696:	e01e      	b.n	80016d6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001698:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <led7_Scan+0x104>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <led7_Scan+0x104>)
 80016a4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <led7_Scan+0x104>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	f023 0310 	bic.w	r3, r3, #16
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <led7_Scan+0x104>)
 80016b2:	801a      	strh	r2, [r3, #0]
		break;
 80016b4:	e00f      	b.n	80016d6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <led7_Scan+0x104>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80016be:	b29a      	uxth	r2, r3
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <led7_Scan+0x104>)
 80016c2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80016c4:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <led7_Scan+0x104>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <led7_Scan+0x104>)
 80016d0:	801a      	strh	r2, [r3, #0]
		break;
 80016d2:	e000      	b.n	80016d6 <led7_Scan+0xc6>
	default:
		break;
 80016d4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <led7_Scan+0x108>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	425a      	negs	r2, r3
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	bf58      	it	pl
 80016e8:	4253      	negpl	r3, r2
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <led7_Scan+0x108>)
 80016ee:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2140      	movs	r1, #64	@ 0x40
 80016f4:	480a      	ldr	r0, [pc, #40]	@ (8001720 <led7_Scan+0x110>)
 80016f6:	f001 f88d 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80016fa:	2301      	movs	r3, #1
 80016fc:	2202      	movs	r2, #2
 80016fe:	4905      	ldr	r1, [pc, #20]	@ (8001714 <led7_Scan+0x104>)
 8001700:	4808      	ldr	r0, [pc, #32]	@ (8001724 <led7_Scan+0x114>)
 8001702:	f001 fda8 	bl	8003256 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001706:	2201      	movs	r2, #1
 8001708:	2140      	movs	r1, #64	@ 0x40
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <led7_Scan+0x110>)
 800170c:	f001 f882 	bl	8002814 <HAL_GPIO_WritePin>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000001a 	.word	0x2000001a
 8001718:	200000fa 	.word	0x200000fa
 800171c:	2000000c 	.word	0x2000000c
 8001720:	40021800 	.word	0x40021800
 8001724:	20000110 	.word	0x20000110

08001728 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	4613      	mov	r3, r2
 8001734:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0e      	blt.n	800175a <led7_SetDigit+0x32>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b09      	cmp	r3, #9
 8001740:	dc0b      	bgt.n	800175a <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8001742:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <led7_SetDigit+0x40>)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b2d9      	uxtb	r1, r3
 8001750:	4a06      	ldr	r2, [pc, #24]	@ (800176c <led7_SetDigit+0x44>)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	460a      	mov	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
	}
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000010 	.word	0x20000010
 800176c:	2000000c 	.word	0x2000000c

08001770 <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d107      	bne.n	8001790 <led7_SetColon+0x20>
 8001780:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <led7_SetColon+0x3c>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	f023 0308 	bic.w	r3, r3, #8
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <led7_SetColon+0x3c>)
 800178c:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 800178e:	e006      	b.n	800179e <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <led7_SetColon+0x3c>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b04      	ldr	r3, [pc, #16]	@ (80017ac <led7_SetColon+0x3c>)
 800179c:	801a      	strh	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2000001a 	.word	0x2000001a

080017b0 <led_Off>:
  *            @arg 6
  *            @arg 7
  *            @arg 8
  * @retval None
  */
void led_Off(uint8_t index){
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d912      	bls.n	80017e6 <led_Off+0x36>
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d80f      	bhi.n	80017e6 <led_Off+0x36>
		spi_buffer &= ~(1 << (index-6));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	3b06      	subs	r3, #6
 80017ca:	2201      	movs	r2, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <led_Off+0x44>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	4013      	ands	r3, r2
 80017de:	b21b      	sxth	r3, r3
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <led_Off+0x44>)
 80017e4:	801a      	strh	r2, [r3, #0]
	}
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2000001a 	.word	0x2000001a

080017f8 <clearAllLed>:
/**
  * @brief  Tắt tất cả các LED trên mảng LED 7 đoạn và các LED khác liên quan
  * @param  None
  * @retval None
  */
void clearAllLed() {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
    // Đặt tất cả các giá trị trong mảng led7seg thành 0xFF (tắt tất cả các đoạn)
    for (int i = 0; i < 4; i++) {
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	e007      	b.n	8001814 <clearAllLed+0x1c>
        led7seg[i] = 0xFF; // 0xFF là trạng thái tắt cho LED 7 đoạn
 8001804:	4a19      	ldr	r2, [pc, #100]	@ (800186c <clearAllLed+0x74>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	22ff      	movs	r2, #255	@ 0xff
 800180c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3301      	adds	r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b03      	cmp	r3, #3
 8001818:	ddf4      	ble.n	8001804 <clearAllLed+0xc>
    }

    // Xóa bit colon (dấu hai chấm)
    led7_SetColon(0);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff ffa8 	bl	8001770 <led7_SetColon>

    // Tắt tất cả các LED góc trên bên phải
    for (int i = 6; i <= 8; i++) {
 8001820:	2306      	movs	r3, #6
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	e007      	b.n	8001836 <clearAllLed+0x3e>
        led_Off(i);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffc0 	bl	80017b0 <led_Off>
    for (int i = 6; i <= 8; i++) {
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b08      	cmp	r3, #8
 800183a:	ddf4      	ble.n	8001826 <clearAllLed+0x2e>
    }

    // Gửi lệnh cập nhật đến phần cứng
    spi_buffer = 0xFFFF; // Buffer mặc định tắt
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <clearAllLed+0x78>)
 800183e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001842:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2140      	movs	r1, #64	@ 0x40
 8001848:	480a      	ldr	r0, [pc, #40]	@ (8001874 <clearAllLed+0x7c>)
 800184a:	f000 ffe3 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (void *)&spi_buffer, 2, 1);
 800184e:	2301      	movs	r3, #1
 8001850:	2202      	movs	r2, #2
 8001852:	4907      	ldr	r1, [pc, #28]	@ (8001870 <clearAllLed+0x78>)
 8001854:	4808      	ldr	r0, [pc, #32]	@ (8001878 <clearAllLed+0x80>)
 8001856:	f001 fcfe 	bl	8003256 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800185a:	2201      	movs	r2, #1
 800185c:	2140      	movs	r1, #64	@ 0x40
 800185e:	4805      	ldr	r0, [pc, #20]	@ (8001874 <clearAllLed+0x7c>)
 8001860:	f000 ffd8 	bl	8002814 <HAL_GPIO_WritePin>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000000c 	.word	0x2000000c
 8001870:	2000001a 	.word	0x2000001a
 8001874:	40021800 	.word	0x40021800
 8001878:	20000110 	.word	0x20000110

0800187c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001880:	f000 fc84 	bl	800218c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001884:	f000 f82a 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001888:	f7ff f994 	bl	8000bb4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800188c:	f000 faf0 	bl	8001e70 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001890:	f000 fbe0 	bl	8002054 <MX_TIM2_Init>
  MX_FSMC_Init();
 8001894:	f7ff f8be 	bl	8000a14 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001898:	f000 f88a 	bl	80019b0 <system_init>
  led7_SetColon(1);
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff ff67 	bl	8001770 <led7_SetColon>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  fsm_automatic_run();
 80018a2:	f7fe fecf 	bl	8000644 <fsm_automatic_run>
//	  while(!flag_timer1);
//	  flag_timer1 = 0;
//	  fsm_automatic_run();


	  while(!flag_timer3);
 80018a6:	bf00      	nop
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <main+0x58>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0fb      	beq.n	80018a8 <main+0x2c>
	  flag_timer3 = 0;
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <main+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	801a      	strh	r2, [r3, #0]
	  counter++;
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <main+0x5c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <main+0x5c>)
 80018be:	6013      	str	r3, [r2, #0]
	  button_Scan();
 80018c0:	f7fe fe1c 	bl	80004fc <button_Scan>
	  keyInput();
 80018c4:	f000 f89c 	bl	8001a00 <keyInput>
	  fsm_manual_run();
 80018c8:	f7ff f80c 	bl	80008e4 <fsm_manual_run>
	  fsm_automatic_run();
 80018cc:	f7fe feba 	bl	8000644 <fsm_automatic_run>
	  while(!flag_timer3);
 80018d0:	e7e9      	b.n	80018a6 <main+0x2a>
 80018d2:	bf00      	nop
 80018d4:	20000108 	.word	0x20000108
 80018d8:	200000f0 	.word	0x200000f0

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b094      	sub	sp, #80	@ 0x50
 80018e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	2230      	movs	r2, #48	@ 0x30
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 ff92 	bl	8004814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <SystemClock_Config+0xcc>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	4a27      	ldr	r2, [pc, #156]	@ (80019a8 <SystemClock_Config+0xcc>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800190e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001910:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <SystemClock_Config+0xcc>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <SystemClock_Config+0xd0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a21      	ldr	r2, [pc, #132]	@ (80019ac <SystemClock_Config+0xd0>)
 8001926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <SystemClock_Config+0xd0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193c:	2301      	movs	r3, #1
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001940:	2310      	movs	r3, #16
 8001942:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001944:	2302      	movs	r3, #2
 8001946:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800194c:	2308      	movs	r3, #8
 800194e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001950:	23a8      	movs	r3, #168	@ 0xa8
 8001952:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001954:	2302      	movs	r3, #2
 8001956:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001958:	2304      	movs	r3, #4
 800195a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195c:	f107 0320 	add.w	r3, r7, #32
 8001960:	4618      	mov	r0, r3
 8001962:	f000 ff8b 	bl	800287c <HAL_RCC_OscConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800196c:	f000 f9bc 	bl	8001ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001970:	230f      	movs	r3, #15
 8001972:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800197c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001982:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2105      	movs	r1, #5
 800198e:	4618      	mov	r0, r3
 8001990:	f001 f9ec 	bl	8002d6c <HAL_RCC_ClockConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800199a:	f000 f9a5 	bl	8001ce8 <Error_Handler>
  }
}
 800199e:	bf00      	nop
 80019a0:	3750      	adds	r7, #80	@ 0x50
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000

080019b0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init (){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2120      	movs	r1, #32
 80019b8:	4810      	ldr	r0, [pc, #64]	@ (80019fc <system_init+0x4c>)
 80019ba:	f000 ff2b 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2140      	movs	r1, #64	@ 0x40
 80019c2:	480e      	ldr	r0, [pc, #56]	@ (80019fc <system_init+0x4c>)
 80019c4:	f000 ff26 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2110      	movs	r1, #16
 80019cc:	480b      	ldr	r0, [pc, #44]	@ (80019fc <system_init+0x4c>)
 80019ce:	f000 ff21 	bl	8002814 <HAL_GPIO_WritePin>
	timer_init();
 80019d2:	f000 f98f 	bl	8001cf4 <timer_init>
	led7_init();
 80019d6:	f7ff fe0f 	bl	80015f8 <led7_init>
	setTimer2(1000);
 80019da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019de:	f000 f9af 	bl	8001d40 <setTimer2>
	setTimer1(1000);
 80019e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e6:	f000 f98f 	bl	8001d08 <setTimer1>
	setTimer3(250);
 80019ea:	20fa      	movs	r0, #250	@ 0xfa
 80019ec:	f000 f9c4 	bl	8001d78 <setTimer3>
	button_init();
 80019f0:	f7fe fd62 	bl	80004b8 <button_init>
	lcd_init();
 80019f4:	f7ff fba8 	bl	8001148 <lcd_init>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000

08001a00 <keyInput>:
	led7_SetDigit(4, 2, 0);
	led7_SetDigit(7, 3, 0);
}

void keyInput()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	switch(status){
 8001a04:	4b87      	ldr	r3, [pc, #540]	@ (8001c24 <keyInput+0x224>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b0d      	cmp	r3, #13
 8001a0a:	f200 815f 	bhi.w	8001ccc <keyInput+0x2cc>
 8001a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a14 <keyInput+0x14>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001ae3 	.word	0x08001ae3
 8001a18:	08001a4d 	.word	0x08001a4d
 8001a1c:	08001a8f 	.word	0x08001a8f
 8001a20:	08001ab9 	.word	0x08001ab9
 8001a24:	08001ccd 	.word	0x08001ccd
 8001a28:	08001ccd 	.word	0x08001ccd
 8001a2c:	08001ccd 	.word	0x08001ccd
 8001a30:	08001ccd 	.word	0x08001ccd
 8001a34:	08001ccd 	.word	0x08001ccd
 8001a38:	08001ccd 	.word	0x08001ccd
 8001a3c:	08001ccd 	.word	0x08001ccd
 8001a40:	08001b0d 	.word	0x08001b0d
 8001a44:	08001bb9 	.word	0x08001bb9
 8001a48:	08001b63 	.word	0x08001b63
		case RED_GREEN:
			if(button_count[0] == 1)
 8001a4c:	4b76      	ldr	r3, [pc, #472]	@ (8001c28 <keyInput+0x228>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	f040 812e 	bne.w	8001cb2 <keyInput+0x2b2>
			{
				status = MAN_RED;
 8001a56:	4b73      	ldr	r3, [pc, #460]	@ (8001c24 <keyInput+0x224>)
 8001a58:	220b      	movs	r2, #11
 8001a5a:	601a      	str	r2, [r3, #0]
				tempRed = redDuration;
 8001a5c:	4b73      	ldr	r3, [pc, #460]	@ (8001c2c <keyInput+0x22c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a73      	ldr	r2, [pc, #460]	@ (8001c30 <keyInput+0x230>)
 8001a62:	6013      	str	r3, [r2, #0]
				tempGreen = greenDuration;
 8001a64:	4b73      	ldr	r3, [pc, #460]	@ (8001c34 <keyInput+0x234>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a73      	ldr	r2, [pc, #460]	@ (8001c38 <keyInput+0x238>)
 8001a6a:	6013      	str	r3, [r2, #0]
				tempAmber = amberDuration;
 8001a6c:	4b73      	ldr	r3, [pc, #460]	@ (8001c3c <keyInput+0x23c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a73      	ldr	r2, [pc, #460]	@ (8001c40 <keyInput+0x240>)
 8001a72:	6013      	str	r3, [r2, #0]
				oldRed = redDuration;
 8001a74:	4b6d      	ldr	r3, [pc, #436]	@ (8001c2c <keyInput+0x22c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a72      	ldr	r2, [pc, #456]	@ (8001c44 <keyInput+0x244>)
 8001a7a:	6013      	str	r3, [r2, #0]
				oldAmber = amberDuration;
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c3c <keyInput+0x23c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a71      	ldr	r2, [pc, #452]	@ (8001c48 <keyInput+0x248>)
 8001a82:	6013      	str	r3, [r2, #0]
				oldGreen = greenDuration;
 8001a84:	4b6b      	ldr	r3, [pc, #428]	@ (8001c34 <keyInput+0x234>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a70      	ldr	r2, [pc, #448]	@ (8001c4c <keyInput+0x24c>)
 8001a8a:	6013      	str	r3, [r2, #0]
			}
			break;
 8001a8c:	e111      	b.n	8001cb2 <keyInput+0x2b2>
		case RED_AMBER:
			if(button_count[0] == 1)
 8001a8e:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <keyInput+0x228>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	f040 810f 	bne.w	8001cb6 <keyInput+0x2b6>
			{
				status = MAN_RED;
 8001a98:	4b62      	ldr	r3, [pc, #392]	@ (8001c24 <keyInput+0x224>)
 8001a9a:	220b      	movs	r2, #11
 8001a9c:	601a      	str	r2, [r3, #0]
				tempRed = redDuration;
 8001a9e:	4b63      	ldr	r3, [pc, #396]	@ (8001c2c <keyInput+0x22c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a63      	ldr	r2, [pc, #396]	@ (8001c30 <keyInput+0x230>)
 8001aa4:	6013      	str	r3, [r2, #0]
				tempGreen = greenDuration;
 8001aa6:	4b63      	ldr	r3, [pc, #396]	@ (8001c34 <keyInput+0x234>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a63      	ldr	r2, [pc, #396]	@ (8001c38 <keyInput+0x238>)
 8001aac:	6013      	str	r3, [r2, #0]
				tempAmber = amberDuration;
 8001aae:	4b63      	ldr	r3, [pc, #396]	@ (8001c3c <keyInput+0x23c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a63      	ldr	r2, [pc, #396]	@ (8001c40 <keyInput+0x240>)
 8001ab4:	6013      	str	r3, [r2, #0]
			}
			break;
 8001ab6:	e0fe      	b.n	8001cb6 <keyInput+0x2b6>
		case GREEN_RED:
			if(button_count[0] == 1)
 8001ab8:	4b5b      	ldr	r3, [pc, #364]	@ (8001c28 <keyInput+0x228>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	f040 80fc 	bne.w	8001cba <keyInput+0x2ba>
			{
				status = MAN_RED;
 8001ac2:	4b58      	ldr	r3, [pc, #352]	@ (8001c24 <keyInput+0x224>)
 8001ac4:	220b      	movs	r2, #11
 8001ac6:	601a      	str	r2, [r3, #0]
				tempRed = redDuration;
 8001ac8:	4b58      	ldr	r3, [pc, #352]	@ (8001c2c <keyInput+0x22c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a58      	ldr	r2, [pc, #352]	@ (8001c30 <keyInput+0x230>)
 8001ace:	6013      	str	r3, [r2, #0]
				tempGreen = greenDuration;
 8001ad0:	4b58      	ldr	r3, [pc, #352]	@ (8001c34 <keyInput+0x234>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a58      	ldr	r2, [pc, #352]	@ (8001c38 <keyInput+0x238>)
 8001ad6:	6013      	str	r3, [r2, #0]
				tempAmber = amberDuration;
 8001ad8:	4b58      	ldr	r3, [pc, #352]	@ (8001c3c <keyInput+0x23c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a58      	ldr	r2, [pc, #352]	@ (8001c40 <keyInput+0x240>)
 8001ade:	6013      	str	r3, [r2, #0]
			}
			break;
 8001ae0:	e0eb      	b.n	8001cba <keyInput+0x2ba>
		case INIT:
			if(button_count[0] == 1)
 8001ae2:	4b51      	ldr	r3, [pc, #324]	@ (8001c28 <keyInput+0x228>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	f040 80e9 	bne.w	8001cbe <keyInput+0x2be>
			{
				status = MAN_RED;
 8001aec:	4b4d      	ldr	r3, [pc, #308]	@ (8001c24 <keyInput+0x224>)
 8001aee:	220b      	movs	r2, #11
 8001af0:	601a      	str	r2, [r3, #0]
				tempRed = redDuration;
 8001af2:	4b4e      	ldr	r3, [pc, #312]	@ (8001c2c <keyInput+0x22c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a4e      	ldr	r2, [pc, #312]	@ (8001c30 <keyInput+0x230>)
 8001af8:	6013      	str	r3, [r2, #0]
				tempGreen = greenDuration;
 8001afa:	4b4e      	ldr	r3, [pc, #312]	@ (8001c34 <keyInput+0x234>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a4e      	ldr	r2, [pc, #312]	@ (8001c38 <keyInput+0x238>)
 8001b00:	6013      	str	r3, [r2, #0]
				tempAmber = amberDuration;
 8001b02:	4b4e      	ldr	r3, [pc, #312]	@ (8001c3c <keyInput+0x23c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a4e      	ldr	r2, [pc, #312]	@ (8001c40 <keyInput+0x240>)
 8001b08:	6013      	str	r3, [r2, #0]
			}
			break;
 8001b0a:	e0d8      	b.n	8001cbe <keyInput+0x2be>
		case MAN_RED:

			if(button_count[0] == 1)
 8001b0c:	4b46      	ldr	r3, [pc, #280]	@ (8001c28 <keyInput+0x228>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <keyInput+0x120>
			{
//				if(button_count[2] != 1)
//				{
//					redDuration = tempRed;
//				}
				status = MAN_AMBER;
 8001b14:	4b43      	ldr	r3, [pc, #268]	@ (8001c24 <keyInput+0x224>)
 8001b16:	220d      	movs	r2, #13
 8001b18:	601a      	str	r2, [r3, #0]
				mode = 3;
 8001b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c50 <keyInput+0x250>)
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	601a      	str	r2, [r3, #0]
			}
			if(button_count[1] == 1 && mode == 2)
 8001b20:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <keyInput+0x228>)
 8001b22:	885b      	ldrh	r3, [r3, #2]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d112      	bne.n	8001b4e <keyInput+0x14e>
 8001b28:	4b49      	ldr	r3, [pc, #292]	@ (8001c50 <keyInput+0x250>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d10e      	bne.n	8001b4e <keyInput+0x14e>
			{
				tempRed += 1000;
 8001b30:	4b3f      	ldr	r3, [pc, #252]	@ (8001c30 <keyInput+0x230>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b38:	4a3d      	ldr	r2, [pc, #244]	@ (8001c30 <keyInput+0x230>)
 8001b3a:	6013      	str	r3, [r2, #0]
				if (tempRed > 99000)
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c30 <keyInput+0x230>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a44      	ldr	r2, [pc, #272]	@ (8001c54 <keyInput+0x254>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	dd03      	ble.n	8001b4e <keyInput+0x14e>
				{
					tempRed = 1000;
 8001b46:	4b3a      	ldr	r3, [pc, #232]	@ (8001c30 <keyInput+0x230>)
 8001b48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b4c:	601a      	str	r2, [r3, #0]
				}
			}
			if(button_count[2] == 1)
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <keyInput+0x228>)
 8001b50:	889b      	ldrh	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	f040 80b5 	bne.w	8001cc2 <keyInput+0x2c2>
			{
				redDuration = tempRed;
 8001b58:	4b35      	ldr	r3, [pc, #212]	@ (8001c30 <keyInput+0x230>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a33      	ldr	r2, [pc, #204]	@ (8001c2c <keyInput+0x22c>)
 8001b5e:	6013      	str	r3, [r2, #0]
			}
			break;
 8001b60:	e0af      	b.n	8001cc2 <keyInput+0x2c2>
		case MAN_AMBER:

			if (button_count[0] == 1)
 8001b62:	4b31      	ldr	r3, [pc, #196]	@ (8001c28 <keyInput+0x228>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d105      	bne.n	8001b76 <keyInput+0x176>
			{
//				if(button_count[2] != 1)
//				{
//					amberDuration = tempAmber;
//				}
				status = MAN_GREEN;
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c24 <keyInput+0x224>)
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	601a      	str	r2, [r3, #0]
				mode = 4;
 8001b70:	4b37      	ldr	r3, [pc, #220]	@ (8001c50 <keyInput+0x250>)
 8001b72:	2204      	movs	r2, #4
 8001b74:	601a      	str	r2, [r3, #0]
			}
			if (button_count[1] == 1  && mode == 3)
 8001b76:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <keyInput+0x228>)
 8001b78:	885b      	ldrh	r3, [r3, #2]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d112      	bne.n	8001ba4 <keyInput+0x1a4>
 8001b7e:	4b34      	ldr	r3, [pc, #208]	@ (8001c50 <keyInput+0x250>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d10e      	bne.n	8001ba4 <keyInput+0x1a4>
			{
				tempAmber += 1000;
 8001b86:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <keyInput+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c40 <keyInput+0x240>)
 8001b90:	6013      	str	r3, [r2, #0]
				if (tempAmber > 99000)
 8001b92:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <keyInput+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2f      	ldr	r2, [pc, #188]	@ (8001c54 <keyInput+0x254>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	dd03      	ble.n	8001ba4 <keyInput+0x1a4>
				{
					tempAmber = 1000;
 8001b9c:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <keyInput+0x240>)
 8001b9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ba2:	601a      	str	r2, [r3, #0]
				}
			}
			if(button_count[2] == 1)
 8001ba4:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <keyInput+0x228>)
 8001ba6:	889b      	ldrh	r3, [r3, #4]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	f040 808c 	bne.w	8001cc6 <keyInput+0x2c6>
			{
				amberDuration = tempAmber;
 8001bae:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <keyInput+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a22      	ldr	r2, [pc, #136]	@ (8001c3c <keyInput+0x23c>)
 8001bb4:	6013      	str	r3, [r2, #0]
			}
			break;
 8001bb6:	e086      	b.n	8001cc6 <keyInput+0x2c6>
		case MAN_GREEN:

			if (button_count[0] == 1)
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <keyInput+0x228>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d158      	bne.n	8001c72 <keyInput+0x272>
			{
//				if(button_count[2] != 1)
//				{
//					greenDuration = tempGreen;
//				}
				if (redDuration == (greenDuration + amberDuration))
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <keyInput+0x234>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <keyInput+0x23c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	441a      	add	r2, r3
 8001bca:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <keyInput+0x22c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d14c      	bne.n	8001c6c <keyInput+0x26c>
				{
					status = RED_GREEN;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <keyInput+0x224>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
					redCounter = redDuration / 1000;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <keyInput+0x22c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <keyInput+0x258>)
 8001bde:	fb82 1203 	smull	r1, r2, r2, r3
 8001be2:	1192      	asrs	r2, r2, #6
 8001be4:	17db      	asrs	r3, r3, #31
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c5c <keyInput+0x25c>)
 8001bea:	6013      	str	r3, [r2, #0]
					greenCounter = greenDuration / 1000;
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <keyInput+0x234>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <keyInput+0x258>)
 8001bf2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf6:	1192      	asrs	r2, r2, #6
 8001bf8:	17db      	asrs	r3, r3, #31
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4a18      	ldr	r2, [pc, #96]	@ (8001c60 <keyInput+0x260>)
 8001bfe:	6013      	str	r3, [r2, #0]
					amberCounter = amberDuration / 1000;
 8001c00:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <keyInput+0x23c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a14      	ldr	r2, [pc, #80]	@ (8001c58 <keyInput+0x258>)
 8001c06:	fb82 1203 	smull	r1, r2, r2, r3
 8001c0a:	1192      	asrs	r2, r2, #6
 8001c0c:	17db      	asrs	r3, r3, #31
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <keyInput+0x264>)
 8001c12:	6013      	str	r3, [r2, #0]
					mode = 1;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <keyInput+0x250>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	4812      	ldr	r0, [pc, #72]	@ (8001c68 <keyInput+0x268>)
 8001c1e:	f000 fe12 	bl	8002846 <HAL_GPIO_TogglePin>
 8001c22:	e026      	b.n	8001c72 <keyInput+0x272>
 8001c24:	200000bc 	.word	0x200000bc
 8001c28:	20000044 	.word	0x20000044
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	200000d8 	.word	0x200000d8
 8001c34:	20000004 	.word	0x20000004
 8001c38:	200000dc 	.word	0x200000dc
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	200000e0 	.word	0x200000e0
 8001c44:	200000e4 	.word	0x200000e4
 8001c48:	200000e8 	.word	0x200000e8
 8001c4c:	200000ec 	.word	0x200000ec
 8001c50:	200000d4 	.word	0x200000d4
 8001c54:	000182b8 	.word	0x000182b8
 8001c58:	10624dd3 	.word	0x10624dd3
 8001c5c:	200000c0 	.word	0x200000c0
 8001c60:	200000c4 	.word	0x200000c4
 8001c64:	200000c8 	.word	0x200000c8
 8001c68:	40021000 	.word	0x40021000
				}
				else
				{
					status = ERROR;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <keyInput+0x2d0>)
 8001c6e:	220e      	movs	r2, #14
 8001c70:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[1] == 1 && mode == 4)
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <keyInput+0x2d4>)
 8001c74:	885b      	ldrh	r3, [r3, #2]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d112      	bne.n	8001ca0 <keyInput+0x2a0>
 8001c7a:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <keyInput+0x2d8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d10e      	bne.n	8001ca0 <keyInput+0x2a0>
			{
				tempGreen += 1000;
 8001c82:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <keyInput+0x2dc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001c8a:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <keyInput+0x2dc>)
 8001c8c:	6013      	str	r3, [r2, #0]
				if (tempGreen > 99000)
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <keyInput+0x2dc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a13      	ldr	r2, [pc, #76]	@ (8001ce0 <keyInput+0x2e0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	dd03      	ble.n	8001ca0 <keyInput+0x2a0>
				{
					tempGreen = 1000;
 8001c98:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <keyInput+0x2dc>)
 8001c9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c9e:	601a      	str	r2, [r3, #0]
				}
			}
			if(button_count[2] == 1)
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <keyInput+0x2d4>)
 8001ca2:	889b      	ldrh	r3, [r3, #4]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d110      	bne.n	8001cca <keyInput+0x2ca>
			{
				greenDuration = tempGreen;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <keyInput+0x2dc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <keyInput+0x2e4>)
 8001cae:	6013      	str	r3, [r2, #0]
			}

			break;
 8001cb0:	e00b      	b.n	8001cca <keyInput+0x2ca>
			break;
 8001cb2:	bf00      	nop
 8001cb4:	e00a      	b.n	8001ccc <keyInput+0x2cc>
			break;
 8001cb6:	bf00      	nop
 8001cb8:	e008      	b.n	8001ccc <keyInput+0x2cc>
			break;
 8001cba:	bf00      	nop
 8001cbc:	e006      	b.n	8001ccc <keyInput+0x2cc>
			break;
 8001cbe:	bf00      	nop
 8001cc0:	e004      	b.n	8001ccc <keyInput+0x2cc>
			break;
 8001cc2:	bf00      	nop
 8001cc4:	e002      	b.n	8001ccc <keyInput+0x2cc>
			break;
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <keyInput+0x2cc>
			break;
 8001cca:	bf00      	nop
	}
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200000bc 	.word	0x200000bc
 8001cd4:	20000044 	.word	0x20000044
 8001cd8:	200000d4 	.word	0x200000d4
 8001cdc:	200000dc 	.word	0x200000dc
 8001ce0:	000182b8 	.word	0x000182b8
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cec:	b672      	cpsid	i
}
 8001cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <Error_Handler+0x8>

08001cf4 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <timer_init+0x10>)
 8001cfa:	f002 f88d 	bl	8003e18 <HAL_TIM_Base_Start_IT>
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000168 	.word	0x20000168

08001d08 <setTimer1>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer1(uint16_t duration){
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
	timer1_MUL = duration/TIMER_CYCLE;
 8001d12:	4a08      	ldr	r2, [pc, #32]	@ (8001d34 <setTimer1+0x2c>)
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	8013      	strh	r3, [r2, #0]
	timer1_counter = timer1_MUL;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <setTimer1+0x2c>)
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <setTimer1+0x30>)
 8001d1e:	801a      	strh	r2, [r3, #0]
	flag_timer1 = 0;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <setTimer1+0x34>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	801a      	strh	r2, [r3, #0]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000100 	.word	0x20000100
 8001d38:	200000fe 	.word	0x200000fe
 8001d3c:	200000fc 	.word	0x200000fc

08001d40 <setTimer2>:

void setTimer2(uint16_t duration){
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE;
 8001d4a:	4a08      	ldr	r2, [pc, #32]	@ (8001d6c <setTimer2+0x2c>)
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <setTimer2+0x2c>)
 8001d52:	881a      	ldrh	r2, [r3, #0]
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <setTimer2+0x30>)
 8001d56:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <setTimer2+0x34>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000106 	.word	0x20000106
 8001d70:	20000104 	.word	0x20000104
 8001d74:	20000102 	.word	0x20000102

08001d78 <setTimer3>:


void setTimer3(uint16_t duration){
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE;
 8001d82:	4a08      	ldr	r2, [pc, #32]	@ (8001da4 <setTimer3+0x2c>)
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <setTimer3+0x2c>)
 8001d8a:	881a      	ldrh	r2, [r3, #0]
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <setTimer3+0x30>)
 8001d8e:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <setTimer3+0x34>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	801a      	strh	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	2000010c 	.word	0x2000010c
 8001da8:	2000010a 	.word	0x2000010a
 8001dac:	20000108 	.word	0x20000108

08001db0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc0:	d140      	bne.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x94>
		if(timer1_counter > 0){
 8001dc2:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer1_counter--;
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001dd4:	801a      	strh	r2, [r3, #0]
			if(timer1_counter == 0) {
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer1 = 1;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	801a      	strh	r2, [r3, #0]
				timer1_counter = timer1_MUL;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001de6:	881a      	ldrh	r2, [r3, #0]
 8001de8:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001dea:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer2_counter > 0){
 8001dec:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d010      	beq.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x66>
			timer2_counter--;
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001dfe:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer2 = 1;
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e10:	881a      	ldrh	r2, [r3, #0]
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e14:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer3_counter > 0){
 8001e16:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer3_counter--;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e28:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer3 = 1;
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001e3a:	881a      	ldrh	r2, [r3, #0]
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e3e:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();		// 1ms interrupt here
 8001e40:	f7ff fbe6 	bl	8001610 <led7_Scan>
	}


}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200000fe 	.word	0x200000fe
 8001e50:	200000fc 	.word	0x200000fc
 8001e54:	20000100 	.word	0x20000100
 8001e58:	20000104 	.word	0x20000104
 8001e5c:	20000102 	.word	0x20000102
 8001e60:	20000106 	.word	0x20000106
 8001e64:	2000010a 	.word	0x2000010a
 8001e68:	20000108 	.word	0x20000108
 8001e6c:	2000010c 	.word	0x2000010c

08001e70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e74:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001e76:	4a18      	ldr	r2, [pc, #96]	@ (8001ed8 <MX_SPI1_Init+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001e7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e82:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb4:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001ebc:	220a      	movs	r2, #10
 8001ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ec0:	4804      	ldr	r0, [pc, #16]	@ (8001ed4 <MX_SPI1_Init+0x64>)
 8001ec2:	f001 f93f 	bl	8003144 <HAL_SPI_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ecc:	f7ff ff0c 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000110 	.word	0x20000110
 8001ed8:	40013000 	.word	0x40013000

08001edc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	@ (8001f60 <HAL_SPI_MspInit+0x84>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d12b      	bne.n	8001f56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	4a17      	ldr	r2, [pc, #92]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a10      	ldr	r2, [pc, #64]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f36:	2338      	movs	r3, #56	@ 0x38
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f46:	2305      	movs	r3, #5
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <HAL_SPI_MspInit+0x8c>)
 8001f52:	f000 fac3 	bl	80024dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f56:	bf00      	nop
 8001f58:	3728      	adds	r7, #40	@ 0x28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40013000 	.word	0x40013000
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020400 	.word	0x40020400

08001f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f82:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4a08      	ldr	r2, [pc, #32]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002012:	f000 f90d 	bl	8002230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <TIM2_IRQHandler+0x10>)
 8002022:	f001 ff69 	bl	8003ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000168 	.word	0x20000168

08002030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <SystemInit+0x20>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203a:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <SystemInit+0x20>)
 800203c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002040:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002070:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <MX_TIM2_Init+0x94>)
 800207a:	f240 3247 	movw	r2, #839	@ 0x347
 800207e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002086:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002088:	2263      	movs	r2, #99	@ 0x63
 800208a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <MX_TIM2_Init+0x94>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002098:	4813      	ldr	r0, [pc, #76]	@ (80020e8 <MX_TIM2_Init+0x94>)
 800209a:	f001 fe6d 	bl	8003d78 <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020a4:	f7ff fe20 	bl	8001ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	@ (80020e8 <MX_TIM2_Init+0x94>)
 80020b6:	f002 f80f 	bl	80040d8 <HAL_TIM_ConfigClockSource>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020c0:	f7ff fe12 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020cc:	463b      	mov	r3, r7
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	@ (80020e8 <MX_TIM2_Init+0x94>)
 80020d2:	f002 fa37 	bl	8004544 <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020dc:	f7ff fe04 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000168 	.word	0x20000168

080020ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fc:	d115      	bne.n	800212a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <HAL_TIM_Base_MspInit+0x48>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HAL_TIM_Base_MspInit+0x48>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <HAL_TIM_Base_MspInit+0x48>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	201c      	movs	r0, #28
 8002120:	f000 f9a5 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002124:	201c      	movs	r0, #28
 8002126:	f000 f9be 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002170 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800213c:	f7ff ff78 	bl	8002030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002140:	480c      	ldr	r0, [pc, #48]	@ (8002174 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002142:	490d      	ldr	r1, [pc, #52]	@ (8002178 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002144:	4a0d      	ldr	r2, [pc, #52]	@ (800217c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002148:	e002      	b.n	8002150 <LoopCopyDataInit>

0800214a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800214c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214e:	3304      	adds	r3, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002154:	d3f9      	bcc.n	800214a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002158:	4c0a      	ldr	r4, [pc, #40]	@ (8002184 <LoopFillZerobss+0x22>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800215c:	e001      	b.n	8002162 <LoopFillZerobss>

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002160:	3204      	adds	r2, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002166:	f002 fb5d 	bl	8004824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216a:	f7ff fb87 	bl	800187c <main>
  bx  lr    
 800216e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002170:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800217c:	080048a4 	.word	0x080048a4
  ldr r2, =_sbss
 8002180:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002184:	200001b4 	.word	0x200001b4

08002188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC_IRQHandler>
	...

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002190:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0d      	ldr	r2, [pc, #52]	@ (80021cc <HAL_Init+0x40>)
 8002196:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800219a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <HAL_Init+0x40>)
 80021a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a07      	ldr	r2, [pc, #28]	@ (80021cc <HAL_Init+0x40>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 f94f 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ba:	200f      	movs	r0, #15
 80021bc:	f000 f808 	bl	80021d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c0:	f7ff fed4 	bl	8001f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00

080021d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d8:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_InitTick+0x54>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_InitTick+0x58>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f967 	bl	80024c2 <HAL_SYSTICK_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00e      	b.n	800221c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d80a      	bhi.n	800221a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002204:	2200      	movs	r2, #0
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f000 f92f 	bl	800246e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002210:	4a06      	ldr	r2, [pc, #24]	@ (800222c <HAL_InitTick+0x5c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	2000001c 	.word	0x2000001c
 8002228:	20000024 	.word	0x20000024
 800222c:	20000020 	.word	0x20000020

08002230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002234:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_IncTick+0x20>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_IncTick+0x24>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4413      	add	r3, r2
 8002240:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <HAL_IncTick+0x24>)
 8002242:	6013      	str	r3, [r2, #0]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000024 	.word	0x20000024
 8002254:	200001b0 	.word	0x200001b0

08002258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b03      	ldr	r3, [pc, #12]	@ (800226c <HAL_GetTick+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	200001b0 	.word	0x200001b0

08002270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff ffee 	bl	8002258 <HAL_GetTick>
 800227c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d005      	beq.n	8002296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228a:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <HAL_Delay+0x44>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002296:	bf00      	nop
 8002298:	f7ff ffde 	bl	8002258 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d8f7      	bhi.n	8002298 <HAL_Delay+0x28>
  {
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000024 	.word	0x20000024

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4907      	ldr	r1, [pc, #28]	@ (8002354 <__NVIC_EnableIRQ+0x38>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	@ (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	@ 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002424:	d301      	bcc.n	800242a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <SysTick_Config+0x40>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002432:	210f      	movs	r1, #15
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f7ff ff8e 	bl	8002358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <SysTick_Config+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <SysTick_Config+0x40>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff29 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002480:	f7ff ff3e 	bl	8002300 <__NVIC_GetPriorityGrouping>
 8002484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff8e 	bl	80023ac <NVIC_EncodePriority>
 8002490:	4602      	mov	r2, r0
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff5d 	bl	8002358 <__NVIC_SetPriority>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff31 	bl	800231c <__NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffa2 	bl	8002414 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	@ 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e16b      	b.n	80027d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 815a 	bne.w	80027ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d005      	beq.n	800252e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	2b02      	cmp	r3, #2
 800252c:	d130      	bne.n	8002590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002564:	2201      	movs	r2, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 0201 	and.w	r2, r3, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b03      	cmp	r3, #3
 800259a:	d017      	beq.n	80025cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d123      	bne.n	8002620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80b4 	beq.w	80027ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b60      	ldr	r3, [pc, #384]	@ (80027e8 <HAL_GPIO_Init+0x30c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	4a5f      	ldr	r2, [pc, #380]	@ (80027e8 <HAL_GPIO_Init+0x30c>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002670:	6453      	str	r3, [r2, #68]	@ 0x44
 8002672:	4b5d      	ldr	r3, [pc, #372]	@ (80027e8 <HAL_GPIO_Init+0x30c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800267e:	4a5b      	ldr	r2, [pc, #364]	@ (80027ec <HAL_GPIO_Init+0x310>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a52      	ldr	r2, [pc, #328]	@ (80027f0 <HAL_GPIO_Init+0x314>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d02b      	beq.n	8002702 <HAL_GPIO_Init+0x226>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a51      	ldr	r2, [pc, #324]	@ (80027f4 <HAL_GPIO_Init+0x318>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d025      	beq.n	80026fe <HAL_GPIO_Init+0x222>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a50      	ldr	r2, [pc, #320]	@ (80027f8 <HAL_GPIO_Init+0x31c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01f      	beq.n	80026fa <HAL_GPIO_Init+0x21e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4f      	ldr	r2, [pc, #316]	@ (80027fc <HAL_GPIO_Init+0x320>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d019      	beq.n	80026f6 <HAL_GPIO_Init+0x21a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002800 <HAL_GPIO_Init+0x324>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0x216>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002804 <HAL_GPIO_Init+0x328>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00d      	beq.n	80026ee <HAL_GPIO_Init+0x212>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002808 <HAL_GPIO_Init+0x32c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <HAL_GPIO_Init+0x20e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4b      	ldr	r2, [pc, #300]	@ (800280c <HAL_GPIO_Init+0x330>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_GPIO_Init+0x20a>
 80026e2:	2307      	movs	r3, #7
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026e6:	2308      	movs	r3, #8
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x228>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	@ (80027ec <HAL_GPIO_Init+0x310>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3b      	ldr	r3, [pc, #236]	@ (8002810 <HAL_GPIO_Init+0x334>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a32      	ldr	r2, [pc, #200]	@ (8002810 <HAL_GPIO_Init+0x334>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b30      	ldr	r3, [pc, #192]	@ (8002810 <HAL_GPIO_Init+0x334>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a27      	ldr	r2, [pc, #156]	@ (8002810 <HAL_GPIO_Init+0x334>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b26      	ldr	r3, [pc, #152]	@ (8002810 <HAL_GPIO_Init+0x334>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <HAL_GPIO_Init+0x334>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_GPIO_Init+0x334>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a12      	ldr	r2, [pc, #72]	@ (8002810 <HAL_GPIO_Init+0x334>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae90 	bls.w	80024f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	@ 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002858:	887a      	ldrh	r2, [r7, #2]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4013      	ands	r3, r2
 800285e:	041a      	lsls	r2, r3, #16
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43d9      	mvns	r1, r3
 8002864:	887b      	ldrh	r3, [r7, #2]
 8002866:	400b      	ands	r3, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e267      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d075      	beq.n	8002986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800289a:	4b88      	ldr	r3, [pc, #544]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d00c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a6:	4b85      	ldr	r3, [pc, #532]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d112      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b2:	4b82      	ldr	r3, [pc, #520]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028be:	d10b      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	4b7e      	ldr	r3, [pc, #504]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05b      	beq.n	8002984 <HAL_RCC_OscConfig+0x108>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d157      	bne.n	8002984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e242      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e0:	d106      	bne.n	80028f0 <HAL_RCC_OscConfig+0x74>
 80028e2:	4b76      	ldr	r3, [pc, #472]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a75      	ldr	r2, [pc, #468]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xb0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x98>
 80028fa:	4b70      	ldr	r3, [pc, #448]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a6f      	ldr	r2, [pc, #444]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b6d      	ldr	r3, [pc, #436]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6c      	ldr	r2, [pc, #432]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xb0>
 8002914:	4b69      	ldr	r3, [pc, #420]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a68      	ldr	r2, [pc, #416]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b66      	ldr	r3, [pc, #408]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a65      	ldr	r2, [pc, #404]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7ff fc90 	bl	8002258 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800293c:	f7ff fc8c 	bl	8002258 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	@ 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e207      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b5b      	ldr	r3, [pc, #364]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xc0>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff fc7c 	bl	8002258 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002964:	f7ff fc78 	bl	8002258 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	@ 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1f3      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	4b51      	ldr	r3, [pc, #324]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0xe8>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d063      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002992:	4b4a      	ldr	r3, [pc, #296]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299e:	4b47      	ldr	r3, [pc, #284]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d11c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029aa:	4b44      	ldr	r3, [pc, #272]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	4b41      	ldr	r3, [pc, #260]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_RCC_OscConfig+0x152>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e1c7      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ce:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4937      	ldr	r1, [pc, #220]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	e03a      	b.n	8002a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ec:	4b34      	ldr	r3, [pc, #208]	@ (8002ac0 <HAL_RCC_OscConfig+0x244>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7ff fc31 	bl	8002258 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fa:	f7ff fc2d 	bl	8002258 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e1a8      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b28      	ldr	r3, [pc, #160]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4925      	ldr	r1, [pc, #148]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2e:	4b24      	ldr	r3, [pc, #144]	@ (8002ac0 <HAL_RCC_OscConfig+0x244>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff fc10 	bl	8002258 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7ff fc0c 	bl	8002258 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e187      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d036      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <HAL_RCC_OscConfig+0x248>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7ff fbf0 	bl	8002258 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7ff fbec 	bl	8002258 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e167      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x200>
 8002a9a:	e01b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <HAL_RCC_OscConfig+0x248>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7ff fbd9 	bl	8002258 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	e00e      	b.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7ff fbd5 	bl	8002258 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d907      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e150      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	42470000 	.word	0x42470000
 8002ac4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac8:	4b88      	ldr	r3, [pc, #544]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ea      	bne.n	8002aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8097 	beq.w	8002c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae6:	4b81      	ldr	r3, [pc, #516]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	4b7d      	ldr	r3, [pc, #500]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	4a7c      	ldr	r2, [pc, #496]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b02:	4b7a      	ldr	r3, [pc, #488]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	4b77      	ldr	r3, [pc, #476]	@ (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d118      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1e:	4b74      	ldr	r3, [pc, #464]	@ (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a73      	ldr	r2, [pc, #460]	@ (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2a:	f7ff fb95 	bl	8002258 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b32:	f7ff fb91 	bl	8002258 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e10c      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x2ea>
 8002b58:	4b64      	ldr	r3, [pc, #400]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5c:	4a63      	ldr	r2, [pc, #396]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b64:	e01c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x324>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x30c>
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	4a5e      	ldr	r2, [pc, #376]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0x324>
 8002b88:	4b58      	ldr	r3, [pc, #352]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8c:	4a57      	ldr	r2, [pc, #348]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b94:	4b55      	ldr	r3, [pc, #340]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b98:	4a54      	ldr	r2, [pc, #336]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7ff fb56 	bl	8002258 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb0:	f7ff fb52 	bl	8002258 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0cb      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	4b49      	ldr	r3, [pc, #292]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0ee      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x334>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd4:	f7ff fb40 	bl	8002258 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7ff fb3c 	bl	8002258 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0b5      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1ee      	bne.n	8002bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c04:	4b39      	ldr	r3, [pc, #228]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	4a38      	ldr	r2, [pc, #224]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a1 	beq.w	8002d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c1a:	4b34      	ldr	r3, [pc, #208]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d05c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d141      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff fb10 	bl	8002258 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7ff fb0c 	bl	8002258 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e087      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b27      	ldr	r3, [pc, #156]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	491b      	ldr	r1, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c84:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7ff fae5 	bl	8002258 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7ff fae1 	bl	8002258 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e05c      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca4:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x416>
 8002cb0:	e054      	b.n	8002d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff face 	bl	8002258 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7ff faca 	bl	8002258 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e045      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x444>
 8002cde:	e03d      	b.n	8002d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e038      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_RCC_OscConfig+0x4ec>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d028      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d121      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d11a      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d111      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	3b01      	subs	r3, #1
 8002d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800

08002d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0cc      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b68      	ldr	r3, [pc, #416]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d90c      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b65      	ldr	r3, [pc, #404]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b63      	ldr	r3, [pc, #396]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0b8      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc0:	4b59      	ldr	r3, [pc, #356]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a58      	ldr	r2, [pc, #352]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd8:	4b53      	ldr	r3, [pc, #332]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a52      	ldr	r2, [pc, #328]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b50      	ldr	r3, [pc, #320]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	494d      	ldr	r1, [pc, #308]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d044      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b47      	ldr	r3, [pc, #284]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d119      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e07f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e06f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e067      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4a:	4b37      	ldr	r3, [pc, #220]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4934      	ldr	r1, [pc, #208]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e5c:	f7ff f9fc 	bl	8002258 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e64:	f7ff f9f8 	bl	8002258 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e04f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 020c 	and.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1eb      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d20c      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b20      	ldr	r3, [pc, #128]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e032      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4916      	ldr	r1, [pc, #88]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ede:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	490e      	ldr	r1, [pc, #56]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ef2:	f000 f821 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	490a      	ldr	r1, [pc, #40]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
 8002f06:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0a:	4a09      	ldr	r2, [pc, #36]	@ (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f0e:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff f95c 	bl	80021d0 <HAL_InitTick>

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023c00 	.word	0x40023c00
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	08004884 	.word	0x08004884
 8002f30:	2000001c 	.word	0x2000001c
 8002f34:	20000020 	.word	0x20000020

08002f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f3c:	b094      	sub	sp, #80	@ 0x50
 8002f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f50:	4b79      	ldr	r3, [pc, #484]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d00d      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x40>
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	f200 80e1 	bhi.w	8003124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x34>
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f6a:	e0db      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b73      	ldr	r3, [pc, #460]	@ (800313c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f70:	e0db      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f72:	4b73      	ldr	r3, [pc, #460]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f76:	e0d8      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f78:	4b6f      	ldr	r3, [pc, #444]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f82:	4b6d      	ldr	r3, [pc, #436]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d063      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	2200      	movs	r2, #0
 8002f96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002faa:	4622      	mov	r2, r4
 8002fac:	462b      	mov	r3, r5
 8002fae:	f04f 0000 	mov.w	r0, #0
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	0159      	lsls	r1, r3, #5
 8002fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fbc:	0150      	lsls	r0, r2, #5
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	1a51      	subs	r1, r2, r1
 8002fc6:	6139      	str	r1, [r7, #16]
 8002fc8:	4629      	mov	r1, r5
 8002fca:	eb63 0301 	sbc.w	r3, r3, r1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fdc:	4659      	mov	r1, fp
 8002fde:	018b      	lsls	r3, r1, #6
 8002fe0:	4651      	mov	r1, sl
 8002fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	018a      	lsls	r2, r1, #6
 8002fea:	4651      	mov	r1, sl
 8002fec:	ebb2 0801 	subs.w	r8, r2, r1
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800300a:	4690      	mov	r8, r2
 800300c:	4699      	mov	r9, r3
 800300e:	4623      	mov	r3, r4
 8003010:	eb18 0303 	adds.w	r3, r8, r3
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	462b      	mov	r3, r5
 8003018:	eb49 0303 	adc.w	r3, r9, r3
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800302a:	4629      	mov	r1, r5
 800302c:	024b      	lsls	r3, r1, #9
 800302e:	4621      	mov	r1, r4
 8003030:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003034:	4621      	mov	r1, r4
 8003036:	024a      	lsls	r2, r1, #9
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800303e:	2200      	movs	r2, #0
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003048:	f7fd f8be 	bl	80001c8 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4613      	mov	r3, r2
 8003052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003054:	e058      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003056:	4b38      	ldr	r3, [pc, #224]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	2200      	movs	r2, #0
 800305e:	4618      	mov	r0, r3
 8003060:	4611      	mov	r1, r2
 8003062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
 800306c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003070:	4642      	mov	r2, r8
 8003072:	464b      	mov	r3, r9
 8003074:	f04f 0000 	mov.w	r0, #0
 8003078:	f04f 0100 	mov.w	r1, #0
 800307c:	0159      	lsls	r1, r3, #5
 800307e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003082:	0150      	lsls	r0, r2, #5
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4641      	mov	r1, r8
 800308a:	ebb2 0a01 	subs.w	sl, r2, r1
 800308e:	4649      	mov	r1, r9
 8003090:	eb63 0b01 	sbc.w	fp, r3, r1
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a8:	ebb2 040a 	subs.w	r4, r2, sl
 80030ac:	eb63 050b 	sbc.w	r5, r3, fp
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	00eb      	lsls	r3, r5, #3
 80030ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030be:	00e2      	lsls	r2, r4, #3
 80030c0:	4614      	mov	r4, r2
 80030c2:	461d      	mov	r5, r3
 80030c4:	4643      	mov	r3, r8
 80030c6:	18e3      	adds	r3, r4, r3
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	464b      	mov	r3, r9
 80030cc:	eb45 0303 	adc.w	r3, r5, r3
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030de:	4629      	mov	r1, r5
 80030e0:	028b      	lsls	r3, r1, #10
 80030e2:	4621      	mov	r1, r4
 80030e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e8:	4621      	mov	r1, r4
 80030ea:	028a      	lsls	r2, r1, #10
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030f2:	2200      	movs	r2, #0
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	61fa      	str	r2, [r7, #28]
 80030f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030fc:	f7fd f864 	bl	80001c8 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4613      	mov	r3, r2
 8003106:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	3301      	adds	r3, #1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800311a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003122:	e002      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_RCC_GetSysClockFreq+0x204>)
 8003126:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800312c:	4618      	mov	r0, r3
 800312e:	3750      	adds	r7, #80	@ 0x50
 8003130:	46bd      	mov	sp, r7
 8003132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	00f42400 	.word	0x00f42400
 8003140:	007a1200 	.word	0x007a1200

08003144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e07b      	b.n	800324e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	2b00      	cmp	r3, #0
 800315c:	d108      	bne.n	8003170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003166:	d009      	beq.n	800317c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	61da      	str	r2, [r3, #28]
 800316e:	e005      	b.n	800317c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fe fea0 	bl	8001edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003200:	ea42 0103 	orr.w	r1, r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003208:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	f003 0104 	and.w	r1, r3, #4
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	f003 0210 	and.w	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800323c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b088      	sub	sp, #32
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003266:	f7fe fff7 	bl	8002258 <HAL_GetTick>
 800326a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
 800327e:	e12a      	b.n	80034d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_SPI_Transmit+0x36>
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e122      	b.n	80034d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_SPI_Transmit+0x48>
 800329a:	2302      	movs	r3, #2
 800329c:	e11b      	b.n	80034d6 <HAL_SPI_Transmit+0x280>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2203      	movs	r2, #3
 80032aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	88fa      	ldrh	r2, [r7, #6]
 80032be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	88fa      	ldrh	r2, [r7, #6]
 80032c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ec:	d10f      	bne.n	800330e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800330c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b40      	cmp	r3, #64	@ 0x40
 800331a:	d007      	beq.n	800332c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800332a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003334:	d152      	bne.n	80033dc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_SPI_Transmit+0xee>
 800333e:	8b7b      	ldrh	r3, [r7, #26]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d145      	bne.n	80033d0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	1c9a      	adds	r2, r3, #2
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003368:	e032      	b.n	80033d0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b02      	cmp	r3, #2
 8003376:	d112      	bne.n	800339e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	881a      	ldrh	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800339c:	e018      	b.n	80033d0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800339e:	f7fe ff5b 	bl	8002258 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d803      	bhi.n	80033b6 <HAL_SPI_Transmit+0x160>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d102      	bne.n	80033bc <HAL_SPI_Transmit+0x166>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e082      	b.n	80034d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1c7      	bne.n	800336a <HAL_SPI_Transmit+0x114>
 80033da:	e053      	b.n	8003484 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_SPI_Transmit+0x194>
 80033e4:	8b7b      	ldrh	r3, [r7, #26]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d147      	bne.n	800347a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	7812      	ldrb	r2, [r2, #0]
 80033f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003410:	e033      	b.n	800347a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d113      	bne.n	8003448 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	7812      	ldrb	r2, [r2, #0]
 800342c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003446:	e018      	b.n	800347a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003448:	f7fe ff06 	bl	8002258 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d803      	bhi.n	8003460 <HAL_SPI_Transmit+0x20a>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d102      	bne.n	8003466 <HAL_SPI_Transmit+0x210>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e02d      	b.n	80034d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1c6      	bne.n	8003412 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fbd9 	bl	8003c40 <SPI_EndRxTxTransaction>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
  }
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b088      	sub	sp, #32
 80034e2:	af02      	add	r7, sp, #8
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d001      	beq.n	80034fe <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
 80034fc:	e104      	b.n	8003708 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003506:	d112      	bne.n	800352e <HAL_SPI_Receive+0x50>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10e      	bne.n	800352e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2204      	movs	r2, #4
 8003514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003518:	88fa      	ldrh	r2, [r7, #6]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	4613      	mov	r3, r2
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f8f3 	bl	8003710 <HAL_SPI_TransmitReceive>
 800352a:	4603      	mov	r3, r0
 800352c:	e0ec      	b.n	8003708 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800352e:	f7fe fe93 	bl	8002258 <HAL_GetTick>
 8003532:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_SPI_Receive+0x62>
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0e1      	b.n	8003708 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_SPI_Receive+0x74>
 800354e:	2302      	movs	r3, #2
 8003550:	e0da      	b.n	8003708 <HAL_SPI_Receive+0x22a>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2204      	movs	r2, #4
 800355e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	88fa      	ldrh	r2, [r7, #6]
 8003572:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035a0:	d10f      	bne.n	80035c2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b40      	cmp	r3, #64	@ 0x40
 80035ce:	d007      	beq.n	80035e0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d170      	bne.n	80036ca <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035e8:	e035      	b.n	8003656 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d115      	bne.n	8003624 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f103 020c 	add.w	r2, r3, #12
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003604:	7812      	ldrb	r2, [r2, #0]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003622:	e018      	b.n	8003656 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003624:	f7fe fe18 	bl	8002258 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d803      	bhi.n	800363c <HAL_SPI_Receive+0x15e>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d102      	bne.n	8003642 <HAL_SPI_Receive+0x164>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e058      	b.n	8003708 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1c4      	bne.n	80035ea <HAL_SPI_Receive+0x10c>
 8003660:	e038      	b.n	80036d4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d113      	bne.n	8003698 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	b292      	uxth	r2, r2
 800367c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003682:	1c9a      	adds	r2, r3, #2
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003696:	e018      	b.n	80036ca <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003698:	f7fe fdde 	bl	8002258 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d803      	bhi.n	80036b0 <HAL_SPI_Receive+0x1d2>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d102      	bne.n	80036b6 <HAL_SPI_Receive+0x1d8>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e01e      	b.n	8003708 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1c6      	bne.n	8003662 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	6839      	ldr	r1, [r7, #0]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fa4b 	bl	8003b74 <SPI_EndRxTransaction>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003706:	2300      	movs	r3, #0
  }
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	@ 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800371e:	2301      	movs	r3, #1
 8003720:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003722:	f7fe fd99 	bl	8002258 <HAL_GetTick>
 8003726:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800372e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800373a:	7ffb      	ldrb	r3, [r7, #31]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d00c      	beq.n	800375a <HAL_SPI_TransmitReceive+0x4a>
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003746:	d106      	bne.n	8003756 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <HAL_SPI_TransmitReceive+0x46>
 8003750:	7ffb      	ldrb	r3, [r7, #31]
 8003752:	2b04      	cmp	r3, #4
 8003754:	d001      	beq.n	800375a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
 8003758:	e17f      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_SPI_TransmitReceive+0x5c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_SPI_TransmitReceive+0x5c>
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e174      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_SPI_TransmitReceive+0x6e>
 800377a:	2302      	movs	r3, #2
 800377c:	e16d      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34a>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b04      	cmp	r3, #4
 8003790:	d003      	beq.n	800379a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2205      	movs	r2, #5
 8003796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	887a      	ldrh	r2, [r7, #2]
 80037aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	887a      	ldrh	r2, [r7, #2]
 80037bc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	887a      	ldrh	r2, [r7, #2]
 80037c2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037da:	2b40      	cmp	r3, #64	@ 0x40
 80037dc:	d007      	beq.n	80037ee <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f6:	d17e      	bne.n	80038f6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_SPI_TransmitReceive+0xf6>
 8003800:	8afb      	ldrh	r3, [r7, #22]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d16c      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	881a      	ldrh	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	1c9a      	adds	r2, r3, #2
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800382a:	e059      	b.n	80038e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d11b      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x162>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d016      	beq.n	8003872 <HAL_SPI_TransmitReceive+0x162>
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	2b01      	cmp	r3, #1
 8003848:	d113      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385a:	1c9a      	adds	r2, r3, #2
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d119      	bne.n	80038b4 <HAL_SPI_TransmitReceive+0x1a4>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d014      	beq.n	80038b4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003894:	b292      	uxth	r2, r2
 8003896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	1c9a      	adds	r2, r3, #2
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038b0:	2301      	movs	r3, #1
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038b4:	f7fe fcd0 	bl	8002258 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d80d      	bhi.n	80038e0 <HAL_SPI_TransmitReceive+0x1d0>
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d009      	beq.n	80038e0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e0bc      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1a0      	bne.n	800382c <HAL_SPI_TransmitReceive+0x11c>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d19b      	bne.n	800382c <HAL_SPI_TransmitReceive+0x11c>
 80038f4:	e082      	b.n	80039fc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_SPI_TransmitReceive+0x1f4>
 80038fe:	8afb      	ldrh	r3, [r7, #22]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d171      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	7812      	ldrb	r2, [r2, #0]
 8003910:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800392a:	e05d      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d11c      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x264>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x264>
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	2b01      	cmp	r3, #1
 8003948:	d114      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d119      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x2a6>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d014      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b2:	2301      	movs	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039b6:	f7fe fc4f 	bl	8002258 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d803      	bhi.n	80039ce <HAL_SPI_TransmitReceive+0x2be>
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d102      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x2c4>
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e038      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d19c      	bne.n	800392c <HAL_SPI_TransmitReceive+0x21c>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d197      	bne.n	800392c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f91d 	bl	8003c40 <SPI_EndRxTxTransaction>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e01d      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3728      	adds	r7, #40	@ 0x28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a74:	f7fe fbf0 	bl	8002258 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4413      	add	r3, r2
 8003a82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a84:	f7fe fbe8 	bl	8002258 <HAL_GetTick>
 8003a88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a8a:	4b39      	ldr	r3, [pc, #228]	@ (8003b70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	015b      	lsls	r3, r3, #5
 8003a90:	0d1b      	lsrs	r3, r3, #20
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9a:	e054      	b.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d050      	beq.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aa4:	f7fe fbd8 	bl	8002258 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d902      	bls.n	8003aba <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d13d      	bne.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ac8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ad2:	d111      	bne.n	8003af8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003adc:	d004      	beq.n	8003ae8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae6:	d107      	bne.n	8003af8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003af6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b00:	d10f      	bne.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e017      	b.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	bf0c      	ite	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	2300      	movne	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d19b      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000001c 	.word	0x2000001c

08003b74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b88:	d111      	bne.n	8003bae <SPI_EndRxTransaction+0x3a>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b92:	d004      	beq.n	8003b9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9c:	d107      	bne.n	8003bae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb6:	d12a      	bne.n	8003c0e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc0:	d012      	beq.n	8003be8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2180      	movs	r1, #128	@ 0x80
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff ff49 	bl	8003a64 <SPI_WaitFlagStateUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d02d      	beq.n	8003c34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e026      	b.n	8003c36 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f7ff ff36 	bl	8003a64 <SPI_WaitFlagStateUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01a      	beq.n	8003c34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e013      	b.n	8003c36 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2101      	movs	r1, #1
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ff23 	bl	8003a64 <SPI_WaitFlagStateUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e000      	b.n	8003c36 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2201      	movs	r2, #1
 8003c54:	2102      	movs	r1, #2
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff ff04 	bl	8003a64 <SPI_WaitFlagStateUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c66:	f043 0220 	orr.w	r2, r3, #32
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e032      	b.n	8003cd8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce0 <SPI_EndRxTxTransaction+0xa0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce4 <SPI_EndRxTxTransaction+0xa4>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	0d5b      	lsrs	r3, r3, #21
 8003c7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c90:	d112      	bne.n	8003cb8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2180      	movs	r1, #128	@ 0x80
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7ff fee1 	bl	8003a64 <SPI_WaitFlagStateUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d016      	beq.n	8003cd6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cac:	f043 0220 	orr.w	r2, r3, #32
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e00f      	b.n	8003cd8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	2b80      	cmp	r3, #128	@ 0x80
 8003cd0:	d0f2      	beq.n	8003cb8 <SPI_EndRxTxTransaction+0x78>
 8003cd2:	e000      	b.n	8003cd6 <SPI_EndRxTxTransaction+0x96>
        break;
 8003cd4:	bf00      	nop
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	2000001c 	.word	0x2000001c
 8003ce4:	165e9f81 	.word	0x165e9f81

08003ce8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e038      	b.n	8003d70 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7fc ff44 	bl	8000ba0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3308      	adds	r3, #8
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 fc9e 	bl	8004664 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	461a      	mov	r2, r3
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	f000 fd00 	bl	8004738 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6858      	ldr	r0, [r3, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	f000 fd2d 	bl	80047a4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	6892      	ldr	r2, [r2, #8]
 8003d52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	6892      	ldr	r2, [r2, #8]
 8003d5e:	f041 0101 	orr.w	r1, r1, #1
 8003d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e041      	b.n	8003e0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fe f9a4 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 fa7e 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d001      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e04e      	b.n	8003ece <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a23      	ldr	r2, [pc, #140]	@ (8003edc <HAL_TIM_Base_Start_IT+0xc4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d022      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x80>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5a:	d01d      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x80>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d018      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x80>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x80>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x80>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003eec <HAL_TIM_Base_Start_IT+0xd4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x80>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a19      	ldr	r2, [pc, #100]	@ (8003ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x80>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a18      	ldr	r2, [pc, #96]	@ (8003ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d111      	bne.n	8003ebc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d010      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eba:	e007      	b.n	8003ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	40010400 	.word	0x40010400
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40001800 	.word	0x40001800

08003ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d020      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0202 	mvn.w	r2, #2
 8003f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f999 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f98b 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f99c 	bl	800428e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d020      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0204 	mvn.w	r2, #4
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f973 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f965 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f976 	bl	800428e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d020      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01b      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0208 	mvn.w	r2, #8
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f94d 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f93f 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f950 	bl	800428e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d020      	beq.n	8004040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01b      	beq.n	8004040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0210 	mvn.w	r2, #16
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2208      	movs	r2, #8
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f927 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f919 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f92a 	bl	800428e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0201 	mvn.w	r2, #1
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fd fea6 	bl	8001db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fae4 	bl	8004650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f8fb 	bl	80042a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0220 	mvn.w	r2, #32
 80040c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fab6 	bl	800463c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_TIM_ConfigClockSource+0x1c>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e0b4      	b.n	800425e <HAL_TIM_ConfigClockSource+0x186>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800411a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800412c:	d03e      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0xd4>
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004132:	f200 8087 	bhi.w	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 8004136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800413a:	f000 8086 	beq.w	800424a <HAL_TIM_ConfigClockSource+0x172>
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004142:	d87f      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 8004144:	2b70      	cmp	r3, #112	@ 0x70
 8004146:	d01a      	beq.n	800417e <HAL_TIM_ConfigClockSource+0xa6>
 8004148:	2b70      	cmp	r3, #112	@ 0x70
 800414a:	d87b      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 800414c:	2b60      	cmp	r3, #96	@ 0x60
 800414e:	d050      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004150:	2b60      	cmp	r3, #96	@ 0x60
 8004152:	d877      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 8004154:	2b50      	cmp	r3, #80	@ 0x50
 8004156:	d03c      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004158:	2b50      	cmp	r3, #80	@ 0x50
 800415a:	d873      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 800415c:	2b40      	cmp	r3, #64	@ 0x40
 800415e:	d058      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x13a>
 8004160:	2b40      	cmp	r3, #64	@ 0x40
 8004162:	d86f      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 8004164:	2b30      	cmp	r3, #48	@ 0x30
 8004166:	d064      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x15a>
 8004168:	2b30      	cmp	r3, #48	@ 0x30
 800416a:	d86b      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 800416c:	2b20      	cmp	r3, #32
 800416e:	d060      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x15a>
 8004170:	2b20      	cmp	r3, #32
 8004172:	d867      	bhi.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d05c      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x15a>
 8004178:	2b10      	cmp	r3, #16
 800417a:	d05a      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x15a>
 800417c:	e062      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800418e:	f000 f9b9 	bl	8004504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	609a      	str	r2, [r3, #8]
      break;
 80041aa:	e04f      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041bc:	f000 f9a2 	bl	8004504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041ce:	609a      	str	r2, [r3, #8]
      break;
 80041d0:	e03c      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041de:	461a      	mov	r2, r3
 80041e0:	f000 f916 	bl	8004410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2150      	movs	r1, #80	@ 0x50
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f96f 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 80041f0:	e02c      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041fe:	461a      	mov	r2, r3
 8004200:	f000 f935 	bl	800446e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2160      	movs	r1, #96	@ 0x60
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f95f 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8004210:	e01c      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800421e:	461a      	mov	r2, r3
 8004220:	f000 f8f6 	bl	8004410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2140      	movs	r1, #64	@ 0x40
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f94f 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8004230:	e00c      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f000 f946 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8004242:	e003      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      break;
 8004248:	e000      	b.n	800424c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800424a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a46      	ldr	r2, [pc, #280]	@ (80043e4 <TIM_Base_SetConfig+0x12c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d6:	d00f      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a43      	ldr	r2, [pc, #268]	@ (80043e8 <TIM_Base_SetConfig+0x130>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00b      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a42      	ldr	r2, [pc, #264]	@ (80043ec <TIM_Base_SetConfig+0x134>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d007      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a41      	ldr	r2, [pc, #260]	@ (80043f0 <TIM_Base_SetConfig+0x138>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a40      	ldr	r2, [pc, #256]	@ (80043f4 <TIM_Base_SetConfig+0x13c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d108      	bne.n	800430a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a35      	ldr	r2, [pc, #212]	@ (80043e4 <TIM_Base_SetConfig+0x12c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d02b      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004318:	d027      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a32      	ldr	r2, [pc, #200]	@ (80043e8 <TIM_Base_SetConfig+0x130>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d023      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a31      	ldr	r2, [pc, #196]	@ (80043ec <TIM_Base_SetConfig+0x134>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01f      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a30      	ldr	r2, [pc, #192]	@ (80043f0 <TIM_Base_SetConfig+0x138>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01b      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2f      	ldr	r2, [pc, #188]	@ (80043f4 <TIM_Base_SetConfig+0x13c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d017      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a2e      	ldr	r2, [pc, #184]	@ (80043f8 <TIM_Base_SetConfig+0x140>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2d      	ldr	r2, [pc, #180]	@ (80043fc <TIM_Base_SetConfig+0x144>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00f      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a2c      	ldr	r2, [pc, #176]	@ (8004400 <TIM_Base_SetConfig+0x148>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00b      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2b      	ldr	r2, [pc, #172]	@ (8004404 <TIM_Base_SetConfig+0x14c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a2a      	ldr	r2, [pc, #168]	@ (8004408 <TIM_Base_SetConfig+0x150>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d003      	beq.n	800436a <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a29      	ldr	r2, [pc, #164]	@ (800440c <TIM_Base_SetConfig+0x154>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d108      	bne.n	800437c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a10      	ldr	r2, [pc, #64]	@ (80043e4 <TIM_Base_SetConfig+0x12c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_Base_SetConfig+0xf8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a12      	ldr	r2, [pc, #72]	@ (80043f4 <TIM_Base_SetConfig+0x13c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d103      	bne.n	80043b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	611a      	str	r2, [r3, #16]
  }
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40010400 	.word	0x40010400
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800
 8004404:	40001800 	.word	0x40001800
 8004408:	40001c00 	.word	0x40001c00
 800440c:	40002000 	.word	0x40002000

08004410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800443a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 030a 	bic.w	r3, r3, #10
 800444c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f023 0210 	bic.w	r2, r3, #16
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	031b      	lsls	r3, r3, #12
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	621a      	str	r2, [r3, #32]
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f043 0307 	orr.w	r3, r3, #7
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800451e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	021a      	lsls	r2, r3, #8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	431a      	orrs	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4313      	orrs	r3, r2
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	609a      	str	r2, [r3, #8]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004558:	2302      	movs	r3, #2
 800455a:	e05a      	b.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a21      	ldr	r2, [pc, #132]	@ (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d022      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a8:	d01d      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004624 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d018      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004628 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d013      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1a      	ldr	r2, [pc, #104]	@ (800462c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00e      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a18      	ldr	r2, [pc, #96]	@ (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d009      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a17      	ldr	r2, [pc, #92]	@ (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d004      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a15      	ldr	r2, [pc, #84]	@ (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d10c      	bne.n	8004600 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800
 800462c:	40000c00 	.word	0x40000c00
 8004630:	40010400 	.word	0x40010400
 8004634:	40014000 	.word	0x40014000
 8004638:	40001800 	.word	0x40001800

0800463c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	f023 0101 	bic.w	r1, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b08      	cmp	r3, #8
 800468c:	d102      	bne.n	8004694 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800468e:	2340      	movs	r3, #64	@ 0x40
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e001      	b.n	8004698 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80046a4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80046aa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80046b0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80046b6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80046bc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80046c2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80046c8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80046ce:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80046d4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80046f2:	4b10      	ldr	r3, [pc, #64]	@ (8004734 <FSMC_NORSRAM_Init+0xd0>)
 80046f4:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046fc:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8004704:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	43db      	mvns	r3, r3
 8004714:	ea02 0103 	and.w	r1, r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4319      	orrs	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	0008fb7f 	.word	0x0008fb7f

08004738 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800474e:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	431a      	orrs	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	431a      	orrs	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	431a      	orrs	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	3b01      	subs	r3, #1
 8004774:	051b      	lsls	r3, r3, #20
 8004776:	431a      	orrs	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	3b02      	subs	r3, #2
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	431a      	orrs	r2, r3
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	4313      	orrs	r3, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	3201      	adds	r2, #1
 800478c:	4319      	orrs	r1, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047b8:	d11d      	bne.n	80047f6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80047c2:	4b13      	ldr	r3, [pc, #76]	@ (8004810 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	6811      	ldr	r1, [r2, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	6852      	ldr	r2, [r2, #4]
 80047ce:	0112      	lsls	r2, r2, #4
 80047d0:	4311      	orrs	r1, r2
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	6892      	ldr	r2, [r2, #8]
 80047d6:	0212      	lsls	r2, r2, #8
 80047d8:	4311      	orrs	r1, r2
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	6992      	ldr	r2, [r2, #24]
 80047de:	4311      	orrs	r1, r2
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	68d2      	ldr	r2, [r2, #12]
 80047e4:	0412      	lsls	r2, r2, #16
 80047e6:	430a      	orrs	r2, r1
 80047e8:	ea43 0102 	orr.w	r1, r3, r2
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80047f4:	e005      	b.n	8004802 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80047fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	cff00000 	.word	0xcff00000

08004814 <memset>:
 8004814:	4402      	add	r2, r0
 8004816:	4603      	mov	r3, r0
 8004818:	4293      	cmp	r3, r2
 800481a:	d100      	bne.n	800481e <memset+0xa>
 800481c:	4770      	bx	lr
 800481e:	f803 1b01 	strb.w	r1, [r3], #1
 8004822:	e7f9      	b.n	8004818 <memset+0x4>

08004824 <__libc_init_array>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	4d0d      	ldr	r5, [pc, #52]	@ (800485c <__libc_init_array+0x38>)
 8004828:	4c0d      	ldr	r4, [pc, #52]	@ (8004860 <__libc_init_array+0x3c>)
 800482a:	1b64      	subs	r4, r4, r5
 800482c:	10a4      	asrs	r4, r4, #2
 800482e:	2600      	movs	r6, #0
 8004830:	42a6      	cmp	r6, r4
 8004832:	d109      	bne.n	8004848 <__libc_init_array+0x24>
 8004834:	4d0b      	ldr	r5, [pc, #44]	@ (8004864 <__libc_init_array+0x40>)
 8004836:	4c0c      	ldr	r4, [pc, #48]	@ (8004868 <__libc_init_array+0x44>)
 8004838:	f000 f818 	bl	800486c <_init>
 800483c:	1b64      	subs	r4, r4, r5
 800483e:	10a4      	asrs	r4, r4, #2
 8004840:	2600      	movs	r6, #0
 8004842:	42a6      	cmp	r6, r4
 8004844:	d105      	bne.n	8004852 <__libc_init_array+0x2e>
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	f855 3b04 	ldr.w	r3, [r5], #4
 800484c:	4798      	blx	r3
 800484e:	3601      	adds	r6, #1
 8004850:	e7ee      	b.n	8004830 <__libc_init_array+0xc>
 8004852:	f855 3b04 	ldr.w	r3, [r5], #4
 8004856:	4798      	blx	r3
 8004858:	3601      	adds	r6, #1
 800485a:	e7f2      	b.n	8004842 <__libc_init_array+0x1e>
 800485c:	0800489c 	.word	0x0800489c
 8004860:	0800489c 	.word	0x0800489c
 8004864:	0800489c 	.word	0x0800489c
 8004868:	080048a0 	.word	0x080048a0

0800486c <_init>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr

08004878 <_fini>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	bf00      	nop
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr

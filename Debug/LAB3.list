
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003f80  08003f80  00004f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f90  08003f90  00005028  2**0
                  CONTENTS
  4 .ARM          00000008  08003f90  08003f90  00004f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f98  08003f98  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f98  08003f98  00004f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f9c  08003f9c  00004f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08003fa0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005028  2**0
                  CONTENTS
 10 .bss          00000178  20000028  20000028  00005028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  00005028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5c9  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e36  00000000  00000000  00014621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00017458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc7  00000000  00000000  000183f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023411  00000000  00000000  00018fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e58  00000000  00000000  0003c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf53  00000000  00000000  00051220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f173  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e38  00000000  00000000  0011f1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00122ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f68 	.word	0x08003f68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08003f68 	.word	0x08003f68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <button_init+0x14>)
 80004c2:	f002 f867 	bl	8002594 <HAL_GPIO_WritePin>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40020c00 	.word	0x40020c00

080004d0 <isButtonPressed>:
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */

int isButtonPressed(int idx){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if(button_count[idx] >= 1)
 80004d8:	4a09      	ldr	r2, [pc, #36]	@ (8000500 <isButtonPressed+0x30>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d006      	beq.n	80004f2 <isButtonPressed+0x22>
	{
		button_count[idx] = 0;
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <isButtonPressed+0x30>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2100      	movs	r1, #0
 80004ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e000      	b.n	80004f4 <isButtonPressed+0x24>
	}
	return 0;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	20000044 	.word	0x20000044

08000504 <fsm_init>:

#include "fsm_auto.h"
#include "graphic.h"

void fsm_init()
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	redCounter = redDuration /1000;
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <fsm_init+0x50>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a12      	ldr	r2, [pc, #72]	@ (8000558 <fsm_init+0x54>)
 800050e:	fb82 1203 	smull	r1, r2, r2, r3
 8000512:	1192      	asrs	r2, r2, #6
 8000514:	17db      	asrs	r3, r3, #31
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	4a10      	ldr	r2, [pc, #64]	@ (800055c <fsm_init+0x58>)
 800051a:	6013      	str	r3, [r2, #0]
	greenCounter = greenDuration /1000;
 800051c:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <fsm_init+0x5c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <fsm_init+0x54>)
 8000522:	fb82 1203 	smull	r1, r2, r2, r3
 8000526:	1192      	asrs	r2, r2, #6
 8000528:	17db      	asrs	r3, r3, #31
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <fsm_init+0x60>)
 800052e:	6013      	str	r3, [r2, #0]
	amberCounter = amberDuration /1000;
 8000530:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <fsm_init+0x64>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <fsm_init+0x54>)
 8000536:	fb82 1203 	smull	r1, r2, r2, r3
 800053a:	1192      	asrs	r2, r2, #6
 800053c:	17db      	asrs	r3, r3, #31
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <fsm_init+0x68>)
 8000542:	6013      	str	r3, [r2, #0]
	mode = 1;
 8000544:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <fsm_init+0x6c>)
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	20000000 	.word	0x20000000
 8000558:	10624dd3 	.word	0x10624dd3
 800055c:	200000bc 	.word	0x200000bc
 8000560:	20000004 	.word	0x20000004
 8000564:	200000c0 	.word	0x200000c0
 8000568:	20000008 	.word	0x20000008
 800056c:	200000c4 	.word	0x200000c4
 8000570:	200000d0 	.word	0x200000d0

08000574 <fsm_automatic_run>:

void fsm_automatic_run(){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

	if (isButtonPressed(0))
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff ffa9 	bl	80004d0 <isButtonPressed>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d019      	beq.n	80005b8 <fsm_automatic_run+0x44>
	{
		clearAllLed();
 8000584:	f001 f96e 	bl	8001864 <clearAllLed>
		status = MAN_RED;
 8000588:	4b82      	ldr	r3, [pc, #520]	@ (8000794 <fsm_automatic_run+0x220>)
 800058a:	220b      	movs	r2, #11
 800058c:	601a      	str	r2, [r3, #0]
		mode = 2;
 800058e:	4b82      	ldr	r3, [pc, #520]	@ (8000798 <fsm_automatic_run+0x224>)
 8000590:	2202      	movs	r2, #2
 8000592:	601a      	str	r2, [r3, #0]
		tempRed = redDuration;
 8000594:	4b81      	ldr	r3, [pc, #516]	@ (800079c <fsm_automatic_run+0x228>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a81      	ldr	r2, [pc, #516]	@ (80007a0 <fsm_automatic_run+0x22c>)
 800059a:	6013      	str	r3, [r2, #0]
		tempGreen = greenDuration;
 800059c:	4b81      	ldr	r3, [pc, #516]	@ (80007a4 <fsm_automatic_run+0x230>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a81      	ldr	r2, [pc, #516]	@ (80007a8 <fsm_automatic_run+0x234>)
 80005a2:	6013      	str	r3, [r2, #0]
		tempAmber = amberDuration;
 80005a4:	4b81      	ldr	r3, [pc, #516]	@ (80007ac <fsm_automatic_run+0x238>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a81      	ldr	r2, [pc, #516]	@ (80007b0 <fsm_automatic_run+0x23c>)
 80005aa:	6013      	str	r3, [r2, #0]
		isButtonPressed(1);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff ff8f 	bl	80004d0 <isButtonPressed>
		isButtonPressed(2);
 80005b2:	2002      	movs	r0, #2
 80005b4:	f7ff ff8c 	bl	80004d0 <isButtonPressed>
	}
	switch (status)
 80005b8:	4b76      	ldr	r3, [pc, #472]	@ (8000794 <fsm_automatic_run+0x220>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b04      	cmp	r3, #4
 80005be:	f200 80d2 	bhi.w	8000766 <fsm_automatic_run+0x1f2>
 80005c2:	a201      	add	r2, pc, #4	@ (adr r2, 80005c8 <fsm_automatic_run+0x54>)
 80005c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c8:	080005dd 	.word	0x080005dd
 80005cc:	080005ed 	.word	0x080005ed
 80005d0:	08000643 	.word	0x08000643
 80005d4:	080006ab 	.word	0x080006ab
 80005d8:	080006ff 	.word	0x080006ff
	{
		case INIT:
			clearAllLed();
 80005dc:	f001 f942 	bl	8001864 <clearAllLed>
			fsm_init();
 80005e0:	f7ff ff90 	bl	8000504 <fsm_init>
			status = RED_GREEN;
 80005e4:	4b6b      	ldr	r3, [pc, #428]	@ (8000794 <fsm_automatic_run+0x220>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]

			break;
 80005ea:	e0c5      	b.n	8000778 <fsm_automatic_run+0x204>
		case RED_GREEN:
			lcd_Clear(WHITE);
 80005ec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80005f0:	f000 fd72 	bl	80010d8 <lcd_Clear>
			lcdRedGreen();
 80005f4:	f000 fbf4 	bl	8000de0 <lcdRedGreen>
			road1 = redCounter;
 80005f8:	4b6e      	ldr	r3, [pc, #440]	@ (80007b4 <fsm_automatic_run+0x240>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a6e      	ldr	r2, [pc, #440]	@ (80007b8 <fsm_automatic_run+0x244>)
 80005fe:	6013      	str	r3, [r2, #0]
			road2 = greenCounter;
 8000600:	4b6e      	ldr	r3, [pc, #440]	@ (80007bc <fsm_automatic_run+0x248>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a6e      	ldr	r2, [pc, #440]	@ (80007c0 <fsm_automatic_run+0x24c>)
 8000606:	6013      	str	r3, [r2, #0]

			redCounter--;
 8000608:	4b6a      	ldr	r3, [pc, #424]	@ (80007b4 <fsm_automatic_run+0x240>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3b01      	subs	r3, #1
 800060e:	4a69      	ldr	r2, [pc, #420]	@ (80007b4 <fsm_automatic_run+0x240>)
 8000610:	6013      	str	r3, [r2, #0]
			greenCounter--;
 8000612:	4b6a      	ldr	r3, [pc, #424]	@ (80007bc <fsm_automatic_run+0x248>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	4a68      	ldr	r2, [pc, #416]	@ (80007bc <fsm_automatic_run+0x248>)
 800061a:	6013      	str	r3, [r2, #0]


			if (greenCounter <= 0)
 800061c:	4b67      	ldr	r3, [pc, #412]	@ (80007bc <fsm_automatic_run+0x248>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	f300 80a2 	bgt.w	800076a <fsm_automatic_run+0x1f6>
			{
				status = RED_AMBER;
 8000626:	4b5b      	ldr	r3, [pc, #364]	@ (8000794 <fsm_automatic_run+0x220>)
 8000628:	2202      	movs	r2, #2
 800062a:	601a      	str	r2, [r3, #0]
				amberCounter = amberDuration / 1000;
 800062c:	4b5f      	ldr	r3, [pc, #380]	@ (80007ac <fsm_automatic_run+0x238>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a64      	ldr	r2, [pc, #400]	@ (80007c4 <fsm_automatic_run+0x250>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	1192      	asrs	r2, r2, #6
 8000638:	17db      	asrs	r3, r3, #31
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	4a62      	ldr	r2, [pc, #392]	@ (80007c8 <fsm_automatic_run+0x254>)
 800063e:	6013      	str	r3, [r2, #0]
			}
			break;
 8000640:	e093      	b.n	800076a <fsm_automatic_run+0x1f6>
		case RED_AMBER:
			lcd_Clear(WHITE);
 8000642:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000646:	f000 fd47 	bl	80010d8 <lcd_Clear>
			lcdRedAmber();
 800064a:	f000 fbe1 	bl	8000e10 <lcdRedAmber>

			road1 = redCounter;
 800064e:	4b59      	ldr	r3, [pc, #356]	@ (80007b4 <fsm_automatic_run+0x240>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a59      	ldr	r2, [pc, #356]	@ (80007b8 <fsm_automatic_run+0x244>)
 8000654:	6013      	str	r3, [r2, #0]
			road2 = amberCounter;
 8000656:	4b5c      	ldr	r3, [pc, #368]	@ (80007c8 <fsm_automatic_run+0x254>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a59      	ldr	r2, [pc, #356]	@ (80007c0 <fsm_automatic_run+0x24c>)
 800065c:	6013      	str	r3, [r2, #0]

			redCounter--;
 800065e:	4b55      	ldr	r3, [pc, #340]	@ (80007b4 <fsm_automatic_run+0x240>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3b01      	subs	r3, #1
 8000664:	4a53      	ldr	r2, [pc, #332]	@ (80007b4 <fsm_automatic_run+0x240>)
 8000666:	6013      	str	r3, [r2, #0]
			amberCounter--;
 8000668:	4b57      	ldr	r3, [pc, #348]	@ (80007c8 <fsm_automatic_run+0x254>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	4a56      	ldr	r2, [pc, #344]	@ (80007c8 <fsm_automatic_run+0x254>)
 8000670:	6013      	str	r3, [r2, #0]

			if (redCounter <= 0)
 8000672:	4b50      	ldr	r3, [pc, #320]	@ (80007b4 <fsm_automatic_run+0x240>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	dc79      	bgt.n	800076e <fsm_automatic_run+0x1fa>
			{
				status = GREEN_RED;
 800067a:	4b46      	ldr	r3, [pc, #280]	@ (8000794 <fsm_automatic_run+0x220>)
 800067c:	2203      	movs	r2, #3
 800067e:	601a      	str	r2, [r3, #0]

				redCounter = redDuration/1000;
 8000680:	4b46      	ldr	r3, [pc, #280]	@ (800079c <fsm_automatic_run+0x228>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a4f      	ldr	r2, [pc, #316]	@ (80007c4 <fsm_automatic_run+0x250>)
 8000686:	fb82 1203 	smull	r1, r2, r2, r3
 800068a:	1192      	asrs	r2, r2, #6
 800068c:	17db      	asrs	r3, r3, #31
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	4a48      	ldr	r2, [pc, #288]	@ (80007b4 <fsm_automatic_run+0x240>)
 8000692:	6013      	str	r3, [r2, #0]
				greenCounter = greenDuration/1000;
 8000694:	4b43      	ldr	r3, [pc, #268]	@ (80007a4 <fsm_automatic_run+0x230>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a4a      	ldr	r2, [pc, #296]	@ (80007c4 <fsm_automatic_run+0x250>)
 800069a:	fb82 1203 	smull	r1, r2, r2, r3
 800069e:	1192      	asrs	r2, r2, #6
 80006a0:	17db      	asrs	r3, r3, #31
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	4a45      	ldr	r2, [pc, #276]	@ (80007bc <fsm_automatic_run+0x248>)
 80006a6:	6013      	str	r3, [r2, #0]

			}
			break;
 80006a8:	e061      	b.n	800076e <fsm_automatic_run+0x1fa>
		case GREEN_RED:
			lcd_Clear(WHITE);
 80006aa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80006ae:	f000 fd13 	bl	80010d8 <lcd_Clear>
			lcdGreenRed();
 80006b2:	f000 fbc5 	bl	8000e40 <lcdGreenRed>

			road1 = greenCounter;
 80006b6:	4b41      	ldr	r3, [pc, #260]	@ (80007bc <fsm_automatic_run+0x248>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a3f      	ldr	r2, [pc, #252]	@ (80007b8 <fsm_automatic_run+0x244>)
 80006bc:	6013      	str	r3, [r2, #0]
			road2 = redCounter;
 80006be:	4b3d      	ldr	r3, [pc, #244]	@ (80007b4 <fsm_automatic_run+0x240>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a3f      	ldr	r2, [pc, #252]	@ (80007c0 <fsm_automatic_run+0x24c>)
 80006c4:	6013      	str	r3, [r2, #0]

			redCounter--;
 80006c6:	4b3b      	ldr	r3, [pc, #236]	@ (80007b4 <fsm_automatic_run+0x240>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	4a39      	ldr	r2, [pc, #228]	@ (80007b4 <fsm_automatic_run+0x240>)
 80006ce:	6013      	str	r3, [r2, #0]
			greenCounter--;
 80006d0:	4b3a      	ldr	r3, [pc, #232]	@ (80007bc <fsm_automatic_run+0x248>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	4a39      	ldr	r2, [pc, #228]	@ (80007bc <fsm_automatic_run+0x248>)
 80006d8:	6013      	str	r3, [r2, #0]

			if (greenCounter <= 0)
 80006da:	4b38      	ldr	r3, [pc, #224]	@ (80007bc <fsm_automatic_run+0x248>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dc47      	bgt.n	8000772 <fsm_automatic_run+0x1fe>
			{
				status = AMBER_RED;
 80006e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <fsm_automatic_run+0x220>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	601a      	str	r2, [r3, #0]
				amberCounter = amberDuration/1000;
 80006e8:	4b30      	ldr	r3, [pc, #192]	@ (80007ac <fsm_automatic_run+0x238>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a35      	ldr	r2, [pc, #212]	@ (80007c4 <fsm_automatic_run+0x250>)
 80006ee:	fb82 1203 	smull	r1, r2, r2, r3
 80006f2:	1192      	asrs	r2, r2, #6
 80006f4:	17db      	asrs	r3, r3, #31
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	4a33      	ldr	r2, [pc, #204]	@ (80007c8 <fsm_automatic_run+0x254>)
 80006fa:	6013      	str	r3, [r2, #0]

			}
			break;
 80006fc:	e039      	b.n	8000772 <fsm_automatic_run+0x1fe>
		case AMBER_RED:
			lcd_Clear(WHITE);
 80006fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000702:	f000 fce9 	bl	80010d8 <lcd_Clear>
			lcdAmberRed();
 8000706:	f000 fbb3 	bl	8000e70 <lcdAmberRed>


			road1 = amberCounter;
 800070a:	4b2f      	ldr	r3, [pc, #188]	@ (80007c8 <fsm_automatic_run+0x254>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a2a      	ldr	r2, [pc, #168]	@ (80007b8 <fsm_automatic_run+0x244>)
 8000710:	6013      	str	r3, [r2, #0]
			road2 = redCounter;
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <fsm_automatic_run+0x240>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a2a      	ldr	r2, [pc, #168]	@ (80007c0 <fsm_automatic_run+0x24c>)
 8000718:	6013      	str	r3, [r2, #0]

			redCounter--;
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <fsm_automatic_run+0x240>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3b01      	subs	r3, #1
 8000720:	4a24      	ldr	r2, [pc, #144]	@ (80007b4 <fsm_automatic_run+0x240>)
 8000722:	6013      	str	r3, [r2, #0]
			amberCounter--;
 8000724:	4b28      	ldr	r3, [pc, #160]	@ (80007c8 <fsm_automatic_run+0x254>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3b01      	subs	r3, #1
 800072a:	4a27      	ldr	r2, [pc, #156]	@ (80007c8 <fsm_automatic_run+0x254>)
 800072c:	6013      	str	r3, [r2, #0]

			if (redCounter <= 0)
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <fsm_automatic_run+0x240>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	dc1f      	bgt.n	8000776 <fsm_automatic_run+0x202>
			{
				status = RED_GREEN;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <fsm_automatic_run+0x220>)
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]

				redCounter = redDuration/1000;
 800073c:	4b17      	ldr	r3, [pc, #92]	@ (800079c <fsm_automatic_run+0x228>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a20      	ldr	r2, [pc, #128]	@ (80007c4 <fsm_automatic_run+0x250>)
 8000742:	fb82 1203 	smull	r1, r2, r2, r3
 8000746:	1192      	asrs	r2, r2, #6
 8000748:	17db      	asrs	r3, r3, #31
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <fsm_automatic_run+0x240>)
 800074e:	6013      	str	r3, [r2, #0]
				greenCounter = greenDuration/1000;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <fsm_automatic_run+0x230>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <fsm_automatic_run+0x250>)
 8000756:	fb82 1203 	smull	r1, r2, r2, r3
 800075a:	1192      	asrs	r2, r2, #6
 800075c:	17db      	asrs	r3, r3, #31
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	4a16      	ldr	r2, [pc, #88]	@ (80007bc <fsm_automatic_run+0x248>)
 8000762:	6013      	str	r3, [r2, #0]

			}
			break;
 8000764:	e007      	b.n	8000776 <fsm_automatic_run+0x202>
		default:
			break;
 8000766:	bf00      	nop
 8000768:	e006      	b.n	8000778 <fsm_automatic_run+0x204>
			break;
 800076a:	bf00      	nop
 800076c:	e004      	b.n	8000778 <fsm_automatic_run+0x204>
			break;
 800076e:	bf00      	nop
 8000770:	e002      	b.n	8000778 <fsm_automatic_run+0x204>
			break;
 8000772:	bf00      	nop
 8000774:	e000      	b.n	8000778 <fsm_automatic_run+0x204>
			break;
 8000776:	bf00      	nop
	}
	if (mode == 1)
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <fsm_automatic_run+0x224>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d107      	bne.n	8000790 <fsm_automatic_run+0x21c>
	{
		updateLedBuffer(road1, road2);
 8000780:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <fsm_automatic_run+0x244>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0e      	ldr	r2, [pc, #56]	@ (80007c0 <fsm_automatic_run+0x24c>)
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fb88 	bl	8000ea0 <updateLedBuffer>
	}


}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000b8 	.word	0x200000b8
 8000798:	200000d0 	.word	0x200000d0
 800079c:	20000000 	.word	0x20000000
 80007a0:	200000d4 	.word	0x200000d4
 80007a4:	20000004 	.word	0x20000004
 80007a8:	200000d8 	.word	0x200000d8
 80007ac:	20000008 	.word	0x20000008
 80007b0:	200000dc 	.word	0x200000dc
 80007b4:	200000bc 	.word	0x200000bc
 80007b8:	200000c8 	.word	0x200000c8
 80007bc:	200000c0 	.word	0x200000c0
 80007c0:	200000cc 	.word	0x200000cc
 80007c4:	10624dd3 	.word	0x10624dd3
 80007c8:	200000c4 	.word	0x200000c4

080007cc <fsm_manual_run>:


#include "fsm_man.h"

void fsm_manual_run()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	switch (status)
 80007d0:	4b9e      	ldr	r3, [pc, #632]	@ (8000a4c <fsm_manual_run+0x280>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3b0b      	subs	r3, #11
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	f200 812e 	bhi.w	8000a38 <fsm_manual_run+0x26c>
 80007dc:	a201      	add	r2, pc, #4	@ (adr r2, 80007e4 <fsm_manual_run+0x18>)
 80007de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e2:	bf00      	nop
 80007e4:	080007f5 	.word	0x080007f5
 80007e8:	08000901 	.word	0x08000901
 80007ec:	0800087b 	.word	0x0800087b
 80007f0:	080009d7 	.word	0x080009d7
	{
		case MAN_RED:
			blinkingLed(RED_LED);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 fb97 	bl	8000f28 <blinkingLed>
			updateLedBuffer(mode, redDuration / 1000);
 80007fa:	4b95      	ldr	r3, [pc, #596]	@ (8000a50 <fsm_manual_run+0x284>)
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	4b95      	ldr	r3, [pc, #596]	@ (8000a54 <fsm_manual_run+0x288>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a95      	ldr	r2, [pc, #596]	@ (8000a58 <fsm_manual_run+0x28c>)
 8000804:	fb82 1203 	smull	r1, r2, r2, r3
 8000808:	1192      	asrs	r2, r2, #6
 800080a:	17db      	asrs	r3, r3, #31
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	4619      	mov	r1, r3
 8000810:	f000 fb46 	bl	8000ea0 <updateLedBuffer>
			if (isButtonPressed(0))
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fe5b 	bl	80004d0 <isButtonPressed>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00f      	beq.n	8000840 <fsm_manual_run+0x74>
			{
				if(!isButtonPressed(2))
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fe55 	bl	80004d0 <isButtonPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d103      	bne.n	8000834 <fsm_manual_run+0x68>
				{
					redDuration = tempRed;
 800082c:	4b8b      	ldr	r3, [pc, #556]	@ (8000a5c <fsm_manual_run+0x290>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a88      	ldr	r2, [pc, #544]	@ (8000a54 <fsm_manual_run+0x288>)
 8000832:	6013      	str	r3, [r2, #0]
				}
				status = MAN_AMBER;
 8000834:	4b85      	ldr	r3, [pc, #532]	@ (8000a4c <fsm_manual_run+0x280>)
 8000836:	220d      	movs	r2, #13
 8000838:	601a      	str	r2, [r3, #0]
				mode = 3;
 800083a:	4b85      	ldr	r3, [pc, #532]	@ (8000a50 <fsm_manual_run+0x284>)
 800083c:	2203      	movs	r2, #3
 800083e:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(1) && mode == 2)
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fe45 	bl	80004d0 <isButtonPressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	f000 80f7 	beq.w	8000a3c <fsm_manual_run+0x270>
 800084e:	4b80      	ldr	r3, [pc, #512]	@ (8000a50 <fsm_manual_run+0x284>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b02      	cmp	r3, #2
 8000854:	f040 80f2 	bne.w	8000a3c <fsm_manual_run+0x270>
			{
				redDuration += 1000;
 8000858:	4b7e      	ldr	r3, [pc, #504]	@ (8000a54 <fsm_manual_run+0x288>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000860:	4a7c      	ldr	r2, [pc, #496]	@ (8000a54 <fsm_manual_run+0x288>)
 8000862:	6013      	str	r3, [r2, #0]
				if (redDuration > 99000)
 8000864:	4b7b      	ldr	r3, [pc, #492]	@ (8000a54 <fsm_manual_run+0x288>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a7d      	ldr	r2, [pc, #500]	@ (8000a60 <fsm_manual_run+0x294>)
 800086a:	4293      	cmp	r3, r2
 800086c:	f340 80e6 	ble.w	8000a3c <fsm_manual_run+0x270>
				{
					redDuration = 1000;
 8000870:	4b78      	ldr	r3, [pc, #480]	@ (8000a54 <fsm_manual_run+0x288>)
 8000872:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000876:	601a      	str	r2, [r3, #0]
				}
			}

			break;
 8000878:	e0e0      	b.n	8000a3c <fsm_manual_run+0x270>
		case MAN_AMBER:
			blinkingLed(AMBER_LED);
 800087a:	2002      	movs	r0, #2
 800087c:	f000 fb54 	bl	8000f28 <blinkingLed>
			updateLedBuffer(mode, amberDuration / 1000);
 8000880:	4b73      	ldr	r3, [pc, #460]	@ (8000a50 <fsm_manual_run+0x284>)
 8000882:	6818      	ldr	r0, [r3, #0]
 8000884:	4b77      	ldr	r3, [pc, #476]	@ (8000a64 <fsm_manual_run+0x298>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a73      	ldr	r2, [pc, #460]	@ (8000a58 <fsm_manual_run+0x28c>)
 800088a:	fb82 1203 	smull	r1, r2, r2, r3
 800088e:	1192      	asrs	r2, r2, #6
 8000890:	17db      	asrs	r3, r3, #31
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	4619      	mov	r1, r3
 8000896:	f000 fb03 	bl	8000ea0 <updateLedBuffer>
			if (isButtonPressed(0))
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fe18 	bl	80004d0 <isButtonPressed>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00f      	beq.n	80008c6 <fsm_manual_run+0xfa>
			{
				if(!isButtonPressed(2))
 80008a6:	2002      	movs	r0, #2
 80008a8:	f7ff fe12 	bl	80004d0 <isButtonPressed>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d103      	bne.n	80008ba <fsm_manual_run+0xee>
				{
					amberDuration = tempAmber;
 80008b2:	4b6d      	ldr	r3, [pc, #436]	@ (8000a68 <fsm_manual_run+0x29c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a6b      	ldr	r2, [pc, #428]	@ (8000a64 <fsm_manual_run+0x298>)
 80008b8:	6013      	str	r3, [r2, #0]
				}
				status = MAN_GREEN;
 80008ba:	4b64      	ldr	r3, [pc, #400]	@ (8000a4c <fsm_manual_run+0x280>)
 80008bc:	220c      	movs	r2, #12
 80008be:	601a      	str	r2, [r3, #0]
				mode = 4;
 80008c0:	4b63      	ldr	r3, [pc, #396]	@ (8000a50 <fsm_manual_run+0x284>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(1)  && mode == 3)
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff fe02 	bl	80004d0 <isButtonPressed>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 80b6 	beq.w	8000a40 <fsm_manual_run+0x274>
 80008d4:	4b5e      	ldr	r3, [pc, #376]	@ (8000a50 <fsm_manual_run+0x284>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	f040 80b1 	bne.w	8000a40 <fsm_manual_run+0x274>
			{
				amberDuration += 1000;
 80008de:	4b61      	ldr	r3, [pc, #388]	@ (8000a64 <fsm_manual_run+0x298>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80008e6:	4a5f      	ldr	r2, [pc, #380]	@ (8000a64 <fsm_manual_run+0x298>)
 80008e8:	6013      	str	r3, [r2, #0]
				if (amberDuration > 99000)
 80008ea:	4b5e      	ldr	r3, [pc, #376]	@ (8000a64 <fsm_manual_run+0x298>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a5c      	ldr	r2, [pc, #368]	@ (8000a60 <fsm_manual_run+0x294>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	f340 80a5 	ble.w	8000a40 <fsm_manual_run+0x274>
				{
					amberDuration = 1000;
 80008f6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a64 <fsm_manual_run+0x298>)
 80008f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008fc:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 80008fe:	e09f      	b.n	8000a40 <fsm_manual_run+0x274>
		case MAN_GREEN:
			blinkingLed(GREEN_LED);
 8000900:	2001      	movs	r0, #1
 8000902:	f000 fb11 	bl	8000f28 <blinkingLed>
			updateLedBuffer(mode, greenDuration / 1000);
 8000906:	4b52      	ldr	r3, [pc, #328]	@ (8000a50 <fsm_manual_run+0x284>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	4b58      	ldr	r3, [pc, #352]	@ (8000a6c <fsm_manual_run+0x2a0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a52      	ldr	r2, [pc, #328]	@ (8000a58 <fsm_manual_run+0x28c>)
 8000910:	fb82 1203 	smull	r1, r2, r2, r3
 8000914:	1192      	asrs	r2, r2, #6
 8000916:	17db      	asrs	r3, r3, #31
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	4619      	mov	r1, r3
 800091c:	f000 fac0 	bl	8000ea0 <updateLedBuffer>
			if (isButtonPressed(0))
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fdd5 	bl	80004d0 <isButtonPressed>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d03a      	beq.n	80009a2 <fsm_manual_run+0x1d6>
			{
				if(!isButtonPressed(2))
 800092c:	2002      	movs	r0, #2
 800092e:	f7ff fdcf 	bl	80004d0 <isButtonPressed>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d103      	bne.n	8000940 <fsm_manual_run+0x174>
				{
					greenDuration = tempGreen;
 8000938:	4b4d      	ldr	r3, [pc, #308]	@ (8000a70 <fsm_manual_run+0x2a4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a4b      	ldr	r2, [pc, #300]	@ (8000a6c <fsm_manual_run+0x2a0>)
 800093e:	6013      	str	r3, [r2, #0]
				}
				if (redDuration == (greenDuration + amberDuration))
 8000940:	4b4a      	ldr	r3, [pc, #296]	@ (8000a6c <fsm_manual_run+0x2a0>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b47      	ldr	r3, [pc, #284]	@ (8000a64 <fsm_manual_run+0x298>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	441a      	add	r2, r3
 800094a:	4b42      	ldr	r3, [pc, #264]	@ (8000a54 <fsm_manual_run+0x288>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	d124      	bne.n	800099c <fsm_manual_run+0x1d0>
				{
					status = RED_GREEN;
 8000952:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <fsm_manual_run+0x280>)
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
					redCounter = redDuration / 1000;
 8000958:	4b3e      	ldr	r3, [pc, #248]	@ (8000a54 <fsm_manual_run+0x288>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a3e      	ldr	r2, [pc, #248]	@ (8000a58 <fsm_manual_run+0x28c>)
 800095e:	fb82 1203 	smull	r1, r2, r2, r3
 8000962:	1192      	asrs	r2, r2, #6
 8000964:	17db      	asrs	r3, r3, #31
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	4a42      	ldr	r2, [pc, #264]	@ (8000a74 <fsm_manual_run+0x2a8>)
 800096a:	6013      	str	r3, [r2, #0]
					greenCounter = greenDuration / 1000;
 800096c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a6c <fsm_manual_run+0x2a0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a39      	ldr	r2, [pc, #228]	@ (8000a58 <fsm_manual_run+0x28c>)
 8000972:	fb82 1203 	smull	r1, r2, r2, r3
 8000976:	1192      	asrs	r2, r2, #6
 8000978:	17db      	asrs	r3, r3, #31
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	4a3e      	ldr	r2, [pc, #248]	@ (8000a78 <fsm_manual_run+0x2ac>)
 800097e:	6013      	str	r3, [r2, #0]
					amberCounter = amberDuration / 1000;
 8000980:	4b38      	ldr	r3, [pc, #224]	@ (8000a64 <fsm_manual_run+0x298>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a34      	ldr	r2, [pc, #208]	@ (8000a58 <fsm_manual_run+0x28c>)
 8000986:	fb82 1203 	smull	r1, r2, r2, r3
 800098a:	1192      	asrs	r2, r2, #6
 800098c:	17db      	asrs	r3, r3, #31
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	4a3a      	ldr	r2, [pc, #232]	@ (8000a7c <fsm_manual_run+0x2b0>)
 8000992:	6013      	str	r3, [r2, #0]
					mode = 1;
 8000994:	4b2e      	ldr	r3, [pc, #184]	@ (8000a50 <fsm_manual_run+0x284>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e002      	b.n	80009a2 <fsm_manual_run+0x1d6>

				}
				else
				{
					status = ERROR;
 800099c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <fsm_manual_run+0x280>)
 800099e:	220e      	movs	r2, #14
 80009a0:	601a      	str	r2, [r3, #0]
				}
			}
			if (isButtonPressed(1) && mode == 4)
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff fd94 	bl	80004d0 <isButtonPressed>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d04a      	beq.n	8000a44 <fsm_manual_run+0x278>
 80009ae:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <fsm_manual_run+0x284>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d146      	bne.n	8000a44 <fsm_manual_run+0x278>
			{
				greenDuration += 1000;
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <fsm_manual_run+0x2a0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80009be:	4a2b      	ldr	r2, [pc, #172]	@ (8000a6c <fsm_manual_run+0x2a0>)
 80009c0:	6013      	str	r3, [r2, #0]
				if (greenDuration > 99000)
 80009c2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <fsm_manual_run+0x2a0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a26      	ldr	r2, [pc, #152]	@ (8000a60 <fsm_manual_run+0x294>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	dd3b      	ble.n	8000a44 <fsm_manual_run+0x278>
				{
					greenDuration = 1000;
 80009cc:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <fsm_manual_run+0x2a0>)
 80009ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009d2:	601a      	str	r2, [r3, #0]
				}
			}

			break;
 80009d4:	e036      	b.n	8000a44 <fsm_manual_run+0x278>
		case ERROR:
			status = RED_GREEN;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <fsm_manual_run+0x280>)
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]
			redDuration = tempRed;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <fsm_manual_run+0x290>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a54 <fsm_manual_run+0x288>)
 80009e2:	6013      	str	r3, [r2, #0]
			amberDuration = tempAmber;
 80009e4:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <fsm_manual_run+0x29c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a64 <fsm_manual_run+0x298>)
 80009ea:	6013      	str	r3, [r2, #0]
			greenDuration = tempGreen;
 80009ec:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <fsm_manual_run+0x2a4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1e      	ldr	r2, [pc, #120]	@ (8000a6c <fsm_manual_run+0x2a0>)
 80009f2:	6013      	str	r3, [r2, #0]
			redCounter = redDuration /1000;
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <fsm_manual_run+0x288>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a17      	ldr	r2, [pc, #92]	@ (8000a58 <fsm_manual_run+0x28c>)
 80009fa:	fb82 1203 	smull	r1, r2, r2, r3
 80009fe:	1192      	asrs	r2, r2, #6
 8000a00:	17db      	asrs	r3, r3, #31
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <fsm_manual_run+0x2a8>)
 8000a06:	6013      	str	r3, [r2, #0]
			greenCounter = greenDuration /1000;
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <fsm_manual_run+0x2a0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a12      	ldr	r2, [pc, #72]	@ (8000a58 <fsm_manual_run+0x28c>)
 8000a0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a12:	1192      	asrs	r2, r2, #6
 8000a14:	17db      	asrs	r3, r3, #31
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	4a17      	ldr	r2, [pc, #92]	@ (8000a78 <fsm_manual_run+0x2ac>)
 8000a1a:	6013      	str	r3, [r2, #0]
			amberCounter = amberDuration /1000;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <fsm_manual_run+0x298>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <fsm_manual_run+0x28c>)
 8000a22:	fb82 1203 	smull	r1, r2, r2, r3
 8000a26:	1192      	asrs	r2, r2, #6
 8000a28:	17db      	asrs	r3, r3, #31
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	4a13      	ldr	r2, [pc, #76]	@ (8000a7c <fsm_manual_run+0x2b0>)
 8000a2e:	6013      	str	r3, [r2, #0]
			mode = 1;
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <fsm_manual_run+0x284>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
			break;
 8000a36:	e006      	b.n	8000a46 <fsm_manual_run+0x27a>
		default:
			break;
 8000a38:	bf00      	nop
 8000a3a:	e004      	b.n	8000a46 <fsm_manual_run+0x27a>
			break;
 8000a3c:	bf00      	nop
 8000a3e:	e002      	b.n	8000a46 <fsm_manual_run+0x27a>
			break;
 8000a40:	bf00      	nop
 8000a42:	e000      	b.n	8000a46 <fsm_manual_run+0x27a>
			break;
 8000a44:	bf00      	nop
	}
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000b8 	.word	0x200000b8
 8000a50:	200000d0 	.word	0x200000d0
 8000a54:	20000000 	.word	0x20000000
 8000a58:	10624dd3 	.word	0x10624dd3
 8000a5c:	200000d4 	.word	0x200000d4
 8000a60:	000182b8 	.word	0x000182b8
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200000dc 	.word	0x200000dc
 8000a6c:	20000004 	.word	0x20000004
 8000a70:	200000d8 	.word	0x200000d8
 8000a74:	200000bc 	.word	0x200000bc
 8000a78:	200000c0 	.word	0x200000c0
 8000a7c:	200000c4 	.word	0x200000c4

08000a80 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	@ 0x38
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000aac:	4b2f      	ldr	r3, [pc, #188]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000aae:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000ab2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000ab6:	4a2e      	ldr	r2, [pc, #184]	@ (8000b70 <MX_FSMC_Init+0xf0>)
 8000ab8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000aba:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000ace:	2210      	movs	r2, #16
 8000ad0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ad2:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ad8:	4b24      	ldr	r3, [pc, #144]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000aec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000afe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000b12:	230f      	movs	r3, #15
 8000b14:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000b16:	230f      	movs	r3, #15
 8000b18:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000b1a:	233c      	movs	r3, #60	@ 0x3c
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000b22:	2310      	movs	r3, #16
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000b26:	2311      	movs	r3, #17
 8000b28:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000b32:	230f      	movs	r3, #15
 8000b34:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000b36:	2309      	movs	r3, #9
 8000b38:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000b42:	2311      	movs	r3, #17
 8000b44:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000b4a:	463a      	mov	r2, r7
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <MX_FSMC_Init+0xec>)
 8000b54:	f002 fc46 	bl	80033e4 <HAL_SRAM_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000b5e:	f000 ff83 	bl	8001a68 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000b62:	bf00      	nop
 8000b64:	3738      	adds	r7, #56	@ 0x38
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000064 	.word	0x20000064
 8000b70:	a0000104 	.word	0xa0000104

08000b74 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <HAL_FSMC_MspInit+0x88>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d131      	bne.n	8000bf4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <HAL_FSMC_MspInit+0x88>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_FSMC_MspInit+0x8c>)
 8000b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b9e:	4a18      	ldr	r2, [pc, #96]	@ (8000c00 <HAL_FSMC_MspInit+0x8c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <HAL_FSMC_MspInit+0x8c>)
 8000ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000bb2:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000bb6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <HAL_FSMC_MspInit+0x90>)
 8000bce:	f001 fb45 	bl	800225c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000bd2:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000bd6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000be4:	230c      	movs	r3, #12
 8000be6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4806      	ldr	r0, [pc, #24]	@ (8000c08 <HAL_FSMC_MspInit+0x94>)
 8000bee:	f001 fb35 	bl	800225c <HAL_GPIO_Init>
 8000bf2:	e000      	b.n	8000bf6 <HAL_FSMC_MspInit+0x82>
    return;
 8000bf4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000b4 	.word	0x200000b4
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40020c00 	.word	0x40020c00

08000c0c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000c14:	f7ff ffae 	bl	8000b74 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	@ 0x30
 8000c24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	4b63      	ldr	r3, [pc, #396]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a62      	ldr	r2, [pc, #392]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c40:	f043 0310 	orr.w	r3, r3, #16
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b60      	ldr	r3, [pc, #384]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	4b5c      	ldr	r3, [pc, #368]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a5b      	ldr	r2, [pc, #364]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b59      	ldr	r3, [pc, #356]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b55      	ldr	r3, [pc, #340]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a54      	ldr	r2, [pc, #336]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b52      	ldr	r3, [pc, #328]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a4d      	ldr	r2, [pc, #308]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	4b47      	ldr	r3, [pc, #284]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a46      	ldr	r2, [pc, #280]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b44      	ldr	r3, [pc, #272]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b40      	ldr	r3, [pc, #256]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a3f      	ldr	r2, [pc, #252]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	4b39      	ldr	r3, [pc, #228]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a38      	ldr	r2, [pc, #224]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b36      	ldr	r3, [pc, #216]	@ (8000dc8 <MX_GPIO_Init+0x1a8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2170      	movs	r1, #112	@ 0x70
 8000cfe:	4833      	ldr	r0, [pc, #204]	@ (8000dcc <MX_GPIO_Init+0x1ac>)
 8000d00:	f001 fc48 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d0a:	4831      	ldr	r0, [pc, #196]	@ (8000dd0 <MX_GPIO_Init+0x1b0>)
 8000d0c:	f001 fc42 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2140      	movs	r1, #64	@ 0x40
 8000d14:	482f      	ldr	r0, [pc, #188]	@ (8000dd4 <MX_GPIO_Init+0x1b4>)
 8000d16:	f001 fc3d 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d20:	482d      	ldr	r0, [pc, #180]	@ (8000dd8 <MX_GPIO_Init+0x1b8>)
 8000d22:	f001 fc37 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2108      	movs	r1, #8
 8000d2a:	482c      	ldr	r0, [pc, #176]	@ (8000ddc <MX_GPIO_Init+0x1bc>)
 8000d2c:	f001 fc32 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000d30:	2370      	movs	r3, #112	@ 0x70
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4821      	ldr	r0, [pc, #132]	@ (8000dcc <MX_GPIO_Init+0x1ac>)
 8000d48:	f001 fa88 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	481a      	ldr	r0, [pc, #104]	@ (8000dd0 <MX_GPIO_Init+0x1b0>)
 8000d66:	f001 fa79 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000d6a:	2340      	movs	r3, #64	@ 0x40
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4814      	ldr	r0, [pc, #80]	@ (8000dd4 <MX_GPIO_Init+0x1b4>)
 8000d82:	f001 fa6b 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <MX_GPIO_Init+0x1b8>)
 8000da0:	f001 fa5c 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000da4:	2308      	movs	r3, #8
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <MX_GPIO_Init+0x1bc>)
 8000dbc:	f001 fa4e 	bl	800225c <HAL_GPIO_Init>

}
 8000dc0:	bf00      	nop
 8000dc2:	3730      	adds	r7, #48	@ 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40020c00 	.word	0x40020c00

08000de0 <lcdRedGreen>:
#include "graphic.h"
#include "led_7seg.h"



void lcdRedGreen(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 180, RED, 20, 1);
 8000de6:	2301      	movs	r3, #1
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2314      	movs	r3, #20
 8000dec:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000df0:	21b4      	movs	r1, #180	@ 0xb4
 8000df2:	2028      	movs	r0, #40	@ 0x28
 8000df4:	f000 fbc9 	bl	800158a <lcd_DrawCircle>
	lcd_DrawCircle(160, 50, GREEN, 20, 1);
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2314      	movs	r3, #20
 8000dfe:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000e02:	2132      	movs	r1, #50	@ 0x32
 8000e04:	20a0      	movs	r0, #160	@ 0xa0
 8000e06:	f000 fbc0 	bl	800158a <lcd_DrawCircle>
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <lcdRedAmber>:
void lcdRedAmber(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 180, RED, 20, 1);
 8000e16:	2301      	movs	r3, #1
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2314      	movs	r3, #20
 8000e1c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000e20:	21b4      	movs	r1, #180	@ 0xb4
 8000e22:	2028      	movs	r0, #40	@ 0x28
 8000e24:	f000 fbb1 	bl	800158a <lcd_DrawCircle>
	lcd_DrawCircle(120, 50, YELLOW, 20, 1);
 8000e28:	2301      	movs	r3, #1
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2314      	movs	r3, #20
 8000e2e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000e32:	2132      	movs	r1, #50	@ 0x32
 8000e34:	2078      	movs	r0, #120	@ 0x78
 8000e36:	f000 fba8 	bl	800158a <lcd_DrawCircle>
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <lcdGreenRed>:
void lcdGreenRed(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 100, GREEN, 20, 1);
 8000e46:	2301      	movs	r3, #1
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000e50:	2164      	movs	r1, #100	@ 0x64
 8000e52:	2028      	movs	r0, #40	@ 0x28
 8000e54:	f000 fb99 	bl	800158a <lcd_DrawCircle>
	lcd_DrawCircle(80, 50, RED, 20, 1);
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2314      	movs	r3, #20
 8000e5e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000e62:	2132      	movs	r1, #50	@ 0x32
 8000e64:	2050      	movs	r0, #80	@ 0x50
 8000e66:	f000 fb90 	bl	800158a <lcd_DrawCircle>
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <lcdAmberRed>:
void lcdAmberRed(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 140, YELLOW, 20, 1);
 8000e76:	2301      	movs	r3, #1
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2314      	movs	r3, #20
 8000e7c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000e80:	218c      	movs	r1, #140	@ 0x8c
 8000e82:	2028      	movs	r0, #40	@ 0x28
 8000e84:	f000 fb81 	bl	800158a <lcd_DrawCircle>
	lcd_DrawCircle(80, 50, RED, 20, 1);
 8000e88:	2301      	movs	r3, #1
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2314      	movs	r3, #20
 8000e8e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000e92:	2132      	movs	r1, #50	@ 0x32
 8000e94:	2050      	movs	r0, #80	@ 0x50
 8000e96:	f000 fb78 	bl	800158a <lcd_DrawCircle>
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <updateLedBuffer>:

void updateLedBuffer(int value1, int value2)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	led7_SetDigit(value1/10, 0, 0);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a1d      	ldr	r2, [pc, #116]	@ (8000f24 <updateLedBuffer+0x84>)
 8000eae:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb2:	1092      	asrs	r2, r2, #2
 8000eb4:	17db      	asrs	r3, r3, #31
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fc69 	bl	8001794 <led7_SetDigit>
	led7_SetDigit(value1%10, 1, 0);
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <updateLedBuffer+0x84>)
 8000ec6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eca:	1099      	asrs	r1, r3, #2
 8000ecc:	17d3      	asrs	r3, r2, #31
 8000ece:	1ac8      	subs	r0, r1, r3
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4403      	add	r3, r0
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	1ad0      	subs	r0, r2, r3
 8000eda:	2200      	movs	r2, #0
 8000edc:	2101      	movs	r1, #1
 8000ede:	f000 fc59 	bl	8001794 <led7_SetDigit>
	led7_SetDigit(value2/10, 2, 0);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8000f24 <updateLedBuffer+0x84>)
 8000ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eea:	1092      	asrs	r2, r2, #2
 8000eec:	17db      	asrs	r3, r3, #31
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fc4d 	bl	8001794 <led7_SetDigit>
	led7_SetDigit(value2%10, 0, 0);
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <updateLedBuffer+0x84>)
 8000efe:	fb83 1302 	smull	r1, r3, r3, r2
 8000f02:	1099      	asrs	r1, r3, #2
 8000f04:	17d3      	asrs	r3, r2, #31
 8000f06:	1ac8      	subs	r0, r1, r3
 8000f08:	4603      	mov	r3, r0
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4403      	add	r3, r0
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	1ad0      	subs	r0, r2, r3
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	f000 fc3d 	bl	8001794 <led7_SetDigit>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	66666667 	.word	0x66666667

08000f28 <blinkingLed>:

void blinkingLed(enum LED led){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	switch(led){
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d034      	beq.n	8000fa2 <blinkingLed+0x7a>
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	dc49      	bgt.n	8000fd0 <blinkingLed+0xa8>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <blinkingLed+0x1e>
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d017      	beq.n	8000f74 <blinkingLed+0x4c>
		lcd_Clear(WHITE);
		lcd_DrawCircle(120, 50, YELLOW, 20, 1);
		lcd_DrawCircle(40, 140, YELLOW, 20, 1);
		break;
	default:
		break;
 8000f44:	e044      	b.n	8000fd0 <blinkingLed+0xa8>
		lcd_Clear(WHITE);
 8000f46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f4a:	f000 f8c5 	bl	80010d8 <lcd_Clear>
		lcd_DrawCircle(40, 180, RED, 20, 1);
 8000f4e:	2301      	movs	r3, #1
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2314      	movs	r3, #20
 8000f54:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000f58:	21b4      	movs	r1, #180	@ 0xb4
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	f000 fb15 	bl	800158a <lcd_DrawCircle>
		lcd_DrawCircle(80, 50, RED, 20, 1);
 8000f60:	2301      	movs	r3, #1
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2314      	movs	r3, #20
 8000f66:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000f6a:	2132      	movs	r1, #50	@ 0x32
 8000f6c:	2050      	movs	r0, #80	@ 0x50
 8000f6e:	f000 fb0c 	bl	800158a <lcd_DrawCircle>
		break;
 8000f72:	e02e      	b.n	8000fd2 <blinkingLed+0xaa>
		lcd_Clear(WHITE);
 8000f74:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f78:	f000 f8ae 	bl	80010d8 <lcd_Clear>
		lcd_DrawCircle(40, 100, GREEN, 20, 1);
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2314      	movs	r3, #20
 8000f82:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000f86:	2164      	movs	r1, #100	@ 0x64
 8000f88:	2028      	movs	r0, #40	@ 0x28
 8000f8a:	f000 fafe 	bl	800158a <lcd_DrawCircle>
		lcd_DrawCircle(160, 50, GREEN, 20, 1);
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2314      	movs	r3, #20
 8000f94:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000f98:	2132      	movs	r1, #50	@ 0x32
 8000f9a:	20a0      	movs	r0, #160	@ 0xa0
 8000f9c:	f000 faf5 	bl	800158a <lcd_DrawCircle>
		break;
 8000fa0:	e017      	b.n	8000fd2 <blinkingLed+0xaa>
		lcd_Clear(WHITE);
 8000fa2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000fa6:	f000 f897 	bl	80010d8 <lcd_Clear>
		lcd_DrawCircle(120, 50, YELLOW, 20, 1);
 8000faa:	2301      	movs	r3, #1
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2314      	movs	r3, #20
 8000fb0:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000fb4:	2132      	movs	r1, #50	@ 0x32
 8000fb6:	2078      	movs	r0, #120	@ 0x78
 8000fb8:	f000 fae7 	bl	800158a <lcd_DrawCircle>
		lcd_DrawCircle(40, 140, YELLOW, 20, 1);
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2314      	movs	r3, #20
 8000fc2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000fc6:	218c      	movs	r1, #140	@ 0x8c
 8000fc8:	2028      	movs	r0, #40	@ 0x28
 8000fca:	f000 fade 	bl	800158a <lcd_DrawCircle>
		break;
 8000fce:	e000      	b.n	8000fd2 <blinkingLed+0xaa>
		break;
 8000fd0:	bf00      	nop
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <LCD_WR_REG+0x1c>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	8013      	strh	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	600ffffe 	.word	0x600ffffe

08000ffc <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001006:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <LCD_WR_DATA+0x1c>)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	8053      	strh	r3, [r2, #2]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	600ffffe 	.word	0x600ffffe

0800101c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <LCD_RD_DATA+0x20>)
 8001024:	885b      	ldrh	r3, [r3, #2]
 8001026:	b29b      	uxth	r3, r3
 8001028:	80fb      	strh	r3, [r7, #6]
	return ram;
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	b29b      	uxth	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	600ffffe 	.word	0x600ffffe

08001040 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4604      	mov	r4, r0
 8001048:	4608      	mov	r0, r1
 800104a:	4611      	mov	r1, r2
 800104c:	461a      	mov	r2, r3
 800104e:	4623      	mov	r3, r4
 8001050:	80fb      	strh	r3, [r7, #6]
 8001052:	4603      	mov	r3, r0
 8001054:	80bb      	strh	r3, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	807b      	strh	r3, [r7, #2]
 800105a:	4613      	mov	r3, r2
 800105c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800105e:	202a      	movs	r0, #42	@ 0x2a
 8001060:	f7ff ffbc 	bl	8000fdc <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b29b      	uxth	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ffc6 	bl	8000ffc <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ffc0 	bl	8000ffc <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffba 	bl	8000ffc <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ffb4 	bl	8000ffc <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001094:	202b      	movs	r0, #43	@ 0x2b
 8001096:	f7ff ffa1 	bl	8000fdc <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800109a:	88bb      	ldrh	r3, [r7, #4]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffab 	bl	8000ffc <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffa5 	bl	8000ffc <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80010b2:	883b      	ldrh	r3, [r7, #0]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff9f 	bl	8000ffc <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80010be:	883b      	ldrh	r3, [r7, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff99 	bl	8000ffc <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80010ca:	202c      	movs	r0, #44	@ 0x2c
 80010cc:	f7ff ff86 	bl	8000fdc <LCD_WR_REG>
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}

080010d8 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <lcd_Clear+0x60>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <lcd_Clear+0x60>)
 80010ec:	885b      	ldrh	r3, [r3, #2]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ffa3 	bl	8001040 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	81fb      	strh	r3, [r7, #14]
 80010fe:	e011      	b.n	8001124 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001100:	2300      	movs	r3, #0
 8001102:	81bb      	strh	r3, [r7, #12]
 8001104:	e006      	b.n	8001114 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff77 	bl	8000ffc <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800110e:	89bb      	ldrh	r3, [r7, #12]
 8001110:	3301      	adds	r3, #1
 8001112:	81bb      	strh	r3, [r7, #12]
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <lcd_Clear+0x60>)
 8001116:	885b      	ldrh	r3, [r3, #2]
 8001118:	89ba      	ldrh	r2, [r7, #12]
 800111a:	429a      	cmp	r2, r3
 800111c:	d3f3      	bcc.n	8001106 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800111e:	89fb      	ldrh	r3, [r7, #14]
 8001120:	3301      	adds	r3, #1
 8001122:	81fb      	strh	r3, [r7, #14]
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <lcd_Clear+0x60>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	89fa      	ldrh	r2, [r7, #14]
 800112a:	429a      	cmp	r2, r3
 800112c:	d3e8      	bcc.n	8001100 <lcd_Clear+0x28>
		}
	}
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200000e0 	.word	0x200000e0

0800113c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
 8001146:	460b      	mov	r3, r1
 8001148:	80bb      	strh	r3, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	88b9      	ldrh	r1, [r7, #4]
 8001154:	88f8      	ldrh	r0, [r7, #6]
 8001156:	f7ff ff73 	bl	8001040 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff4d 	bl	8000ffc <LCD_WR_DATA>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <lcd_SetDir+0x44>)
 8001188:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800118c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <lcd_SetDir+0x44>)
 8001190:	22f0      	movs	r2, #240	@ 0xf0
 8001192:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001194:	e006      	b.n	80011a4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <lcd_SetDir+0x44>)
 8001198:	22f0      	movs	r2, #240	@ 0xf0
 800119a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <lcd_SetDir+0x44>)
 800119e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80011a2:	805a      	strh	r2, [r3, #2]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	200000e0 	.word	0x200000e0

080011b4 <lcd_init>:


void lcd_init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011be:	48aa      	ldr	r0, [pc, #680]	@ (8001468 <lcd_init+0x2b4>)
 80011c0:	f001 f9e8 	bl	8002594 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011c8:	f000 ff12 	bl	8001ff0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011d2:	48a5      	ldr	r0, [pc, #660]	@ (8001468 <lcd_init+0x2b4>)
 80011d4:	f001 f9de 	bl	8002594 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011dc:	f000 ff08 	bl	8001ff0 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff ffc3 	bl	800116c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80011e6:	20d3      	movs	r0, #211	@ 0xd3
 80011e8:	f7ff fef8 	bl	8000fdc <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80011ec:	f7ff ff16 	bl	800101c <LCD_RD_DATA>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b9d      	ldr	r3, [pc, #628]	@ (800146c <lcd_init+0x2b8>)
 80011f6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011f8:	f7ff ff10 	bl	800101c <LCD_RD_DATA>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b9a      	ldr	r3, [pc, #616]	@ (800146c <lcd_init+0x2b8>)
 8001202:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001204:	f7ff ff0a 	bl	800101c <LCD_RD_DATA>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b97      	ldr	r3, [pc, #604]	@ (800146c <lcd_init+0x2b8>)
 800120e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001210:	4b96      	ldr	r3, [pc, #600]	@ (800146c <lcd_init+0x2b8>)
 8001212:	889b      	ldrh	r3, [r3, #4]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b94      	ldr	r3, [pc, #592]	@ (800146c <lcd_init+0x2b8>)
 800121a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800121c:	f7ff fefe 	bl	800101c <LCD_RD_DATA>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b91      	ldr	r3, [pc, #580]	@ (800146c <lcd_init+0x2b8>)
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	4313      	orrs	r3, r2
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b8f      	ldr	r3, [pc, #572]	@ (800146c <lcd_init+0x2b8>)
 800122e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001230:	20cf      	movs	r0, #207	@ 0xcf
 8001232:	f7ff fed3 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fee0 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800123c:	20c1      	movs	r0, #193	@ 0xc1
 800123e:	f7ff fedd 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001242:	2030      	movs	r0, #48	@ 0x30
 8001244:	f7ff feda 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001248:	20ed      	movs	r0, #237	@ 0xed
 800124a:	f7ff fec7 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800124e:	2064      	movs	r0, #100	@ 0x64
 8001250:	f7ff fed4 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001254:	2003      	movs	r0, #3
 8001256:	f7ff fed1 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800125a:	2012      	movs	r0, #18
 800125c:	f7ff fece 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001260:	2081      	movs	r0, #129	@ 0x81
 8001262:	f7ff fecb 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001266:	20e8      	movs	r0, #232	@ 0xe8
 8001268:	f7ff feb8 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800126c:	2085      	movs	r0, #133	@ 0x85
 800126e:	f7ff fec5 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001272:	2010      	movs	r0, #16
 8001274:	f7ff fec2 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001278:	207a      	movs	r0, #122	@ 0x7a
 800127a:	f7ff febf 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800127e:	20cb      	movs	r0, #203	@ 0xcb
 8001280:	f7ff feac 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001284:	2039      	movs	r0, #57	@ 0x39
 8001286:	f7ff feb9 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800128a:	202c      	movs	r0, #44	@ 0x2c
 800128c:	f7ff feb6 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff feb3 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001296:	2034      	movs	r0, #52	@ 0x34
 8001298:	f7ff feb0 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800129c:	2002      	movs	r0, #2
 800129e:	f7ff fead 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80012a2:	20f7      	movs	r0, #247	@ 0xf7
 80012a4:	f7ff fe9a 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80012a8:	2020      	movs	r0, #32
 80012aa:	f7ff fea7 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80012ae:	20ea      	movs	r0, #234	@ 0xea
 80012b0:	f7ff fe94 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fea1 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f7ff fe9e 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80012c0:	20c0      	movs	r0, #192	@ 0xc0
 80012c2:	f7ff fe8b 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80012c6:	201b      	movs	r0, #27
 80012c8:	f7ff fe98 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80012cc:	20c1      	movs	r0, #193	@ 0xc1
 80012ce:	f7ff fe85 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff fe92 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80012d8:	20c5      	movs	r0, #197	@ 0xc5
 80012da:	f7ff fe7f 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80012de:	2030      	movs	r0, #48	@ 0x30
 80012e0:	f7ff fe8c 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80012e4:	2030      	movs	r0, #48	@ 0x30
 80012e6:	f7ff fe89 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80012ea:	20c7      	movs	r0, #199	@ 0xc7
 80012ec:	f7ff fe76 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80012f0:	20b7      	movs	r0, #183	@ 0xb7
 80012f2:	f7ff fe83 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80012f6:	2036      	movs	r0, #54	@ 0x36
 80012f8:	f7ff fe70 	bl	8000fdc <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80012fc:	2008      	movs	r0, #8
 80012fe:	f7ff fe7d 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001302:	203a      	movs	r0, #58	@ 0x3a
 8001304:	f7ff fe6a 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001308:	2055      	movs	r0, #85	@ 0x55
 800130a:	f7ff fe77 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800130e:	20b1      	movs	r0, #177	@ 0xb1
 8001310:	f7ff fe64 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff fe71 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800131a:	201a      	movs	r0, #26
 800131c:	f7ff fe6e 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001320:	20b6      	movs	r0, #182	@ 0xb6
 8001322:	f7ff fe5b 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001326:	200a      	movs	r0, #10
 8001328:	f7ff fe68 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800132c:	20a2      	movs	r0, #162	@ 0xa2
 800132e:	f7ff fe65 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001332:	20f2      	movs	r0, #242	@ 0xf2
 8001334:	f7ff fe52 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fe5f 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800133e:	2026      	movs	r0, #38	@ 0x26
 8001340:	f7ff fe4c 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fe59 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800134a:	20e0      	movs	r0, #224	@ 0xe0
 800134c:	f7ff fe46 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001350:	200f      	movs	r0, #15
 8001352:	f7ff fe53 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001356:	202a      	movs	r0, #42	@ 0x2a
 8001358:	f7ff fe50 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800135c:	2028      	movs	r0, #40	@ 0x28
 800135e:	f7ff fe4d 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001362:	2008      	movs	r0, #8
 8001364:	f7ff fe4a 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001368:	200e      	movs	r0, #14
 800136a:	f7ff fe47 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800136e:	2008      	movs	r0, #8
 8001370:	f7ff fe44 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001374:	2054      	movs	r0, #84	@ 0x54
 8001376:	f7ff fe41 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800137a:	20a9      	movs	r0, #169	@ 0xa9
 800137c:	f7ff fe3e 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001380:	2043      	movs	r0, #67	@ 0x43
 8001382:	f7ff fe3b 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001386:	200a      	movs	r0, #10
 8001388:	f7ff fe38 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800138c:	200f      	movs	r0, #15
 800138e:	f7ff fe35 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff fe32 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fe2f 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fe2c 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fe29 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80013aa:	20e1      	movs	r0, #225	@ 0xe1
 80013ac:	f7ff fe16 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fe23 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80013b6:	2015      	movs	r0, #21
 80013b8:	f7ff fe20 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80013bc:	2017      	movs	r0, #23
 80013be:	f7ff fe1d 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80013c2:	2007      	movs	r0, #7
 80013c4:	f7ff fe1a 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80013c8:	2011      	movs	r0, #17
 80013ca:	f7ff fe17 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80013ce:	2006      	movs	r0, #6
 80013d0:	f7ff fe14 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80013d4:	202b      	movs	r0, #43	@ 0x2b
 80013d6:	f7ff fe11 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80013da:	2056      	movs	r0, #86	@ 0x56
 80013dc:	f7ff fe0e 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80013e0:	203c      	movs	r0, #60	@ 0x3c
 80013e2:	f7ff fe0b 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80013e6:	2005      	movs	r0, #5
 80013e8:	f7ff fe08 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013ec:	2010      	movs	r0, #16
 80013ee:	f7ff fe05 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013f2:	200f      	movs	r0, #15
 80013f4:	f7ff fe02 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013f8:	203f      	movs	r0, #63	@ 0x3f
 80013fa:	f7ff fdff 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013fe:	203f      	movs	r0, #63	@ 0x3f
 8001400:	f7ff fdfc 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001404:	200f      	movs	r0, #15
 8001406:	f7ff fdf9 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800140a:	202b      	movs	r0, #43	@ 0x2b
 800140c:	f7ff fde6 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fdf3 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff fdf0 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff fded 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001422:	203f      	movs	r0, #63	@ 0x3f
 8001424:	f7ff fdea 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001428:	202a      	movs	r0, #42	@ 0x2a
 800142a:	f7ff fdd7 	bl	8000fdc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff fde4 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff fde1 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff fdde 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001440:	20ef      	movs	r0, #239	@ 0xef
 8001442:	f7ff fddb 	bl	8000ffc <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001446:	2011      	movs	r0, #17
 8001448:	f7ff fdc8 	bl	8000fdc <LCD_WR_REG>
	HAL_Delay(120);
 800144c:	2078      	movs	r0, #120	@ 0x78
 800144e:	f000 fdcf 	bl	8001ff0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001452:	2029      	movs	r0, #41	@ 0x29
 8001454:	f7ff fdc2 	bl	8000fdc <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800145e:	4804      	ldr	r0, [pc, #16]	@ (8001470 <lcd_init+0x2bc>)
 8001460:	f001 f898 	bl	8002594 <HAL_GPIO_WritePin>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020800 	.word	0x40020800
 800146c:	200000e0 	.word	0x200000e0
 8001470:	40020000 	.word	0x40020000

08001474 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	b29a      	uxth	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	b298      	uxth	r0, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	b29a      	uxth	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b29b      	uxth	r3, r3
 8001496:	4413      	add	r3, r2
 8001498:	b29b      	uxth	r3, r3
 800149a:	8b3a      	ldrh	r2, [r7, #24]
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fe4d 	bl	800113c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	b298      	uxth	r0, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	8b3a      	ldrh	r2, [r7, #24]
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fe3d 	bl	800113c <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b298      	uxth	r0, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	b29b      	uxth	r3, r3
 80014da:	8b3a      	ldrh	r2, [r7, #24]
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fe2d 	bl	800113c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	b298      	uxth	r0, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	8b3a      	ldrh	r2, [r7, #24]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fe1d 	bl	800113c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	b29a      	uxth	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4413      	add	r3, r2
 800150c:	b298      	uxth	r0, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	b29a      	uxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	b29b      	uxth	r3, r3
 8001516:	4413      	add	r3, r2
 8001518:	b29b      	uxth	r3, r3
 800151a:	8b3a      	ldrh	r2, [r7, #24]
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fe0d 	bl	800113c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	b29a      	uxth	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b298      	uxth	r0, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	b29a      	uxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	b29b      	uxth	r3, r3
 800153a:	8b3a      	ldrh	r2, [r7, #24]
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fdfd 	bl	800113c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	b29a      	uxth	r2, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b29b      	uxth	r3, r3
 800154a:	4413      	add	r3, r2
 800154c:	b298      	uxth	r0, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	b29a      	uxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	b29b      	uxth	r3, r3
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	b29b      	uxth	r3, r3
 800155a:	8b3a      	ldrh	r2, [r7, #24]
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fded 	bl	800113c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	b29a      	uxth	r2, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	b298      	uxth	r0, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	b29b      	uxth	r3, r3
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	b29b      	uxth	r3, r3
 800157a:	8b3a      	ldrh	r2, [r7, #24]
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fddd 	bl	800113c <lcd_DrawPoint>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b08a      	sub	sp, #40	@ 0x28
 800158e:	af02      	add	r7, sp, #8
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4613      	mov	r3, r2
 8001598:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	f1c3 0303 	rsb	r3, r3, #3
 80015aa:	613b      	str	r3, [r7, #16]


	if (fill)
 80015ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d04f      	beq.n	8001652 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80015b2:	e029      	b.n	8001608 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e00a      	b.n	80015d0 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff ff55 	bl	8001474 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	ddf0      	ble.n	80015ba <lcd_DrawCircle+0x30>

			if (d < 0) {
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da06      	bge.n	80015ec <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	009a      	lsls	r2, r3, #2
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4413      	add	r3, r2
 80015e6:	3306      	adds	r3, #6
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	e00a      	b.n	8001602 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	009a      	lsls	r2, r3, #2
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4413      	add	r3, r2
 80015f8:	330a      	adds	r3, #10
 80015fa:	613b      	str	r3, [r7, #16]
				y--;
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3b01      	subs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3301      	adds	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	429a      	cmp	r2, r3
 800160e:	ddd1      	ble.n	80015b4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001610:	e023      	b.n	800165a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff ff29 	bl	8001474 <_draw_circle_8>
			if (d < 0) {
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	da06      	bge.n	8001636 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	009a      	lsls	r2, r3, #2
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4413      	add	r3, r2
 8001630:	3306      	adds	r3, #6
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	e00a      	b.n	800164c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	009a      	lsls	r2, r3, #2
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4413      	add	r3, r2
 8001642:	330a      	adds	r3, #10
 8001644:	613b      	str	r3, [r7, #16]
				y--;
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3b01      	subs	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
			x++;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	3301      	adds	r3, #1
 8001650:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	429a      	cmp	r2, r3
 8001658:	dddb      	ble.n	8001612 <lcd_DrawCircle+0x88>
}
 800165a:	bf00      	nop
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001668:	2201      	movs	r2, #1
 800166a:	2140      	movs	r1, #64	@ 0x40
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <led7_init+0x14>)
 800166e:	f000 ff91 	bl	8002594 <HAL_GPIO_WritePin>
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021800 	.word	0x40021800

0800167c <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001680:	4b3f      	ldr	r3, [pc, #252]	@ (8001780 <led7_Scan+0x104>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b3d      	ldr	r3, [pc, #244]	@ (8001780 <led7_Scan+0x104>)
 800168a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800168c:	4b3d      	ldr	r3, [pc, #244]	@ (8001784 <led7_Scan+0x108>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <led7_Scan+0x10c>)
 8001694:	5c9b      	ldrb	r3, [r3, r2]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <led7_Scan+0x104>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b36      	ldr	r3, [pc, #216]	@ (8001780 <led7_Scan+0x104>)
 80016a8:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80016aa:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <led7_Scan+0x108>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d846      	bhi.n	8001740 <led7_Scan+0xc4>
 80016b2:	a201      	add	r2, pc, #4	@ (adr r2, 80016b8 <led7_Scan+0x3c>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	080016c9 	.word	0x080016c9
 80016bc:	080016e7 	.word	0x080016e7
 80016c0:	08001705 	.word	0x08001705
 80016c4:	08001723 	.word	0x08001723
	case 0:
		spi_buffer |= 0x00b0;
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <led7_Scan+0x104>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <led7_Scan+0x104>)
 80016d4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80016d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <led7_Scan+0x104>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016de:	b29a      	uxth	r2, r3
 80016e0:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <led7_Scan+0x104>)
 80016e2:	801a      	strh	r2, [r3, #0]
		break;
 80016e4:	e02d      	b.n	8001742 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80016e6:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <led7_Scan+0x104>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <led7_Scan+0x104>)
 80016f2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80016f4:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <led7_Scan+0x104>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	f023 0320 	bic.w	r3, r3, #32
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <led7_Scan+0x104>)
 8001700:	801a      	strh	r2, [r3, #0]
		break;
 8001702:	e01e      	b.n	8001742 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <led7_Scan+0x104>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800170c:	b29a      	uxth	r2, r3
 800170e:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <led7_Scan+0x104>)
 8001710:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001712:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <led7_Scan+0x104>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f023 0310 	bic.w	r3, r3, #16
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <led7_Scan+0x104>)
 800171e:	801a      	strh	r2, [r3, #0]
		break;
 8001720:	e00f      	b.n	8001742 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <led7_Scan+0x104>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <led7_Scan+0x104>)
 800172e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001730:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <led7_Scan+0x104>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <led7_Scan+0x104>)
 800173c:	801a      	strh	r2, [r3, #0]
		break;
 800173e:	e000      	b.n	8001742 <led7_Scan+0xc6>
	default:
		break;
 8001740:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <led7_Scan+0x108>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	425a      	negs	r2, r3
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	bf58      	it	pl
 8001754:	4253      	negpl	r3, r2
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <led7_Scan+0x108>)
 800175a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2140      	movs	r1, #64	@ 0x40
 8001760:	480a      	ldr	r0, [pc, #40]	@ (800178c <led7_Scan+0x110>)
 8001762:	f000 ff17 	bl	8002594 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001766:	2301      	movs	r3, #1
 8001768:	2202      	movs	r2, #2
 800176a:	4905      	ldr	r1, [pc, #20]	@ (8001780 <led7_Scan+0x104>)
 800176c:	4808      	ldr	r0, [pc, #32]	@ (8001790 <led7_Scan+0x114>)
 800176e:	f001 fc18 	bl	8002fa2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	2140      	movs	r1, #64	@ 0x40
 8001776:	4805      	ldr	r0, [pc, #20]	@ (800178c <led7_Scan+0x110>)
 8001778:	f000 ff0c 	bl	8002594 <HAL_GPIO_WritePin>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000001a 	.word	0x2000001a
 8001784:	200000e6 	.word	0x200000e6
 8001788:	2000000c 	.word	0x2000000c
 800178c:	40021800 	.word	0x40021800
 8001790:	200000fc 	.word	0x200000fc

08001794 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	4613      	mov	r3, r2
 80017a0:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0e      	blt.n	80017c6 <led7_SetDigit+0x32>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	dc0b      	bgt.n	80017c6 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80017ae:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <led7_SetDigit+0x40>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	b2d9      	uxtb	r1, r3
 80017bc:	4a06      	ldr	r2, [pc, #24]	@ (80017d8 <led7_SetDigit+0x44>)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	4413      	add	r3, r2
 80017c2:	460a      	mov	r2, r1
 80017c4:	701a      	strb	r2, [r3, #0]
	}
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000010 	.word	0x20000010
 80017d8:	2000000c 	.word	0x2000000c

080017dc <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <led7_SetColon+0x20>
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <led7_SetColon+0x3c>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	f023 0308 	bic.w	r3, r3, #8
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <led7_SetColon+0x3c>)
 80017f8:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 80017fa:	e006      	b.n	800180a <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <led7_SetColon+0x3c>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <led7_SetColon+0x3c>)
 8001808:	801a      	strh	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2000001a 	.word	0x2000001a

0800181c <led_Off>:
  *            @arg 6
  *            @arg 7
  *            @arg 8
  * @retval None
  */
void led_Off(uint8_t index){
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d912      	bls.n	8001852 <led_Off+0x36>
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	2b08      	cmp	r3, #8
 8001830:	d80f      	bhi.n	8001852 <led_Off+0x36>
		spi_buffer &= ~(1 << (index-6));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	3b06      	subs	r3, #6
 8001836:	2201      	movs	r2, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	b21b      	sxth	r3, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	b21a      	sxth	r2, r3
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <led_Off+0x44>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b21b      	sxth	r3, r3
 8001848:	4013      	ands	r3, r2
 800184a:	b21b      	sxth	r3, r3
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <led_Off+0x44>)
 8001850:	801a      	strh	r2, [r3, #0]
	}
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	2000001a 	.word	0x2000001a

08001864 <clearAllLed>:
/**
  * @brief  Tắt tất cả các LED trên mảng LED 7 đoạn và các LED khác liên quan
  * @param  None
  * @retval None
  */
void clearAllLed() {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
    // Đặt tất cả các giá trị trong mảng led7seg thành 0xFF (tắt tất cả các đoạn)
    for (int i = 0; i < 4; i++) {
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e007      	b.n	8001880 <clearAllLed+0x1c>
        led7seg[i] = 0xFF; // 0xFF là trạng thái tắt cho LED 7 đoạn
 8001870:	4a19      	ldr	r2, [pc, #100]	@ (80018d8 <clearAllLed+0x74>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	22ff      	movs	r2, #255	@ 0xff
 8001878:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3301      	adds	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b03      	cmp	r3, #3
 8001884:	ddf4      	ble.n	8001870 <clearAllLed+0xc>
    }

    // Xóa bit colon (dấu hai chấm)
    led7_SetColon(0);
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff ffa8 	bl	80017dc <led7_SetColon>

    // Tắt tất cả các LED góc trên bên phải
    for (int i = 6; i <= 8; i++) {
 800188c:	2306      	movs	r3, #6
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	e007      	b.n	80018a2 <clearAllLed+0x3e>
        led_Off(i);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ffc0 	bl	800181c <led_Off>
    for (int i = 6; i <= 8; i++) {
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	ddf4      	ble.n	8001892 <clearAllLed+0x2e>
    }

    // Gửi lệnh cập nhật đến phần cứng
    spi_buffer = 0xFFFF; // Buffer mặc định tắt
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <clearAllLed+0x78>)
 80018aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ae:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2140      	movs	r1, #64	@ 0x40
 80018b4:	480a      	ldr	r0, [pc, #40]	@ (80018e0 <clearAllLed+0x7c>)
 80018b6:	f000 fe6d 	bl	8002594 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (void *)&spi_buffer, 2, 1);
 80018ba:	2301      	movs	r3, #1
 80018bc:	2202      	movs	r2, #2
 80018be:	4907      	ldr	r1, [pc, #28]	@ (80018dc <clearAllLed+0x78>)
 80018c0:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <clearAllLed+0x80>)
 80018c2:	f001 fb6e 	bl	8002fa2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2140      	movs	r1, #64	@ 0x40
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <clearAllLed+0x7c>)
 80018cc:	f000 fe62 	bl	8002594 <HAL_GPIO_WritePin>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	2000001a 	.word	0x2000001a
 80018e0:	40021800 	.word	0x40021800
 80018e4:	200000fc 	.word	0x200000fc

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ec:	f000 fb0e 	bl	8001f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f0:	f000 f828 	bl	8001944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f4:	f7ff f994 	bl	8000c20 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018f8:	f000 f97a 	bl	8001bf0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80018fc:	f000 fa6a 	bl	8001dd4 <MX_TIM2_Init>
  MX_FSMC_Init();
 8001900:	f7ff f8be 	bl	8000a80 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001904:	f000 f888 	bl	8001a18 <system_init>
  led7_SetColon(1);
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff ff67 	bl	80017dc <led7_SetColon>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  fsm_automatic_run();
 800190e:	f7fe fe31 	bl	8000574 <fsm_automatic_run>
  while (1)
  {
	  while(!flag_timer1);
 8001912:	bf00      	nop
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <main+0x54>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0fb      	beq.n	8001914 <main+0x2c>
	  flag_timer1 = 0;
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <main+0x54>)
 800191e:	2200      	movs	r2, #0
 8001920:	801a      	strh	r2, [r3, #0]
	  fsm_automatic_run();
 8001922:	f7fe fe27 	bl	8000574 <fsm_automatic_run>


	  while(!flag_timer3);
 8001926:	bf00      	nop
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <main+0x58>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0fb      	beq.n	8001928 <main+0x40>
	  flag_timer3 = 0;
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <main+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	801a      	strh	r2, [r3, #0]
	  fsm_manual_run();
 8001936:	f7fe ff49 	bl	80007cc <fsm_manual_run>
	  while(!flag_timer1);
 800193a:	e7ea      	b.n	8001912 <main+0x2a>
 800193c:	200000e8 	.word	0x200000e8
 8001940:	200000f4 	.word	0x200000f4

08001944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b094      	sub	sp, #80	@ 0x50
 8001948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	2230      	movs	r2, #48	@ 0x30
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f002 fadc 	bl	8003f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <SystemClock_Config+0xcc>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	4a27      	ldr	r2, [pc, #156]	@ (8001a10 <SystemClock_Config+0xcc>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001976:	6413      	str	r3, [r2, #64]	@ 0x40
 8001978:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <SystemClock_Config+0xcc>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <SystemClock_Config+0xd0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <SystemClock_Config+0xd0>)
 800198e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <SystemClock_Config+0xd0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a0:	2302      	movs	r3, #2
 80019a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a4:	2301      	movs	r3, #1
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a8:	2310      	movs	r3, #16
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ac:	2302      	movs	r3, #2
 80019ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019b0:	2300      	movs	r3, #0
 80019b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019b4:	2308      	movs	r3, #8
 80019b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019b8:	23a8      	movs	r3, #168	@ 0xa8
 80019ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019bc:	2302      	movs	r3, #2
 80019be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019c0:	2304      	movs	r3, #4
 80019c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fdfd 	bl	80025c8 <HAL_RCC_OscConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019d4:	f000 f848 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d8:	230f      	movs	r3, #15
 80019da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019dc:	2302      	movs	r3, #2
 80019de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80019ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	2105      	movs	r1, #5
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 f85e 	bl	8002ab8 <HAL_RCC_ClockConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a02:	f000 f831 	bl	8001a68 <Error_Handler>
  }
}
 8001a06:	bf00      	nop
 8001a08:	3750      	adds	r7, #80	@ 0x50
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40007000 	.word	0x40007000

08001a18 <system_init>:

/* USER CODE BEGIN 4 */
void system_init (){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2120      	movs	r1, #32
 8001a20:	4810      	ldr	r0, [pc, #64]	@ (8001a64 <system_init+0x4c>)
 8001a22:	f000 fdb7 	bl	8002594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2140      	movs	r1, #64	@ 0x40
 8001a2a:	480e      	ldr	r0, [pc, #56]	@ (8001a64 <system_init+0x4c>)
 8001a2c:	f000 fdb2 	bl	8002594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2110      	movs	r1, #16
 8001a34:	480b      	ldr	r0, [pc, #44]	@ (8001a64 <system_init+0x4c>)
 8001a36:	f000 fdad 	bl	8002594 <HAL_GPIO_WritePin>
	timer_init();
 8001a3a:	f000 f81b 	bl	8001a74 <timer_init>
	led7_init();
 8001a3e:	f7ff fe11 	bl	8001664 <led7_init>
	setTimer2(1000);
 8001a42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a46:	f000 f83b 	bl	8001ac0 <setTimer2>
	setTimer1(1000);
 8001a4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a4e:	f000 f81b 	bl	8001a88 <setTimer1>
	setTimer3(250);
 8001a52:	20fa      	movs	r0, #250	@ 0xfa
 8001a54:	f000 f850 	bl	8001af8 <setTimer3>
	button_init();
 8001a58:	f7fe fd2e 	bl	80004b8 <button_init>
	lcd_init();
 8001a5c:	f7ff fbaa 	bl	80011b4 <lcd_init>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <Error_Handler+0x8>

08001a74 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <timer_init+0x10>)
 8001a7a:	f001 fd4b 	bl	8003514 <HAL_TIM_Base_Start_IT>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000154 	.word	0x20000154

08001a88 <setTimer1>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer1(uint16_t duration){
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
	timer1_MUL = duration/TIMER_CYCLE;
 8001a92:	4a08      	ldr	r2, [pc, #32]	@ (8001ab4 <setTimer1+0x2c>)
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	8013      	strh	r3, [r2, #0]
	timer1_counter = timer1_MUL;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <setTimer1+0x2c>)
 8001a9a:	881a      	ldrh	r2, [r3, #0]
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <setTimer1+0x30>)
 8001a9e:	801a      	strh	r2, [r3, #0]
	flag_timer1 = 0;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <setTimer1+0x34>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	801a      	strh	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200000ec 	.word	0x200000ec
 8001ab8:	200000ea 	.word	0x200000ea
 8001abc:	200000e8 	.word	0x200000e8

08001ac0 <setTimer2>:

void setTimer2(uint16_t duration){
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE;
 8001aca:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <setTimer2+0x2c>)
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <setTimer2+0x2c>)
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <setTimer2+0x30>)
 8001ad6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <setTimer2+0x34>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200000f2 	.word	0x200000f2
 8001af0:	200000f0 	.word	0x200000f0
 8001af4:	200000ee 	.word	0x200000ee

08001af8 <setTimer3>:


void setTimer3(uint16_t duration){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE;
 8001b02:	4a08      	ldr	r2, [pc, #32]	@ (8001b24 <setTimer3+0x2c>)
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <setTimer3+0x2c>)
 8001b0a:	881a      	ldrh	r2, [r3, #0]
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <setTimer3+0x30>)
 8001b0e:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <setTimer3+0x34>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	801a      	strh	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200000f8 	.word	0x200000f8
 8001b28:	200000f6 	.word	0x200000f6
 8001b2c:	200000f4 	.word	0x200000f4

08001b30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b40:	d140      	bne.n	8001bc4 <HAL_TIM_PeriodElapsedCallback+0x94>
		if(timer1_counter > 0){
 8001b42:	4b22      	ldr	r3, [pc, #136]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d010      	beq.n	8001b6c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer1_counter--;
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b54:	801a      	strh	r2, [r3, #0]
			if(timer1_counter == 0) {
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer1 = 1;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	801a      	strh	r2, [r3, #0]
				timer1_counter = timer1_MUL;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b66:	881a      	ldrh	r2, [r3, #0]
 8001b68:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b6a:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer2_counter > 0){
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d010      	beq.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x66>
			timer2_counter--;
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b7e:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d106      	bne.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer2 = 1;
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b90:	881a      	ldrh	r2, [r3, #0]
 8001b92:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b94:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer3_counter > 0){
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d010      	beq.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer3_counter--;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001ba8:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer3 = 1;
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001bbe:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();		// 1ms interrupt here
 8001bc0:	f7ff fd5c 	bl	800167c <led7_Scan>
	}


}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200000ea 	.word	0x200000ea
 8001bd0:	200000e8 	.word	0x200000e8
 8001bd4:	200000ec 	.word	0x200000ec
 8001bd8:	200000f0 	.word	0x200000f0
 8001bdc:	200000ee 	.word	0x200000ee
 8001be0:	200000f2 	.word	0x200000f2
 8001be4:	200000f6 	.word	0x200000f6
 8001be8:	200000f4 	.word	0x200000f4
 8001bec:	200000f8 	.word	0x200000f8

08001bf0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001bf6:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <MX_SPI1_Init+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001bfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c02:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c3c:	220a      	movs	r2, #10
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c42:	f001 f925 	bl	8002e90 <HAL_SPI_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c4c:	f7ff ff0c 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200000fc 	.word	0x200000fc
 8001c58:	40013000 	.word	0x40013000

08001c5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	@ 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a19      	ldr	r2, [pc, #100]	@ (8001ce0 <HAL_SPI_MspInit+0x84>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d12b      	bne.n	8001cd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001c88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cb6:	2338      	movs	r3, #56	@ 0x38
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <HAL_SPI_MspInit+0x8c>)
 8001cd2:	f000 fac3 	bl	800225c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	@ 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40013000 	.word	0x40013000
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020400 	.word	0x40020400

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d02:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	4a08      	ldr	r2, [pc, #32]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <NMI_Handler+0x4>

08001d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <MemManage_Handler+0x4>

08001d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d92:	f000 f90d 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <TIM2_IRQHandler+0x10>)
 8001da2:	f001 fc27 	bl	80035f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000154 	.word	0x20000154

08001db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de8:	463b      	mov	r3, r7
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MX_TIM2_Init+0x94>)
 8001df2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001df6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <MX_TIM2_Init+0x94>)
 8001dfa:	f240 3247 	movw	r2, #839	@ 0x347
 8001dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <MX_TIM2_Init+0x94>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001e06:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <MX_TIM2_Init+0x94>)
 8001e08:	2263      	movs	r2, #99	@ 0x63
 8001e0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <MX_TIM2_Init+0x94>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <MX_TIM2_Init+0x94>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e18:	4813      	ldr	r0, [pc, #76]	@ (8001e68 <MX_TIM2_Init+0x94>)
 8001e1a:	f001 fb2b 	bl	8003474 <HAL_TIM_Base_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e24:	f7ff fe20 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	4619      	mov	r1, r3
 8001e34:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <MX_TIM2_Init+0x94>)
 8001e36:	f001 fccd 	bl	80037d4 <HAL_TIM_ConfigClockSource>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e40:	f7ff fe12 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e44:	2300      	movs	r3, #0
 8001e46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <MX_TIM2_Init+0x94>)
 8001e52:	f001 fef5 	bl	8003c40 <HAL_TIMEx_MasterConfigSynchronization>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e5c:	f7ff fe04 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000154 	.word	0x20000154

08001e6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7c:	d115      	bne.n	8001eaa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x48>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x48>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x48>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	201c      	movs	r0, #28
 8001ea0:	f000 f9a5 	bl	80021ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea4:	201c      	movs	r0, #28
 8001ea6:	f000 f9be 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001eb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ef0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ebc:	f7ff ff78 	bl	8001db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec0:	480c      	ldr	r0, [pc, #48]	@ (8001ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ec2:	490d      	ldr	r1, [pc, #52]	@ (8001ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f002 f81b 	bl	8003f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eea:	f7ff fcfd 	bl	80018e8 <main>
  bx  lr    
 8001eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001efc:	08003fa0 	.word	0x08003fa0
  ldr r2, =_sbss
 8001f00:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001f04:	200001a0 	.word	0x200001a0

08001f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC_IRQHandler>
	...

08001f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f10:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	@ (8001f4c <HAL_Init+0x40>)
 8001f16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <HAL_Init+0x40>)
 8001f22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	@ (8001f4c <HAL_Init+0x40>)
 8001f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f34:	2003      	movs	r0, #3
 8001f36:	f000 f94f 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3a:	200f      	movs	r0, #15
 8001f3c:	f000 f808 	bl	8001f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f40:	f7ff fed4 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00

08001f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_InitTick+0x54>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <HAL_InitTick+0x58>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f967 	bl	8002242 <HAL_SYSTICK_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00e      	b.n	8001f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d80a      	bhi.n	8001f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f000 f92f 	bl	80021ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f90:	4a06      	ldr	r2, [pc, #24]	@ (8001fac <HAL_InitTick+0x5c>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000001c 	.word	0x2000001c
 8001fa8:	20000024 	.word	0x20000024
 8001fac:	20000020 	.word	0x20000020

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000024 	.word	0x20000024
 8001fd4:	2000019c 	.word	0x2000019c

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	@ (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	2000019c 	.word	0x2000019c

08001ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff ffee 	bl	8001fd8 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d005      	beq.n	8002016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_Delay+0x44>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002016:	bf00      	nop
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d8f7      	bhi.n	8002018 <HAL_Delay+0x28>
  {
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000024 	.word	0x20000024

08002038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	@ (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	@ (80020d4 <__NVIC_EnableIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	@ (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	@ (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	@ 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
         );
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	@ 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a4:	d301      	bcc.n	80021aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00f      	b.n	80021ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <SysTick_Config+0x40>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b2:	210f      	movs	r1, #15
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f7ff ff8e 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <SysTick_Config+0x40>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c2:	4b04      	ldr	r3, [pc, #16]	@ (80021d4 <SysTick_Config+0x40>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff29 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff3e 	bl	8002080 <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff8e 	bl	800212c <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5d 	bl	80020d8 <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff31 	bl	800209c <__NVIC_EnableIRQ>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ffa2 	bl	8002194 <SysTick_Config>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	@ 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e16b      	b.n	8002550 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 815a 	bne.w	800254a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d005      	beq.n	80022ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d130      	bne.n	8002310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0201 	and.w	r2, r3, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d017      	beq.n	800234c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80b4 	beq.w	800254a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b60      	ldr	r3, [pc, #384]	@ (8002568 <HAL_GPIO_Init+0x30c>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002568 <HAL_GPIO_Init+0x30c>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002568 <HAL_GPIO_Init+0x30c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fe:	4a5b      	ldr	r2, [pc, #364]	@ (800256c <HAL_GPIO_Init+0x310>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a52      	ldr	r2, [pc, #328]	@ (8002570 <HAL_GPIO_Init+0x314>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d02b      	beq.n	8002482 <HAL_GPIO_Init+0x226>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a51      	ldr	r2, [pc, #324]	@ (8002574 <HAL_GPIO_Init+0x318>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d025      	beq.n	800247e <HAL_GPIO_Init+0x222>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a50      	ldr	r2, [pc, #320]	@ (8002578 <HAL_GPIO_Init+0x31c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01f      	beq.n	800247a <HAL_GPIO_Init+0x21e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4f      	ldr	r2, [pc, #316]	@ (800257c <HAL_GPIO_Init+0x320>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_GPIO_Init+0x21a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4e      	ldr	r2, [pc, #312]	@ (8002580 <HAL_GPIO_Init+0x324>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x216>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4d      	ldr	r2, [pc, #308]	@ (8002584 <HAL_GPIO_Init+0x328>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x212>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4c      	ldr	r2, [pc, #304]	@ (8002588 <HAL_GPIO_Init+0x32c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x20e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4b      	ldr	r2, [pc, #300]	@ (800258c <HAL_GPIO_Init+0x330>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x20a>
 8002462:	2307      	movs	r3, #7
 8002464:	e00e      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002466:	2308      	movs	r3, #8
 8002468:	e00c      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800246a:	2306      	movs	r3, #6
 800246c:	e00a      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800246e:	2305      	movs	r3, #5
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002472:	2304      	movs	r3, #4
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x228>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x228>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002494:	4935      	ldr	r1, [pc, #212]	@ (800256c <HAL_GPIO_Init+0x310>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002590 <HAL_GPIO_Init+0x334>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c6:	4a32      	ldr	r2, [pc, #200]	@ (8002590 <HAL_GPIO_Init+0x334>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024cc:	4b30      	ldr	r3, [pc, #192]	@ (8002590 <HAL_GPIO_Init+0x334>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f0:	4a27      	ldr	r2, [pc, #156]	@ (8002590 <HAL_GPIO_Init+0x334>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f6:	4b26      	ldr	r3, [pc, #152]	@ (8002590 <HAL_GPIO_Init+0x334>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251a:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <HAL_GPIO_Init+0x334>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002520:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <HAL_GPIO_Init+0x334>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002544:	4a12      	ldr	r2, [pc, #72]	@ (8002590 <HAL_GPIO_Init+0x334>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f ae90 	bls.w	8002278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	@ 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40013800 	.word	0x40013800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40021400 	.word	0x40021400
 8002588:	40021800 	.word	0x40021800
 800258c:	40021c00 	.word	0x40021c00
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025b0:	e003      	b.n	80025ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e267      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d075      	beq.n	80026d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025e6:	4b88      	ldr	r3, [pc, #544]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d00c      	beq.n	800260c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f2:	4b85      	ldr	r3, [pc, #532]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d112      	bne.n	8002624 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fe:	4b82      	ldr	r3, [pc, #520]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002606:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800260a:	d10b      	bne.n	8002624 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	4b7e      	ldr	r3, [pc, #504]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05b      	beq.n	80026d0 <HAL_RCC_OscConfig+0x108>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d157      	bne.n	80026d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e242      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262c:	d106      	bne.n	800263c <HAL_RCC_OscConfig+0x74>
 800262e:	4b76      	ldr	r3, [pc, #472]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a75      	ldr	r2, [pc, #468]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e01d      	b.n	8002678 <HAL_RCC_OscConfig+0xb0>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x98>
 8002646:	4b70      	ldr	r3, [pc, #448]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a6f      	ldr	r2, [pc, #444]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800264c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b6d      	ldr	r3, [pc, #436]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6c      	ldr	r2, [pc, #432]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0xb0>
 8002660:	4b69      	ldr	r3, [pc, #420]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a68      	ldr	r2, [pc, #416]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b66      	ldr	r3, [pc, #408]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a65      	ldr	r2, [pc, #404]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff fcaa 	bl	8001fd8 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002688:	f7ff fca6 	bl	8001fd8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	@ 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e207      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b5b      	ldr	r3, [pc, #364]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0xc0>
 80026a6:	e014      	b.n	80026d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff fc96 	bl	8001fd8 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7ff fc92 	bl	8001fd8 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	@ 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e1f3      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	4b51      	ldr	r3, [pc, #324]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0xe8>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d063      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026de:	4b4a      	ldr	r3, [pc, #296]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ea:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d11c      	bne.n	8002730 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f6:	4b44      	ldr	r3, [pc, #272]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d116      	bne.n	8002730 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x152>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e1c7      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b3b      	ldr	r3, [pc, #236]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4937      	ldr	r1, [pc, #220]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	e03a      	b.n	80027a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002738:	4b34      	ldr	r3, [pc, #208]	@ (800280c <HAL_RCC_OscConfig+0x244>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273e:	f7ff fc4b 	bl	8001fd8 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002746:	f7ff fc47 	bl	8001fd8 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1a8      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4925      	ldr	r1, [pc, #148]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
 8002778:	e015      	b.n	80027a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277a:	4b24      	ldr	r3, [pc, #144]	@ (800280c <HAL_RCC_OscConfig+0x244>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7ff fc2a 	bl	8001fd8 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002788:	f7ff fc26 	bl	8001fd8 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e187      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d036      	beq.n	8002820 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d016      	beq.n	80027e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_RCC_OscConfig+0x248>)
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7ff fc0a 	bl	8001fd8 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c8:	f7ff fc06 	bl	8001fd8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e167      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80027dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x200>
 80027e6:	e01b      	b.n	8002820 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e8:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <HAL_RCC_OscConfig+0x248>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7ff fbf3 	bl	8001fd8 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f4:	e00e      	b.n	8002814 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f6:	f7ff fbef 	bl	8001fd8 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d907      	bls.n	8002814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e150      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
 8002808:	40023800 	.word	0x40023800
 800280c:	42470000 	.word	0x42470000
 8002810:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	4b88      	ldr	r3, [pc, #544]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ea      	bne.n	80027f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8097 	beq.w	800295c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b81      	ldr	r3, [pc, #516]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b7d      	ldr	r3, [pc, #500]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	4a7c      	ldr	r2, [pc, #496]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	@ 0x40
 800284e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b77      	ldr	r3, [pc, #476]	@ (8002a3c <HAL_RCC_OscConfig+0x474>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d118      	bne.n	800289c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b74      	ldr	r3, [pc, #464]	@ (8002a3c <HAL_RCC_OscConfig+0x474>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a73      	ldr	r2, [pc, #460]	@ (8002a3c <HAL_RCC_OscConfig+0x474>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7ff fbaf 	bl	8001fd8 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7ff fbab 	bl	8001fd8 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e10c      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	4b6a      	ldr	r3, [pc, #424]	@ (8002a3c <HAL_RCC_OscConfig+0x474>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2ea>
 80028a4:	4b64      	ldr	r3, [pc, #400]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	4a63      	ldr	r2, [pc, #396]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b0:	e01c      	b.n	80028ec <HAL_RCC_OscConfig+0x324>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x30c>
 80028ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028be:	4a5e      	ldr	r2, [pc, #376]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0x324>
 80028d4:	4b58      	ldr	r3, [pc, #352]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	4a57      	ldr	r2, [pc, #348]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e0:	4b55      	ldr	r3, [pc, #340]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	4a54      	ldr	r2, [pc, #336]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7ff fb70 	bl	8001fd8 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7ff fb6c 	bl	8001fd8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0cb      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	4b49      	ldr	r3, [pc, #292]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0ee      	beq.n	80028fc <HAL_RCC_OscConfig+0x334>
 800291e:	e014      	b.n	800294a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002920:	f7ff fb5a 	bl	8001fd8 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002926:	e00a      	b.n	800293e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7ff fb56 	bl	8001fd8 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0b5      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ee      	bne.n	8002928 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b39      	ldr	r3, [pc, #228]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	4a38      	ldr	r2, [pc, #224]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800295a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80a1 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002966:	4b34      	ldr	r3, [pc, #208]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d05c      	beq.n	8002a2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d141      	bne.n	80029fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b31      	ldr	r3, [pc, #196]	@ (8002a40 <HAL_RCC_OscConfig+0x478>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff fb2a 	bl	8001fd8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7ff fb26 	bl	8001fd8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e087      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	019b      	lsls	r3, r3, #6
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	3b01      	subs	r3, #1
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	061b      	lsls	r3, r3, #24
 80029ca:	491b      	ldr	r1, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <HAL_RCC_OscConfig+0x478>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7ff faff 	bl	8001fd8 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029de:	f7ff fafb 	bl	8001fd8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e05c      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x416>
 80029fc:	e054      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <HAL_RCC_OscConfig+0x478>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff fae8 	bl	8001fd8 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7ff fae4 	bl	8001fd8 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e045      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x444>
 8002a2a:	e03d      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e038      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a44:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x4ec>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d028      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d121      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d11a      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a74:	4013      	ands	r3, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d111      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0cc      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b68      	ldr	r3, [pc, #416]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d90c      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b65      	ldr	r3, [pc, #404]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b63      	ldr	r3, [pc, #396]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0b8      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b0c:	4b59      	ldr	r3, [pc, #356]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a58      	ldr	r2, [pc, #352]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b24:	4b53      	ldr	r3, [pc, #332]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a52      	ldr	r2, [pc, #328]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	4b50      	ldr	r3, [pc, #320]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	494d      	ldr	r1, [pc, #308]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d044      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b47      	ldr	r3, [pc, #284]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d119      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e07f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b76:	4b3f      	ldr	r3, [pc, #252]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e06f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	4b3b      	ldr	r3, [pc, #236]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e067      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b96:	4b37      	ldr	r3, [pc, #220]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4934      	ldr	r1, [pc, #208]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba8:	f7ff fa16 	bl	8001fd8 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb0:	f7ff fa12 	bl	8001fd8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e04f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 020c 	and.w	r2, r3, #12
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1eb      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b25      	ldr	r3, [pc, #148]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d20c      	bcs.n	8002c00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e032      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4916      	ldr	r1, [pc, #88]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2a:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	490e      	ldr	r1, [pc, #56]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3e:	f000 f821 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	490a      	ldr	r1, [pc, #40]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	5ccb      	ldrb	r3, [r1, r3]
 8002c52:	fa22 f303 	lsr.w	r3, r2, r3
 8002c56:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c5a:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff f976 	bl	8001f50 <HAL_InitTick>

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023c00 	.word	0x40023c00
 8002c74:	40023800 	.word	0x40023800
 8002c78:	08003f80 	.word	0x08003f80
 8002c7c:	2000001c 	.word	0x2000001c
 8002c80:	20000020 	.word	0x20000020

08002c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c88:	b094      	sub	sp, #80	@ 0x50
 8002c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c9c:	4b79      	ldr	r3, [pc, #484]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	f200 80e1 	bhi.w	8002e70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002cb6:	e0db      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b73      	ldr	r3, [pc, #460]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cbc:	e0db      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cbe:	4b73      	ldr	r3, [pc, #460]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x208>)
 8002cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cc2:	e0d8      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ccc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cce:	4b6d      	ldr	r3, [pc, #436]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d063      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cda:	4b6a      	ldr	r3, [pc, #424]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ce4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cec:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cee:	2300      	movs	r3, #0
 8002cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	462b      	mov	r3, r5
 8002cfa:	f04f 0000 	mov.w	r0, #0
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	0159      	lsls	r1, r3, #5
 8002d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d08:	0150      	lsls	r0, r2, #5
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4621      	mov	r1, r4
 8002d10:	1a51      	subs	r1, r2, r1
 8002d12:	6139      	str	r1, [r7, #16]
 8002d14:	4629      	mov	r1, r5
 8002d16:	eb63 0301 	sbc.w	r3, r3, r1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d28:	4659      	mov	r1, fp
 8002d2a:	018b      	lsls	r3, r1, #6
 8002d2c:	4651      	mov	r1, sl
 8002d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d32:	4651      	mov	r1, sl
 8002d34:	018a      	lsls	r2, r1, #6
 8002d36:	4651      	mov	r1, sl
 8002d38:	ebb2 0801 	subs.w	r8, r2, r1
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d56:	4690      	mov	r8, r2
 8002d58:	4699      	mov	r9, r3
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	eb18 0303 	adds.w	r3, r8, r3
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	462b      	mov	r3, r5
 8002d64:	eb49 0303 	adc.w	r3, r9, r3
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d76:	4629      	mov	r1, r5
 8002d78:	024b      	lsls	r3, r1, #9
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d80:	4621      	mov	r1, r4
 8002d82:	024a      	lsls	r2, r1, #9
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d94:	f7fd fa18 	bl	80001c8 <__aeabi_uldivmod>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da0:	e058      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da2:	4b38      	ldr	r3, [pc, #224]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	099b      	lsrs	r3, r3, #6
 8002da8:	2200      	movs	r2, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	4611      	mov	r1, r2
 8002dae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002db2:	623b      	str	r3, [r7, #32]
 8002db4:	2300      	movs	r3, #0
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	f04f 0000 	mov.w	r0, #0
 8002dc4:	f04f 0100 	mov.w	r1, #0
 8002dc8:	0159      	lsls	r1, r3, #5
 8002dca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dce:	0150      	lsls	r0, r2, #5
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dda:	4649      	mov	r1, r9
 8002ddc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002df0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002df4:	ebb2 040a 	subs.w	r4, r2, sl
 8002df8:	eb63 050b 	sbc.w	r5, r3, fp
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	00eb      	lsls	r3, r5, #3
 8002e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e0a:	00e2      	lsls	r2, r4, #3
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	461d      	mov	r5, r3
 8002e10:	4643      	mov	r3, r8
 8002e12:	18e3      	adds	r3, r4, r3
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	464b      	mov	r3, r9
 8002e18:	eb45 0303 	adc.w	r3, r5, r3
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	028b      	lsls	r3, r1, #10
 8002e2e:	4621      	mov	r1, r4
 8002e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e34:	4621      	mov	r1, r4
 8002e36:	028a      	lsls	r2, r1, #10
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	61fa      	str	r2, [r7, #28]
 8002e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e48:	f7fd f9be 	bl	80001c8 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4613      	mov	r3, r2
 8002e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e54:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e6e:	e002      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3750      	adds	r7, #80	@ 0x50
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	00f42400 	.word	0x00f42400
 8002e8c:	007a1200 	.word	0x007a1200

08002e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e07b      	b.n	8002f9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d108      	bne.n	8002ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eb2:	d009      	beq.n	8002ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
 8002eba:	e005      	b.n	8002ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe feba 	bl	8001c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002efe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4c:	ea42 0103 	orr.w	r1, r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	f003 0104 	and.w	r1, r3, #4
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	f003 0210 	and.w	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b088      	sub	sp, #32
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb2:	f7ff f811 	bl	8001fd8 <HAL_GetTick>
 8002fb6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d001      	beq.n	8002fcc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e12a      	b.n	8003222 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_SPI_Transmit+0x36>
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e122      	b.n	8003222 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_SPI_Transmit+0x48>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e11b      	b.n	8003222 <HAL_SPI_Transmit+0x280>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	88fa      	ldrh	r2, [r7, #6]
 800300a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003038:	d10f      	bne.n	800305a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003048:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003064:	2b40      	cmp	r3, #64	@ 0x40
 8003066:	d007      	beq.n	8003078 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003080:	d152      	bne.n	8003128 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_SPI_Transmit+0xee>
 800308a:	8b7b      	ldrh	r3, [r7, #26]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d145      	bne.n	800311c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	1c9a      	adds	r2, r3, #2
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030b4:	e032      	b.n	800311c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d112      	bne.n	80030ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	881a      	ldrh	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d4:	1c9a      	adds	r2, r3, #2
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030e8:	e018      	b.n	800311c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ea:	f7fe ff75 	bl	8001fd8 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d803      	bhi.n	8003102 <HAL_SPI_Transmit+0x160>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d102      	bne.n	8003108 <HAL_SPI_Transmit+0x166>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e082      	b.n	8003222 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1c7      	bne.n	80030b6 <HAL_SPI_Transmit+0x114>
 8003126:	e053      	b.n	80031d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_SPI_Transmit+0x194>
 8003130:	8b7b      	ldrh	r3, [r7, #26]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d147      	bne.n	80031c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	330c      	adds	r3, #12
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800315c:	e033      	b.n	80031c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b02      	cmp	r3, #2
 800316a:	d113      	bne.n	8003194 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	330c      	adds	r3, #12
 8003176:	7812      	ldrb	r2, [r2, #0]
 8003178:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003192:	e018      	b.n	80031c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003194:	f7fe ff20 	bl	8001fd8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d803      	bhi.n	80031ac <HAL_SPI_Transmit+0x20a>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d102      	bne.n	80031b2 <HAL_SPI_Transmit+0x210>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e02d      	b.n	8003222 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1c6      	bne.n	800315e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f8b1 	bl	800333c <SPI_EndRxTxTransaction>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003220:	2300      	movs	r3, #0
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	4613      	mov	r3, r2
 800323a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800323c:	f7fe fecc 	bl	8001fd8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	4413      	add	r3, r2
 800324a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800324c:	f7fe fec4 	bl	8001fd8 <HAL_GetTick>
 8003250:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003252:	4b39      	ldr	r3, [pc, #228]	@ (8003338 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	015b      	lsls	r3, r3, #5
 8003258:	0d1b      	lsrs	r3, r3, #20
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003262:	e054      	b.n	800330e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326a:	d050      	beq.n	800330e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800326c:	f7fe feb4 	bl	8001fd8 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	429a      	cmp	r2, r3
 800327a:	d902      	bls.n	8003282 <SPI_WaitFlagStateUntilTimeout+0x56>
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d13d      	bne.n	80032fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003290:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800329a:	d111      	bne.n	80032c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a4:	d004      	beq.n	80032b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ae:	d107      	bne.n	80032c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032c8:	d10f      	bne.n	80032ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e017      	b.n	800332e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3b01      	subs	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	bf0c      	ite	eq
 800331e:	2301      	moveq	r3, #1
 8003320:	2300      	movne	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	429a      	cmp	r2, r3
 800332a:	d19b      	bne.n	8003264 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	2000001c 	.word	0x2000001c

0800333c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2201      	movs	r2, #1
 8003350:	2102      	movs	r1, #2
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff ff6a 	bl	800322c <SPI_WaitFlagStateUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e032      	b.n	80033d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800336e:	4b1b      	ldr	r3, [pc, #108]	@ (80033dc <SPI_EndRxTxTransaction+0xa0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1b      	ldr	r2, [pc, #108]	@ (80033e0 <SPI_EndRxTxTransaction+0xa4>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	0d5b      	lsrs	r3, r3, #21
 800337a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800338c:	d112      	bne.n	80033b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2200      	movs	r2, #0
 8003396:	2180      	movs	r1, #128	@ 0x80
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f7ff ff47 	bl	800322c <SPI_WaitFlagStateUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d016      	beq.n	80033d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	f043 0220 	orr.w	r2, r3, #32
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e00f      	b.n	80033d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3b01      	subs	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ca:	2b80      	cmp	r3, #128	@ 0x80
 80033cc:	d0f2      	beq.n	80033b4 <SPI_EndRxTxTransaction+0x78>
 80033ce:	e000      	b.n	80033d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80033d0:	bf00      	nop
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	2000001c 	.word	0x2000001c
 80033e0:	165e9f81 	.word	0x165e9f81

080033e4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e038      	b.n	800346c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7fd fbfc 	bl	8000c0c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3308      	adds	r3, #8
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 fc9e 	bl	8003d60 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	461a      	mov	r2, r3
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	f000 fd00 	bl	8003e34 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6858      	ldr	r0, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	f000 fd2d 	bl	8003ea0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	6892      	ldr	r2, [r2, #8]
 800344e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	6892      	ldr	r2, [r2, #8]
 800345a:	f041 0101 	orr.w	r1, r1, #1
 800345e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e041      	b.n	800350a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe fce6 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fa7e 	bl	80039b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d001      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e04e      	b.n	80035ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a23      	ldr	r2, [pc, #140]	@ (80035d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d022      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003556:	d01d      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1f      	ldr	r2, [pc, #124]	@ (80035dc <HAL_TIM_Base_Start_IT+0xc8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d018      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d013      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1c      	ldr	r2, [pc, #112]	@ (80035e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00e      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d009      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a19      	ldr	r2, [pc, #100]	@ (80035ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a18      	ldr	r2, [pc, #96]	@ (80035f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d111      	bne.n	80035b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d010      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b6:	e007      	b.n	80035c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40010000 	.word	0x40010000
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	40010400 	.word	0x40010400
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40001800 	.word	0x40001800

080035f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d020      	beq.n	8003658 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01b      	beq.n	8003658 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0202 	mvn.w	r2, #2
 8003628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f999 	bl	8003976 <HAL_TIM_IC_CaptureCallback>
 8003644:	e005      	b.n	8003652 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f98b 	bl	8003962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f99c 	bl	800398a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d020      	beq.n	80036a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01b      	beq.n	80036a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0204 	mvn.w	r2, #4
 8003674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f973 	bl	8003976 <HAL_TIM_IC_CaptureCallback>
 8003690:	e005      	b.n	800369e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f965 	bl	8003962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f976 	bl	800398a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d020      	beq.n	80036f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01b      	beq.n	80036f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0208 	mvn.w	r2, #8
 80036c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2204      	movs	r2, #4
 80036c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f94d 	bl	8003976 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f93f 	bl	8003962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f950 	bl	800398a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d020      	beq.n	800373c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01b      	beq.n	800373c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2208      	movs	r2, #8
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f927 	bl	8003976 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f919 	bl	8003962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f92a 	bl	800398a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0201 	mvn.w	r2, #1
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe f9e8 	bl	8001b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fae4 	bl	8003d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00c      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8fb 	bl	800399e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00c      	beq.n	80037cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0220 	mvn.w	r2, #32
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fab6 	bl	8003d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_ConfigClockSource+0x1c>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0b4      	b.n	800395a <HAL_TIM_ConfigClockSource+0x186>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800380e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003828:	d03e      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0xd4>
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800382e:	f200 8087 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003836:	f000 8086 	beq.w	8003946 <HAL_TIM_ConfigClockSource+0x172>
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383e:	d87f      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b70      	cmp	r3, #112	@ 0x70
 8003842:	d01a      	beq.n	800387a <HAL_TIM_ConfigClockSource+0xa6>
 8003844:	2b70      	cmp	r3, #112	@ 0x70
 8003846:	d87b      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b60      	cmp	r3, #96	@ 0x60
 800384a:	d050      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x11a>
 800384c:	2b60      	cmp	r3, #96	@ 0x60
 800384e:	d877      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003850:	2b50      	cmp	r3, #80	@ 0x50
 8003852:	d03c      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0xfa>
 8003854:	2b50      	cmp	r3, #80	@ 0x50
 8003856:	d873      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003858:	2b40      	cmp	r3, #64	@ 0x40
 800385a:	d058      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x13a>
 800385c:	2b40      	cmp	r3, #64	@ 0x40
 800385e:	d86f      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003860:	2b30      	cmp	r3, #48	@ 0x30
 8003862:	d064      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003864:	2b30      	cmp	r3, #48	@ 0x30
 8003866:	d86b      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d060      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d867      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d05c      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003874:	2b10      	cmp	r3, #16
 8003876:	d05a      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003878:	e062      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800388a:	f000 f9b9 	bl	8003c00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800389c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	609a      	str	r2, [r3, #8]
      break;
 80038a6:	e04f      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b8:	f000 f9a2 	bl	8003c00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038ca:	609a      	str	r2, [r3, #8]
      break;
 80038cc:	e03c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 f916 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2150      	movs	r1, #80	@ 0x50
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f96f 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 80038ec:	e02c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 f935 	bl	8003b6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2160      	movs	r1, #96	@ 0x60
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f95f 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 800390c:	e01c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391a:	461a      	mov	r2, r3
 800391c:	f000 f8f6 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2140      	movs	r1, #64	@ 0x40
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f94f 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 800392c:	e00c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f000 f946 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 800393e:	e003      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      break;
 8003944:	e000      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a46      	ldr	r2, [pc, #280]	@ (8003ae0 <TIM_Base_SetConfig+0x12c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d2:	d00f      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a43      	ldr	r2, [pc, #268]	@ (8003ae4 <TIM_Base_SetConfig+0x130>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00b      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a42      	ldr	r2, [pc, #264]	@ (8003ae8 <TIM_Base_SetConfig+0x134>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d007      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a41      	ldr	r2, [pc, #260]	@ (8003aec <TIM_Base_SetConfig+0x138>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a40      	ldr	r2, [pc, #256]	@ (8003af0 <TIM_Base_SetConfig+0x13c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d108      	bne.n	8003a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a35      	ldr	r2, [pc, #212]	@ (8003ae0 <TIM_Base_SetConfig+0x12c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d02b      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a14:	d027      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a32      	ldr	r2, [pc, #200]	@ (8003ae4 <TIM_Base_SetConfig+0x130>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d023      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a31      	ldr	r2, [pc, #196]	@ (8003ae8 <TIM_Base_SetConfig+0x134>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01f      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a30      	ldr	r2, [pc, #192]	@ (8003aec <TIM_Base_SetConfig+0x138>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01b      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2f      	ldr	r2, [pc, #188]	@ (8003af0 <TIM_Base_SetConfig+0x13c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d017      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a2e      	ldr	r2, [pc, #184]	@ (8003af4 <TIM_Base_SetConfig+0x140>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a2d      	ldr	r2, [pc, #180]	@ (8003af8 <TIM_Base_SetConfig+0x144>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00f      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2c      	ldr	r2, [pc, #176]	@ (8003afc <TIM_Base_SetConfig+0x148>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a2b      	ldr	r2, [pc, #172]	@ (8003b00 <TIM_Base_SetConfig+0x14c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2a      	ldr	r2, [pc, #168]	@ (8003b04 <TIM_Base_SetConfig+0x150>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a29      	ldr	r2, [pc, #164]	@ (8003b08 <TIM_Base_SetConfig+0x154>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a10      	ldr	r2, [pc, #64]	@ (8003ae0 <TIM_Base_SetConfig+0x12c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_Base_SetConfig+0xf8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a12      	ldr	r2, [pc, #72]	@ (8003af0 <TIM_Base_SetConfig+0x13c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d103      	bne.n	8003ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f023 0201 	bic.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40010400 	.word	0x40010400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800
 8003b00:	40001800 	.word	0x40001800
 8003b04:	40001c00 	.word	0x40001c00
 8003b08:	40002000 	.word	0x40002000

08003b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f023 030a 	bic.w	r3, r3, #10
 8003b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b087      	sub	sp, #28
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f023 0210 	bic.w	r2, r3, #16
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	031b      	lsls	r3, r3, #12
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ba6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	621a      	str	r2, [r3, #32]
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f043 0307 	orr.w	r3, r3, #7
 8003bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	021a      	lsls	r2, r3, #8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	609a      	str	r2, [r3, #8]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e05a      	b.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a21      	ldr	r2, [pc, #132]	@ (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d022      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1d      	ldr	r2, [pc, #116]	@ (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d018      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a18      	ldr	r2, [pc, #96]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d009      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10c      	bne.n	8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800
 8003d28:	40000c00 	.word	0x40000c00
 8003d2c:	40010400 	.word	0x40010400
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40001800 	.word	0x40001800

08003d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	f023 0101 	bic.w	r1, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d102      	bne.n	8003d90 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003d8a:	2340      	movs	r3, #64	@ 0x40
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e001      	b.n	8003d94 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003da0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003da6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003dac:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003db2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003db8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003dbe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8003dc4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8003dca:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8003dd0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8003dee:	4b10      	ldr	r3, [pc, #64]	@ (8003e30 <FSMC_NORSRAM_Init+0xd0>)
 8003df0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003df8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8003e00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	ea02 0103 	and.w	r1, r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4319      	orrs	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	0008fb7f 	.word	0x0008fb7f

08003e34 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e4a:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	051b      	lsls	r3, r3, #20
 8003e72:	431a      	orrs	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	3b02      	subs	r3, #2
 8003e7a:	061b      	lsls	r3, r3, #24
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	3201      	adds	r2, #1
 8003e88:	4319      	orrs	r1, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eb4:	d11d      	bne.n	8003ef2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ebe:	4b13      	ldr	r3, [pc, #76]	@ (8003f0c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	6811      	ldr	r1, [r2, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	6852      	ldr	r2, [r2, #4]
 8003eca:	0112      	lsls	r2, r2, #4
 8003ecc:	4311      	orrs	r1, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	6892      	ldr	r2, [r2, #8]
 8003ed2:	0212      	lsls	r2, r2, #8
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	6992      	ldr	r2, [r2, #24]
 8003eda:	4311      	orrs	r1, r2
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	68d2      	ldr	r2, [r2, #12]
 8003ee0:	0412      	lsls	r2, r2, #16
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	ea43 0102 	orr.w	r1, r3, r2
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003ef0:	e005      	b.n	8003efe <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8003efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	cff00000 	.word	0xcff00000

08003f10 <memset>:
 8003f10:	4402      	add	r2, r0
 8003f12:	4603      	mov	r3, r0
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d100      	bne.n	8003f1a <memset+0xa>
 8003f18:	4770      	bx	lr
 8003f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1e:	e7f9      	b.n	8003f14 <memset+0x4>

08003f20 <__libc_init_array>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	4d0d      	ldr	r5, [pc, #52]	@ (8003f58 <__libc_init_array+0x38>)
 8003f24:	4c0d      	ldr	r4, [pc, #52]	@ (8003f5c <__libc_init_array+0x3c>)
 8003f26:	1b64      	subs	r4, r4, r5
 8003f28:	10a4      	asrs	r4, r4, #2
 8003f2a:	2600      	movs	r6, #0
 8003f2c:	42a6      	cmp	r6, r4
 8003f2e:	d109      	bne.n	8003f44 <__libc_init_array+0x24>
 8003f30:	4d0b      	ldr	r5, [pc, #44]	@ (8003f60 <__libc_init_array+0x40>)
 8003f32:	4c0c      	ldr	r4, [pc, #48]	@ (8003f64 <__libc_init_array+0x44>)
 8003f34:	f000 f818 	bl	8003f68 <_init>
 8003f38:	1b64      	subs	r4, r4, r5
 8003f3a:	10a4      	asrs	r4, r4, #2
 8003f3c:	2600      	movs	r6, #0
 8003f3e:	42a6      	cmp	r6, r4
 8003f40:	d105      	bne.n	8003f4e <__libc_init_array+0x2e>
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f48:	4798      	blx	r3
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7ee      	b.n	8003f2c <__libc_init_array+0xc>
 8003f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f52:	4798      	blx	r3
 8003f54:	3601      	adds	r6, #1
 8003f56:	e7f2      	b.n	8003f3e <__libc_init_array+0x1e>
 8003f58:	08003f98 	.word	0x08003f98
 8003f5c:	08003f98 	.word	0x08003f98
 8003f60:	08003f98 	.word	0x08003f98
 8003f64:	08003f9c 	.word	0x08003f9c

08003f68 <_init>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	bf00      	nop
 8003f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6e:	bc08      	pop	{r3}
 8003f70:	469e      	mov	lr, r3
 8003f72:	4770      	bx	lr

08003f74 <_fini>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	bf00      	nop
 8003f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7a:	bc08      	pop	{r3}
 8003f7c:	469e      	mov	lr, r3
 8003f7e:	4770      	bx	lr
